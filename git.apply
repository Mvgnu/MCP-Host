 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
new file mode 100644
index 0000000000000000000000000000000000000000..70a2ec639cf26d122e6c87c4e60f85755d2bc7a5
--- /dev/null
+++ b/.github/workflows/ci.yml
@@ -0,0 +1,43 @@
+name: CI
+
+on:
+  push:
+    branches: [main]
+  pull_request:
+
+jobs:
+  backend:
+    runs-on: ubuntu-latest
+    env:
+      JWT_SECRET: testsecret
+    steps:
+      - uses: actions/checkout@v3
+      - uses: actions/setup-rust@v1
+        with:
+          rust-version: stable
+      - name: Install tools
+        run: cargo install cargo-audit --locked
+      - name: Build & Test
+        run: |
+          cargo fmt --check --manifest-path backend/Cargo.toml
+          cargo clippy --manifest-path backend/Cargo.toml -- -D warnings
+          cargo build --manifest-path backend/Cargo.toml
+          cargo test --manifest-path backend/Cargo.toml
+          cargo audit
+
+  frontend:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v3
+      - uses: actions/setup-node@v3
+        with:
+          node-version: '18'
+      - name: Install
+        run: npm install --prefix frontend --legacy-peer-deps
+      - name: Lint & Test
+        run: |
+          npm run lint --prefix frontend
+          npm test --prefix frontend
+          npx playwright install --with-deps
+          npm run test:e2e --prefix frontend
+          npm run build --prefix frontend
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..2bd4ccdc915c5e92149e600e45846eaaabc8fbf0
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,13 @@
+# Rust
+/target
+
+# Node
+node_modules/
+next-env.d.ts
+.DS_Store
+
+# general
+.env
+/backend/target
+proxy_conf/
+storage/
diff --git a/README.md b/README.md
index 4131f5412ffce71a93f89b524b9d3c8bcd213398..8cb65eddbb7a7ffc8f6cb2235108c18f4a889f2a 100644
--- a/README.md
+++ b/README.md
@@ -59,51 +59,60 @@ Design Notes: We use foreign keys to link mcp_servers to the owning users, and s
 
 The usage_metrics table can function as an event log for each server (one row per operation or request) or store aggregated stats (e.g. daily usage counts), depending on how we implement metrics collection. For simplicity, we’ll log each significant event for now. This data will enable both historical analysis (e.g. usage over time) and real-time monitoring of activity.
 
 We will use a database migration tool or ORM to create these tables. For example, if using Diesel (a type-safe Rust ORM), a migration file would contain SQL as above and can be run with diesel migration run  to set up the schema. If using an async SQL library like SQLx or Prisma, similar table definitions would be applied in the setup phase.
 
 Backend Setup (Rust, Axum Framework)
 
 Project Initialization: Start a new Rust project (binary crate) for the backend. In Cargo.toml, add dependencies for our web server, database, and auth needs. For example:
 
 [dependencies]
 axum = "0.6"              # Web framework for routing and handlers
 tokio = { version = "1.28", features = ["full"] }  # Async runtime
 serde = { version = "1.0", features = ["derive"] } # For JSON serialization
 serde_json = "1.0"
 dotenvy = "0.15"          # To load env vars (like DATABASE_URL)
 sqlx = { version = "0.6", features = ["postgres", "runtime-tokio-native-tls"] } 
 # or alternatively: diesel = { version = "2.1.0", features = ["postgres"] }
 
 jsonwebtoken = "8.2"      # For JWT creation/verification
 argon2 = "0.4"            # For secure password hashing (Argon2id)
 uuid = "1.3"              # To generate unique IDs (optional, e.g. for session tokens)
 tracing = "0.1"           # For logging
 
 Why Axum? Axum (from the Tokio project) provides a fast, modular HTTP server with strong async support and type-safe routing . It integrates nicely with Tower middleware and Rust’s ecosystem. We choose Axum for clarity and performance, but Actix-Web could also be used with similar principles. We’ll use PostgreSQL via an async driver (SQLx) or Diesel with a connection pool for database operations.
 
-Configuration: Load configuration from environment variables or a .env file (using dotenvy). Critical settings include the DATABASE_URL (Postgres connection string), a JWT signing secret key, and possibly a Docker host or other runtime configs. We’ll also enable logging with tracing for debugging.
+Configuration: Load configuration from environment variables or a `.env` file using `dotenvy`. **Both** `DATABASE_URL` and `JWT_SECRET` must be defined before starting the server. The JWT secret is used for signing authentication tokens and the process will exit if it is missing. Other runtime configs (like Docker host) can also be provided. We’ll enable structured logging with `tracing` for debugging.
+The optional `CONTAINER_RUNTIME` variable selects the backend used to run MCP
+servers. `docker` is the default, but you can set it to `kubernetes` to launch
+pods in the current cluster (using your kubeconfig). When enabled, the backend
+creates a pod per server and streams logs via the Kubernetes API. If
+initialization fails the server logs a warning and falls back to Docker.
+When using the Kubernetes runtime you may set `K8S_NAMESPACE` to control which
+namespace pods are created in. It defaults to `default`.
+Set `K8S_SERVICE_ACCOUNT` to specify the service account used by the pods,
+also defaulting to `default`.
 
 Database Connection Pool: Initialize a connection pool to Postgres at startup. For SQLx, for example:
 
 use sqlx::postgres::PgPoolOptions;
 
 #[tokio::main]
 async fn main() -> Result<(), Box<dyn std::error::Error>> {
     dotenvy::dotenv().ok();  // load .env if present
     let database_url = std::env::var("DATABASE_URL")?;
     // Create a connection pool (with 5 connections here)
     let db_pool = PgPoolOptions::new()
         .max_connections(5)
         .connect(&database_url).await?;
     // ... set up Axum router next
 }
 
 This pool (db_pool) will be added to Axum’s application state so handlers can access the DB. In Axum, we can use an extractor for state or a global using Extension. For example:
 
 use axum::{Router, Extension};
 
 let app = Router::new()
     .route("/", axum::routing::get(root_handler))
     // ... (other routes)
     .layer(Extension(db_pool));  // make pool available to all handlers
 
@@ -647,80 +656,127 @@ We can also display the API Key and the endpoint URL that the user’s AI agent
   <p className="text-sm text-gray-600">Use this URL and API key in your AI assistant configuration to connect.</p>
 </div>
 
 (If we didn’t implement subdomains, this could be a placeholder or something like http://host:port we computed. But ideally, we mimic the AnyContext style with subdomain.)
 
 Usage Metrics UI: For historical metrics, we could show a chart. Using a library like Chart.js or Recharts can make attractive visuals. For instance, to integrate Chart.js we’d install react-chartjs-2 and chart.js and create a line chart of daily usage counts  . If we have data like an array of dates and counts, it’s straightforward to pass it to a <Line> component from react-chartjs-2.
 
 For real-time metrics, we can use the SSE endpoint we made. In React, the simplest is to use the browser’s EventSource API:
 
 // In server detail component
 useEffect(() => {
   const evtSource = new EventSource(`${apiUrl}/api/servers/${id}/metrics/stream`, { withCredentials: true });
   evtSource.onmessage = (event) => {
     if (event.data) {
       const obj = JSON.parse(event.data);
       setLiveMetrics(obj); // update some state with the new data
     }
   };
   evtSource.onerror = (err) => {
     console.error("SSE error:", err);
     evtSource.close();
   };
   return () => evtSource.close();
 }, [id]);
 
+The server list itself also stays current by listening to `/api/servers/stream`,
+which emits JSON `{id, status}` whenever a deployment changes state.
+
 Now liveMetrics state will update whenever the server pushes an event (for example, number of requests per minute as we coded earlier). We can display that in the UI (e.g. “Current QPS: X” or updating a chart dynamically). This gives the user immediate feedback on usage without refreshing .
 
 Responsive Design: Throughout the frontend, use Tailwind’s responsive utilities to ensure the site works on mobile and desktop. For example, on the dashboard table, we might hide less important columns on small screens or use a card layout instead of a wide table on a narrow viewport. Tailwind makes it easy: e.g., <td className="hidden sm:table-cell"> could hide a cell on mobile, showing it from sm breakpoint up. We also used classes like min-h-screen flex items-center justify-center for the login container – these ensure the page is centered vertically and horizontally, and will naturally adapt to various screen sizes. The design principle is mobile-first: start with a single-column or stacked layout, then add md: prefixes to create side-by-side components on larger screens  .
 
 For instance, we might design the dashboard as a two-column layout on desktop: a sidebar with navigation and a main content area. Using Tailwind, we could do:
 
 <div className="md:flex">
   <aside className="md:w-1/4 p-4 bg-gray-800 text-white"> ...sidebar links... </aside>
   <main className="md:w-3/4 p-6"> ...main dashboard content... </main>
 </div>
 
 On mobile, without the md: prefixes, the aside and main will stack (full width each) . On medium screens and up, aside takes 25% width and main 75%, side by side.
 
 We can also employ ready-made UI components or examples – e.g., Tailwind UI or Flowbite components – for a polished look, but manual composition with Tailwind utilities as above works fine.
 
 Best Practices and Considerations
 
 Security: We’ve applied several security best practices:
 	•	Password hashing with Argon2id (memory-hard, recommended algorithm) .
 	•	JWT in HttpOnly cookies to prevent XSS stealing, combined with Secure and SameSite=Strict to prevent CSRF and ensure tokens only go over HTTPS .
 	•	Validations and error handling to avoid undefined behavior (checking input lengths, handling DB errors).
 	•	Access control at every API (auth middleware and owner checks) – never assume the client will hide unauthorized options; always enforce on server.
 	•	SQL Injection is mitigated by using parameterized queries ($1, $2 placeholders with sqlx) or Diesel’s safe query builder, so user input isn’t directly interpolated into SQL.
 	•	CORS: If our frontend is served on a different domain than the Rust API, configure the Axum server’s CORS to allow that origin and credentials. The tower_http::cors::CorsLayer can be used to allow methods and headers and set allow_credentials(true) so that cookies work cross-site.
 	•	API Key for MCP servers: Each deployed server has an api_key and the server’s container should require this for any client communication (like AnyContext uses an x-api-key header ). This prevents others from connecting to your MCP server URL if they somehow guess it. The platform should generate secure random API keys (the UUID approach is okay, though a longer random string or using a crypto random generator is even better).
 	•	Resource Limits: As mentioned, set limits on container resources to prevent abuse. Also consider implementing quotas (e.g., a user can only create N servers, or sessions, or certain rate limits) to protect against misuse.
 	•	Logging and Monitoring: Use tracing to log important events (user logins, errors, container starts/stops) with appropriate levels. In production, aggregate logs and use monitoring for the infrastructure (Prometheus/Grafana for resource use, etc.). We can expose a health check endpoint (like GET /api/health) that just returns 200 OK – useful for load balancers or uptime monitors.
 
 Scalability: Our design is mostly stateless in the web tier (thanks to JWT and database storage). The Rust server can be replicated behind a load balancer – all instances connect to the same Postgres and same Docker daemon or cluster. Postgres itself can be scaled (read replicas, etc.) if needed, but given typical usage (mostly config data and logs), a single instance or managed DB should handle quite a lot. If one host can’t handle all MCP containers, that’s where an orchestrator (Kubernetes) would schedule containers on multiple nodes. The platform could then become more complex (the control plane might need to decide which node to launch a container on). However, initially you might simply increase the server’s VM size.
 
 To scale WebSockets or SSE (for real-time metrics), consider using a message broker or a pub-sub (like Redis pub/sub or an event bus) if you have multiple web server instances, so that all instances can broadcast events to users regardless of which instance is handling the container. Another approach is to push metrics to a central time-series DB and have the frontend poll that – simpler but less instantaneous.
 
 Maintainability: We modularized code by splitting responsibilities:
 	•	Route handlers for each resource (users, servers, sessions, metrics) can live in separate modules in Rust.
 	•	A separate module or service object for interacting with Docker (to keep that logic isolated).
 	•	On the frontend, use Next.js pages for routing but factor out components for reuse (e.g., a ServerList component, a ServerForm, a MetricChart component, etc.). This keeps the code DRY and easier to test or update.
 	•	Writing unit tests for Rust handlers (using something like axum::body::Body to simulate requests) can ensure our auth logic and DB interactions work as expected. Integration testing with a temporary database and maybe a dummy Docker client (for not actually spawning containers in tests) would be valuable.
 
 Modern UI/UX: Finally, ensure the UI is clean and intuitive. Using Tailwind, we can quickly implement modern design trends:
 	•	Dark mode support: as seen in the Tailwind classes above, e.g., dark:bg-gray-800 – Tailwind can automatically support a dark theme if we add media or class strategy in config. This could be a nice touch.
 	•	Interactive feedback: Show loading spinners when actions are in progress, confirm modal on deletions, toast notifications on success/failure. The Next.js app could use a library like react-hot-toast for notifications.
 	•	Responsive nav: Perhaps a hamburger menu on mobile to show the sidebar links.
 	•	Consistent styling: define a few reusable style classes or use Tailwind’s theming to keep colors consistent (e.g., define primary color, etc.).
 	•	Accessibility: Use proper HTML elements (forms, labels, buttons) and Tailwind’s accessibility utilities if needed (like sr-only for screen reader text).
 
 By following this guide, you can assemble a full-stack system that mimics AnyContext: a Rust backend managing user accounts and containerized context servers, and a Next.js frontend for a seamless user experience. The result is a scalable “Context-as-a-Service” platform – enabling users to spin up connectors that bridge AI and external data with ease and security.
+Automated redeploys: each server includes a `webhook_secret`. Configure your CI to POST to `/api/servers/<id>/webhook` with an `X-Webhook-Secret` header so MCP Host rebuilds automatically.
+GitHub integration: set a push webhook to `/api/servers/<id>/github` using the same header for HMAC verification.
+Custom domains: map your own domain to a server via `/api/servers/<id>/domains` and access it through that URL.
+Reverse proxy controller: a separate `proxy_controller` process watches config files, obtains TLS certificates, and reloads Nginx when domains change.
+Automatic TLS: MCP Host uses an embedded ACME client to obtain Let's Encrypt certificates for custom domains. Set `CERTBOT_EMAIL` for registration.
+Secrets management: store encrypted secrets via `/api/servers/<id>/secrets` which get injected at runtime. If `VAULT_ADDR` and `VAULT_TOKEN` are set, values are stored in HashiCorp Vault instead of the database.
+Source builds: provide a `repo_url` and MCP Host clones your code, parses the Dockerfile for `EXPOSE` instructions, and builds the image automatically.
+Language builders: if no Dockerfile is present, MCP Host detects Node, Python, or Rust projects and generates one for you.
+Registry push: set the `REGISTRY` environment variable to automatically push built images after successful builds.
+File storage: upload and download persistent blobs via `/api/servers/<id>/files`.
+Mounted storage: uploaded files are mounted into running containers at `/data`.
+File management UI: manage uploads from the Files page for each server.
+Bring your own MCP: choose the Custom option to run your own Docker image or build from a Git repository.
+Marketplace MCPs: list official connectors via `/api/marketplace` and select them during server creation for one-click deployment.
+Managed vector databases: create Chroma instances via `/api/vector-dbs` for persistent embeddings.
+Data ingestion pipelines: schedule jobs that fetch data from URLs and ingest it into your vector DBs.
+GPU servers: toggle the GPU option on server creation to run containers with Nvidia GPUs when available.
+CPU and memory limits: specify `cpu_limit` (cores) and `memory_limit` (MB) in the server config to constrain resource usage.
+Crash restarts: containers are automatically restarted if they exit unexpectedly.
+MCP workflows: chain multiple servers together and invoke them sequentially via `/api/workflows`.
+Persistent job queue ensures container tasks survive server restarts.
+Invocation tracing: all `/invoke` requests are stored with inputs and outputs for later debugging via `/api/servers/<id>/invocations`.
+Automated evaluation: create tests via `/api/servers/<id>/eval/tests` and run them with `/api/servers/<id>/eval/run`; results are listed from `/api/servers/<id>/eval/results`.
+Evaluation scoreboard: `/api/evaluations` lists recent results across all your servers. `/api/evaluations/summary` ranks servers by average score.
+Role-based access control: users have roles like `admin` or `user` with quotas limiting how many servers they may create.
+Organizations: create teams with `/api/orgs` and invite members.
+Invoke endpoint: send JSON to `/api/servers/<id>/invoke` to proxy the request to your MCP and return its response.
+Manifest handshake: MCP Host fetches `/.well-known/mcp.json` from running containers and stores the manifest for later retrieval.
+Capabilities sync: any `capabilities` listed in the manifest are stored and exposed via `/api/servers/<id>/capabilities` so agents can auto-configure.
+Client config endpoint: call `/api/servers/<id>/client-config` to retrieve an invoke URL, API key, and the stored manifest for plug-and-play clients.
+Use the helper script at `scripts/get_config.py` to fetch this configuration and save it locally for your agents.
+Run `scripts/gen_python_sdk.py` with the same server ID to generate a Python client stub based on the manifest.
+Run `scripts/gen_ts_sdk.py` with the same ID to generate a TypeScript client.
+Run `scripts/mcp_cli.py` to fetch configs or generate SDKs from one convenient CLI.
+Use `mcp-cli create my-agent --mcp-id=<SERVER_ID>` to scaffold a simple Python FastAPI agent preconfigured to call your MCP server.
+Use `mcp-cli dev <SERVER_ID>` to run a local proxy forwarding requests to your MCP while coding locally.
+You can install this helper locally with `pip install .` from the `cli` directory
+or fetch the published package via `pip install mcp-host-cli`, which provides an
+`mcp-cli` command in your environment.
+
+Continuous integration: a GitHub Actions workflow builds the backend, runs
+tests, and runs the frontend test suite on every push.
+
 
 References:
 	•	AnyContext architecture and MCP concept  
 	•	Axum and Diesel for high-performance Rust APIs  
 	•	Password hashing best practices (Argon2id) 
 	•	JWT storage security (HttpOnly cookies vs localStorage)  
 	•	Docker container management with Bollard (Rust)  
 	•	Server-Sent Events for real-time updates  
 	•	Tailwind CSS responsive design patterns  
+- `/api/me` returns user email, role, and server_quota for the new Profile page.
diff --git a/backend/Cargo.lock b/backend/Cargo.lock
new file mode 100644
index 0000000000000000000000000000000000000000..bfb7f07efb711cf2dd4082a9c173ec660857d0d0
--- /dev/null
+++ b/backend/Cargo.lock
@@ -0,0 +1,3939 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 4
+
+[[package]]
+name = "acme2"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "453e534d4f46dcdddd7aa8619e9a664e153f34383d14710db0b0d76c2964db89"
+dependencies = [
+ "base64 0.13.1",
+ "hyper 0.14.32",
+ "openssl",
+ "reqwest",
+ "serde",
+ "serde_json",
+ "thiserror 1.0.69",
+ "tokio",
+ "tracing",
+ "tracing-futures",
+]
+
+[[package]]
+name = "addr2line"
+version = "0.24.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dfbe277e56a376000877090da837660b4427aad530e3028d44e0bffe4f89a1c1"
+dependencies = [
+ "gimli",
+]
+
+[[package]]
+name = "adler2"
+version = "2.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "320119579fcad9c21884f5c4861d16174d0e06250625266f50fe6898340abefa"
+
+[[package]]
+name = "ahash"
+version = "0.7.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "891477e0c6a8957309ee5c45a6368af3ae14bb510732d2684ffa19af310920f9"
+dependencies = [
+ "getrandom 0.2.16",
+ "once_cell",
+ "version_check",
+]
+
+[[package]]
+name = "ahash"
+version = "0.8.12"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5a15f179cd60c4584b8a8c596927aadc462e27f2ca70c04e0071964a73ba7a75"
+dependencies = [
+ "cfg-if",
+ "getrandom 0.3.3",
+ "once_cell",
+ "version_check",
+ "zerocopy",
+]
+
+[[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
+name = "allocator-api2"
+version = "0.2.21"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "683d7910e743518b0e34f1186f92494becacb047c7b6bf616c96772180fef923"
+
+[[package]]
+name = "android-tzdata"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"
+
+[[package]]
+name = "android_system_properties"
+version = "0.1.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
+dependencies = [
+ "libc",
+]
+
+[[package]]
+name = "anyhow"
+version = "1.0.98"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e16d2d3311acee920a9eb8d33b8cbc1787ce4a264e85f964c2404b969bdcd487"
+
+[[package]]
+name = "argon2"
+version = "0.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "db4ce4441f99dbd377ca8a8f57b698c44d0d6e712d8329b5040da5a64aa1ce73"
+dependencies = [
+ "base64ct",
+ "blake2",
+ "password-hash",
+]
+
+[[package]]
+name = "async-trait"
+version = "0.1.88"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e539d3fca749fcee5236ab05e93a52867dd549cc157c8cb7f99595f3cedffdb5"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "atoi"
+version = "1.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d7c57d12312ff59c811c0643f4d80830505833c9ffaebd193d819392b265be8e"
+dependencies = [
+ "num-traits",
+]
+
+[[package]]
+name = "autocfg"
+version = "1.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"
+
+[[package]]
+name = "axum"
+version = "0.6.20"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3b829e4e32b91e643de6eafe82b1d90675f5874230191a4ffbc1b336dec4d6bf"
+dependencies = [
+ "async-trait",
+ "axum-core",
+ "bitflags 1.3.2",
+ "bytes",
+ "futures-util",
+ "http 0.2.12",
+ "http-body 0.4.6",
+ "hyper 0.14.32",
+ "itoa",
+ "matchit",
+ "memchr",
+ "mime",
+ "multer",
+ "percent-encoding",
+ "pin-project-lite",
+ "rustversion",
+ "serde",
+ "serde_json",
+ "serde_path_to_error",
+ "serde_urlencoded",
+ "sync_wrapper",
+ "tokio",
+ "tower",
+ "tower-layer",
+ "tower-service",
+]
+
+[[package]]
+name = "axum-core"
+version = "0.3.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "759fa577a247914fd3f7f76d62972792636412fbfd634cd452f6a385a74d2d2c"
+dependencies = [
+ "async-trait",
+ "bytes",
+ "futures-util",
+ "http 0.2.12",
+ "http-body 0.4.6",
+ "mime",
+ "rustversion",
+ "tower-layer",
+ "tower-service",
+]
+
+[[package]]
+name = "axum-prometheus"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "97def327c5481791abb57ac295bfc70f2e1a0727675b7dbf74bd1b27a72b6fd8"
+dependencies = [
+ "axum",
+ "axum-core",
+ "bytes",
+ "futures",
+ "futures-core",
+ "http 0.2.12",
+ "http-body 0.4.6",
+ "matchit",
+ "metrics",
+ "metrics-exporter-prometheus",
+ "once_cell",
+ "pin-project",
+ "tokio",
+ "tower",
+ "tower-http",
+]
+
+[[package]]
+name = "backend"
+version = "0.1.0"
+dependencies = [
+ "acme2",
+ "anyhow",
+ "argon2",
+ "async-trait",
+ "axum",
+ "axum-prometheus",
+ "bollard",
+ "bytes",
+ "chrono",
+ "dashmap",
+ "dotenvy",
+ "futures-util",
+ "git2",
+ "hex",
+ "hmac",
+ "hyper 0.14.32",
+ "jsonwebtoken",
+ "k8s-openapi",
+ "kube",
+ "nix",
+ "once_cell",
+ "rand_core",
+ "regex",
+ "reqwest",
+ "serde",
+ "serde_json",
+ "sha2",
+ "sqlx",
+ "strsim",
+ "tar",
+ "tempfile",
+ "thiserror 1.0.69",
+ "tokio",
+ "tokio-stream",
+ "tower",
+ "tracing",
+ "tracing-subscriber",
+ "uuid",
+]
+
+[[package]]
+name = "backoff"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b62ddb9cb1ec0a098ad4bbf9344d0713fa193ae1a80af55febcff2627b6a00c1"
+dependencies = [
+ "getrandom 0.2.16",
+ "instant",
+ "rand",
+]
+
+[[package]]
+name = "backtrace"
+version = "0.3.75"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6806a6321ec58106fea15becdad98371e28d92ccbc7c8f1b3b6dd724fe8f1002"
+dependencies = [
+ "addr2line",
+ "cfg-if",
+ "libc",
+ "miniz_oxide",
+ "object",
+ "rustc-demangle",
+ "windows-targets 0.52.6",
+]
+
+[[package]]
+name = "base64"
+version = "0.13.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8"
+
+[[package]]
+name = "base64"
+version = "0.21.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9d297deb1925b89f2ccc13d7635fa0714f12c87adce1c75356b39ca9b7178567"
+
+[[package]]
+name = "base64"
+version = "0.22.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6"
+
+[[package]]
+name = "base64ct"
+version = "1.8.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "55248b47b0caf0546f7988906588779981c43bb1bc9d0c44087278f80cdb44ba"
+
+[[package]]
+name = "bitflags"
+version = "1.3.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"
+
+[[package]]
+name = "bitflags"
+version = "2.9.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1b8e56985ec62d17e9c1001dc89c88ecd7dc08e47eba5ec7c29c7b5eeecde967"
+
+[[package]]
+name = "blake2"
+version = "0.10.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe"
+dependencies = [
+ "digest",
+]
+
+[[package]]
+name = "block-buffer"
+version = "0.10.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71"
+dependencies = [
+ "generic-array",
+]
+
+[[package]]
+name = "bollard"
+version = "0.19.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "899ca34eb6924d6ec2a77c6f7f5c7339e60fd68235eaf91edd5a15f12958bb06"
+dependencies = [
+ "base64 0.22.1",
+ "bollard-stubs",
+ "bytes",
+ "futures-core",
+ "futures-util",
+ "hex",
+ "http 1.3.1",
+ "http-body-util",
+ "hyper 1.6.0",
+ "hyper-named-pipe",
+ "hyper-util",
+ "hyperlocal",
+ "log",
+ "pin-project-lite",
+ "serde",
+ "serde_derive",
+ "serde_json",
+ "serde_repr",
+ "serde_urlencoded",
+ "thiserror 2.0.12",
+ "tokio",
+ "tokio-util",
+ "tower-service",
+ "url",
+ "winapi",
+]
+
+[[package]]
+name = "bollard-stubs"
+version = "1.48.3-rc.28.0.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "64ea257e555d16a2c01e5593f40b73865cdf12efbceda33c6d14a2d8d1490368"
+dependencies = [
+ "serde",
+ "serde_json",
+ "serde_repr",
+ "serde_with",
+]
+
+[[package]]
+name = "bumpalo"
+version = "3.19.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "46c5e41b57b8bba42a04676d81cb89e9ee8e859a1a66f80a5a72e1cb76b34d43"
+
+[[package]]
+name = "byteorder"
+version = "1.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"
+
+[[package]]
+name = "bytes"
+version = "1.10.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d71b6127be86fdcfddb610f7182ac57211d4b18a3e9c82eb2d17662f2227ad6a"
+
+[[package]]
+name = "cc"
+version = "1.2.27"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d487aa071b5f64da6f19a3e848e3578944b726ee5a4854b82172f02aa876bfdc"
+dependencies = [
+ "jobserver",
+ "libc",
+ "shlex",
+]
+
+[[package]]
+name = "cfg-if"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9555578bc9e57714c812a1f84e4fc5b4d21fcb063490c624de019f7464c91268"
+
+[[package]]
+name = "cfg_aliases"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724"
+
+[[package]]
+name = "chrono"
+version = "0.4.41"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c469d952047f47f91b68d1cba3f10d63c11d73e4636f24f08daf0278abf01c4d"
+dependencies = [
+ "android-tzdata",
+ "iana-time-zone",
+ "js-sys",
+ "num-traits",
+ "serde",
+ "wasm-bindgen",
+ "windows-link",
+]
+
+[[package]]
+name = "core-foundation"
+version = "0.9.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f"
+dependencies = [
+ "core-foundation-sys",
+ "libc",
+]
+
+[[package]]
+name = "core-foundation-sys"
+version = "0.8.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"
+
+[[package]]
+name = "cpufeatures"
+version = "0.2.17"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "59ed5838eebb26a2bb2e58f6d5b5316989ae9d08bab10e0e6d103e656d1b0280"
+dependencies = [
+ "libc",
+]
+
+[[package]]
+name = "crc"
+version = "3.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9710d3b3739c2e349eb44fe848ad0b7c8cb1e42bd87ee49371df2f7acaf3e675"
+dependencies = [
+ "crc-catalog",
+]
+
+[[package]]
+name = "crc-catalog"
+version = "2.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "19d374276b40fb8bbdee95aef7c7fa6b5316ec764510eb64b8dd0e2ed0d7e7f5"
+
+[[package]]
+name = "crossbeam-epoch"
+version = "0.9.18"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e"
+dependencies = [
+ "crossbeam-utils",
+]
+
+[[package]]
+name = "crossbeam-queue"
+version = "0.3.12"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0f58bbc28f91df819d0aa2a2c00cd19754769c2fad90579b3592b1c9ba7a3115"
+dependencies = [
+ "crossbeam-utils",
+]
+
+[[package]]
+name = "crossbeam-utils"
+version = "0.8.21"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"
+
+[[package]]
+name = "crypto-common"
+version = "0.1.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3"
+dependencies = [
+ "generic-array",
+ "typenum",
+]
+
+[[package]]
+name = "dashmap"
+version = "5.5.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "978747c1d849a7d2ee5e8adc0159961c48fb7e5db2f06af6723b80123bb53856"
+dependencies = [
+ "cfg-if",
+ "hashbrown 0.14.5",
+ "lock_api",
+ "once_cell",
+ "parking_lot_core 0.9.11",
+]
+
+[[package]]
+name = "deranged"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9c9e6a11ca8224451684bc0d7d5a7adbf8f2fd6887261a1cfc3c0432f9d4068e"
+dependencies = [
+ "powerfmt",
+ "serde",
+]
+
+[[package]]
+name = "derivative"
+version = "2.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 1.0.109",
+]
+
+[[package]]
+name = "digest"
+version = "0.10.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292"
+dependencies = [
+ "block-buffer",
+ "crypto-common",
+ "subtle",
+]
+
+[[package]]
+name = "dirs"
+version = "4.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ca3aa72a6f96ea37bbc5aa912f6788242832f75369bdfdadcb0e38423f100059"
+dependencies = [
+ "dirs-sys",
+]
+
+[[package]]
+name = "dirs-sys"
+version = "0.3.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6"
+dependencies = [
+ "libc",
+ "redox_users",
+ "winapi",
+]
+
+[[package]]
+name = "displaydoc"
+version = "0.2.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "dotenvy"
+version = "0.15.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1aaf95b3e5c8f23aa320147307562d361db0ae0d51242340f558153b4eb2439b"
+
+[[package]]
+name = "dyn-clone"
+version = "1.0.19"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1c7a8fb8a9fbf66c1f703fe16184d10ca0ee9d23be5b4436400408ba54a95005"
+
+[[package]]
+name = "either"
+version = "1.15.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "48c757948c5ede0e46177b7add2e67155f70e33c07fea8284df6576da70b3719"
+
+[[package]]
+name = "encoding_rs"
+version = "0.8.35"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "75030f3c4f45dafd7586dd6780965a8c7e8e285a5ecb86713e63a79c5b2766f3"
+dependencies = [
+ "cfg-if",
+]
+
+[[package]]
+name = "equivalent"
+version = "1.0.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f"
+
+[[package]]
+name = "errno"
+version = "0.3.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "778e2ac28f6c47af28e4907f13ffd1e1ddbd400980a9abd7c8df189bf578a5ad"
+dependencies = [
+ "libc",
+ "windows-sys 0.60.2",
+]
+
+[[package]]
+name = "event-listener"
+version = "2.5.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0206175f82b8d6bf6652ff7d71a1e27fd2e4efde587fd368662814d6ec1d9ce0"
+
+[[package]]
+name = "fastrand"
+version = "2.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be"
+
+[[package]]
+name = "filetime"
+version = "0.2.25"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "35c0522e981e68cbfa8c3f978441a5f34b30b96e146b33cd3359176b50fe8586"
+dependencies = [
+ "cfg-if",
+ "libc",
+ "libredox",
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "fnv"
+version = "1.0.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"
+
+[[package]]
+name = "foreign-types"
+version = "0.3.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1"
+dependencies = [
+ "foreign-types-shared",
+]
+
+[[package]]
+name = "foreign-types-shared"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"
+
+[[package]]
+name = "form_urlencoded"
+version = "1.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456"
+dependencies = [
+ "percent-encoding",
+]
+
+[[package]]
+name = "futures"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "65bc07b1a8bc7c85c5f2e110c476c7389b4554ba72af57d8445ea63a576b0876"
+dependencies = [
+ "futures-channel",
+ "futures-core",
+ "futures-executor",
+ "futures-io",
+ "futures-sink",
+ "futures-task",
+ "futures-util",
+]
+
+[[package]]
+name = "futures-channel"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2dff15bf788c671c1934e366d07e30c1814a8ef514e1af724a602e8a2fbe1b10"
+dependencies = [
+ "futures-core",
+ "futures-sink",
+]
+
+[[package]]
+name = "futures-core"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "05f29059c0c2090612e8d742178b0580d2dc940c837851ad723096f87af6663e"
+
+[[package]]
+name = "futures-executor"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1e28d1d997f585e54aebc3f97d39e72338912123a67330d723fdbb564d646c9f"
+dependencies = [
+ "futures-core",
+ "futures-task",
+ "futures-util",
+]
+
+[[package]]
+name = "futures-intrusive"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a604f7a68fbf8103337523b1fadc8ade7361ee3f112f7c680ad179651616aed5"
+dependencies = [
+ "futures-core",
+ "lock_api",
+ "parking_lot 0.11.2",
+]
+
+[[package]]
+name = "futures-io"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9e5c1b78ca4aae1ac06c48a526a655760685149f0d465d21f37abfe57ce075c6"
+
+[[package]]
+name = "futures-macro"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "162ee34ebcb7c64a8abebc059ce0fee27c2262618d7b60ed8faf72fef13c3650"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "futures-sink"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e575fab7d1e0dcb8d0c7bcf9a63ee213816ab51902e6d244a95819acacf1d4f7"
+
+[[package]]
+name = "futures-task"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f90f7dce0722e95104fcb095585910c0977252f286e354b5e3bd38902cd99988"
+
+[[package]]
+name = "futures-util"
+version = "0.3.31"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9fa08315bb612088cc391249efdc3bc77536f16c91f6cf495e6fbe85b20a4a81"
+dependencies = [
+ "futures-channel",
+ "futures-core",
+ "futures-io",
+ "futures-macro",
+ "futures-sink",
+ "futures-task",
+ "memchr",
+ "pin-project-lite",
+ "pin-utils",
+ "slab",
+]
+
+[[package]]
+name = "generic-array"
+version = "0.14.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a"
+dependencies = [
+ "typenum",
+ "version_check",
+]
+
+[[package]]
+name = "getrandom"
+version = "0.2.16"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "335ff9f135e4384c8150d6f27c6daed433577f86b4750418338c01a1a2528592"
+dependencies = [
+ "cfg-if",
+ "libc",
+ "wasi 0.11.1+wasi-snapshot-preview1",
+]
+
+[[package]]
+name = "getrandom"
+version = "0.3.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "26145e563e54f2cadc477553f1ec5ee650b00862f0a58bcd12cbdc5f0ea2d2f4"
+dependencies = [
+ "cfg-if",
+ "libc",
+ "r-efi",
+ "wasi 0.14.2+wasi-0.2.4",
+]
+
+[[package]]
+name = "gimli"
+version = "0.31.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "07e28edb80900c19c28f1072f2e8aeca7fa06b23cd4169cefe1af5aa3260783f"
+
+[[package]]
+name = "git2"
+version = "0.18.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "232e6a7bfe35766bf715e55a88b39a700596c0ccfd88cd3680b4cdb40d66ef70"
+dependencies = [
+ "bitflags 2.9.1",
+ "libc",
+ "libgit2-sys",
+ "log",
+ "openssl-probe",
+ "openssl-sys",
+ "url",
+]
+
+[[package]]
+name = "h2"
+version = "0.3.26"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "81fe527a889e1532da5c525686d96d4c2e74cdd345badf8dfef9f6b39dd5f5e8"
+dependencies = [
+ "bytes",
+ "fnv",
+ "futures-core",
+ "futures-sink",
+ "futures-util",
+ "http 0.2.12",
+ "indexmap 2.10.0",
+ "slab",
+ "tokio",
+ "tokio-util",
+ "tracing",
+]
+
+[[package]]
+name = "hashbrown"
+version = "0.12.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888"
+
+[[package]]
+name = "hashbrown"
+version = "0.13.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "33ff8ae62cd3a9102e5637afc8452c55acf3844001bd5374e0b0bd7b6616c038"
+dependencies = [
+ "ahash 0.8.12",
+]
+
+[[package]]
+name = "hashbrown"
+version = "0.14.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1"
+dependencies = [
+ "ahash 0.8.12",
+ "allocator-api2",
+]
+
+[[package]]
+name = "hashbrown"
+version = "0.15.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5971ac85611da7067dbfcabef3c70ebb5606018acd9e2a3903a0da507521e0d5"
+
+[[package]]
+name = "hashlink"
+version = "0.8.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e8094feaf31ff591f651a2664fb9cfd92bba7a60ce3197265e9482ebe753c8f7"
+dependencies = [
+ "hashbrown 0.14.5",
+]
+
+[[package]]
+name = "heck"
+version = "0.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8"
+dependencies = [
+ "unicode-segmentation",
+]
+
+[[package]]
+name = "hermit-abi"
+version = "0.5.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fc0fef456e4baa96da950455cd02c081ca953b141298e41db3fc7e36b1da849c"
+
+[[package]]
+name = "hex"
+version = "0.4.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70"
+
+[[package]]
+name = "hkdf"
+version = "0.12.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7b5f8eb2ad728638ea2c7d47a21db23b7b58a72ed6a38256b8a1849f15fbbdf7"
+dependencies = [
+ "hmac",
+]
+
+[[package]]
+name = "hmac"
+version = "0.12.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e"
+dependencies = [
+ "digest",
+]
+
+[[package]]
+name = "home"
+version = "0.5.11"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "589533453244b0995c858700322199b2becb13b627df2851f64a2775d024abcf"
+dependencies = [
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "http"
+version = "0.2.12"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "601cbb57e577e2f5ef5be8e7b83f0f63994f25aa94d673e54a92d5c516d101f1"
+dependencies = [
+ "bytes",
+ "fnv",
+ "itoa",
+]
+
+[[package]]
+name = "http"
+version = "1.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f4a85d31aea989eead29a3aaf9e1115a180df8282431156e533de47660892565"
+dependencies = [
+ "bytes",
+ "fnv",
+ "itoa",
+]
+
+[[package]]
+name = "http-body"
+version = "0.4.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7ceab25649e9960c0311ea418d17bee82c0dcec1bd053b5f9a66e265a693bed2"
+dependencies = [
+ "bytes",
+ "http 0.2.12",
+ "pin-project-lite",
+]
+
+[[package]]
+name = "http-body"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1efedce1fb8e6913f23e0c92de8e62cd5b772a67e7b3946df930a62566c93184"
+dependencies = [
+ "bytes",
+ "http 1.3.1",
+]
+
+[[package]]
+name = "http-body-util"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b021d93e26becf5dc7e1b75b1bed1fd93124b374ceb73f43d4d4eafec896a64a"
+dependencies = [
+ "bytes",
+ "futures-core",
+ "http 1.3.1",
+ "http-body 1.0.1",
+ "pin-project-lite",
+]
+
+[[package]]
+name = "http-range-header"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "add0ab9360ddbd88cfeb3bd9574a1d85cfdfa14db10b3e21d3700dbc4328758f"
+
+[[package]]
+name = "httparse"
+version = "1.10.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6dbf3de79e51f3d586ab4cb9d5c3e2c14aa28ed23d180cf89b4df0454a69cc87"
+
+[[package]]
+name = "httpdate"
+version = "1.0.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "df3b46402a9d5adb4c86a0cf463f42e19994e3ee891101b1841f30a545cb49a9"
+
+[[package]]
+name = "hyper"
+version = "0.14.32"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "41dfc780fdec9373c01bae43289ea34c972e40ee3c9f6b3c8801a35f35586ce7"
+dependencies = [
+ "bytes",
+ "futures-channel",
+ "futures-core",
+ "futures-util",
+ "h2",
+ "http 0.2.12",
+ "http-body 0.4.6",
+ "httparse",
+ "httpdate",
+ "itoa",
+ "pin-project-lite",
+ "socket2",
+ "tokio",
+ "tower-service",
+ "tracing",
+ "want",
+]
+
+[[package]]
+name = "hyper"
+version = "1.6.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cc2b571658e38e0c01b1fdca3bbbe93c00d3d71693ff2770043f8c29bc7d6f80"
+dependencies = [
+ "bytes",
+ "futures-channel",
+ "futures-util",
+ "http 1.3.1",
+ "http-body 1.0.1",
+ "httparse",
+ "httpdate",
+ "itoa",
+ "pin-project-lite",
+ "smallvec",
+ "tokio",
+ "want",
+]
+
+[[package]]
+name = "hyper-named-pipe"
+version = "0.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "73b7d8abf35697b81a825e386fc151e0d503e8cb5fcb93cc8669c376dfd6f278"
+dependencies = [
+ "hex",
+ "hyper 1.6.0",
+ "hyper-util",
+ "pin-project-lite",
+ "tokio",
+ "tower-service",
+ "winapi",
+]
+
+[[package]]
+name = "hyper-rustls"
+version = "0.24.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ec3efd23720e2049821a693cbc7e65ea87c72f1c58ff2f9522ff332b1491e590"
+dependencies = [
+ "futures-util",
+ "http 0.2.12",
+ "hyper 0.14.32",
+ "log",
+ "rustls",
+ "rustls-native-certs",
+ "tokio",
+ "tokio-rustls",
+]
+
+[[package]]
+name = "hyper-timeout"
+version = "0.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bbb958482e8c7be4bc3cf272a766a2b0bf1a6755e7a6ae777f017a31d11b13b1"
+dependencies = [
+ "hyper 0.14.32",
+ "pin-project-lite",
+ "tokio",
+ "tokio-io-timeout",
+]
+
+[[package]]
+name = "hyper-tls"
+version = "0.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d6183ddfa99b85da61a140bea0efc93fdf56ceaa041b37d553518030827f9905"
+dependencies = [
+ "bytes",
+ "hyper 0.14.32",
+ "native-tls",
+ "tokio",
+ "tokio-native-tls",
+]
+
+[[package]]
+name = "hyper-util"
+version = "0.1.14"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dc2fdfdbff08affe55bb779f33b053aa1fe5dd5b54c257343c17edfa55711bdb"
+dependencies = [
+ "bytes",
+ "futures-channel",
+ "futures-core",
+ "futures-util",
+ "http 1.3.1",
+ "http-body 1.0.1",
+ "hyper 1.6.0",
+ "libc",
+ "pin-project-lite",
+ "socket2",
+ "tokio",
+ "tower-service",
+ "tracing",
+]
+
+[[package]]
+name = "hyperlocal"
+version = "0.9.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "986c5ce3b994526b3cd75578e62554abd09f0899d6206de48b3e96ab34ccc8c7"
+dependencies = [
+ "hex",
+ "http-body-util",
+ "hyper 1.6.0",
+ "hyper-util",
+ "pin-project-lite",
+ "tokio",
+ "tower-service",
+]
+
+[[package]]
+name = "iana-time-zone"
+version = "0.1.63"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8"
+dependencies = [
+ "android_system_properties",
+ "core-foundation-sys",
+ "iana-time-zone-haiku",
+ "js-sys",
+ "log",
+ "wasm-bindgen",
+ "windows-core",
+]
+
+[[package]]
+name = "iana-time-zone-haiku"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
+dependencies = [
+ "cc",
+]
+
+[[package]]
+name = "icu_collections"
+version = "2.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "200072f5d0e3614556f94a9930d5dc3e0662a652823904c3a75dc3b0af7fee47"
+dependencies = [
+ "displaydoc",
+ "potential_utf",
+ "yoke",
+ "zerofrom",
+ "zerovec",
+]
+
+[[package]]
+name = "icu_locale_core"
+version = "2.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0cde2700ccaed3872079a65fb1a78f6c0a36c91570f28755dda67bc8f7d9f00a"
+dependencies = [
+ "displaydoc",
+ "litemap",
+ "tinystr",
+ "writeable",
+ "zerovec",
+]
+
+[[package]]
+name = "icu_normalizer"
+version = "2.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "436880e8e18df4d7bbc06d58432329d6458cc84531f7ac5f024e93deadb37979"
+dependencies = [
+ "displaydoc",
+ "icu_collections",
+ "icu_normalizer_data",
+ "icu_properties",
+ "icu_provider",
+ "smallvec",
+ "zerovec",
+]
+
+[[package]]
+name = "icu_normalizer_data"
+version = "2.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "00210d6893afc98edb752b664b8890f0ef174c8adbb8d0be9710fa66fbbf72d3"
+
+[[package]]
+name = "icu_properties"
+version = "2.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "016c619c1eeb94efb86809b015c58f479963de65bdb6253345c1a1276f22e32b"
+dependencies = [
+ "displaydoc",
+ "icu_collections",
+ "icu_locale_core",
+ "icu_properties_data",
+ "icu_provider",
+ "potential_utf",
+ "zerotrie",
+ "zerovec",
+]
+
+[[package]]
+name = "icu_properties_data"
+version = "2.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "298459143998310acd25ffe6810ed544932242d3f07083eee1084d83a71bd632"
+
+[[package]]
+name = "icu_provider"
+version = "2.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "03c80da27b5f4187909049ee2d72f276f0d9f99a42c306bd0131ecfe04d8e5af"
+dependencies = [
+ "displaydoc",
+ "icu_locale_core",
+ "stable_deref_trait",
+ "tinystr",
+ "writeable",
+ "yoke",
+ "zerofrom",
+ "zerotrie",
+ "zerovec",
+]
+
+[[package]]
+name = "idna"
+version = "1.0.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "686f825264d630750a544639377bae737628043f20d38bbc029e8f29ea968a7e"
+dependencies = [
+ "idna_adapter",
+ "smallvec",
+ "utf8_iter",
+]
+
+[[package]]
+name = "idna_adapter"
+version = "1.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3acae9609540aa318d1bc588455225fb2085b9ed0c4f6bd0d9d5bcd86f1a0344"
+dependencies = [
+ "icu_normalizer",
+ "icu_properties",
+]
+
+[[package]]
+name = "indexmap"
+version = "1.9.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99"
+dependencies = [
+ "autocfg",
+ "hashbrown 0.12.3",
+ "serde",
+]
+
+[[package]]
+name = "indexmap"
+version = "2.10.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fe4cd85333e22411419a0bcae1297d25e58c9443848b11dc6a86fefe8c78a661"
+dependencies = [
+ "equivalent",
+ "hashbrown 0.15.4",
+ "serde",
+]
+
+[[package]]
+name = "instant"
+version = "0.1.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e0242819d153cba4b4b05a5a8f2a7e9bbf97b6055b2a002b395c96b5ff3c0222"
+dependencies = [
+ "cfg-if",
+]
+
+[[package]]
+name = "io-uring"
+version = "0.7.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b86e202f00093dcba4275d4636b93ef9dd75d025ae560d2521b45ea28ab49013"
+dependencies = [
+ "bitflags 2.9.1",
+ "cfg-if",
+ "libc",
+]
+
+[[package]]
+name = "ipnet"
+version = "2.11.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "469fb0b9cefa57e3ef31275ee7cacb78f2fdca44e4765491884a2b119d4eb130"
+
+[[package]]
+name = "itoa"
+version = "1.0.15"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"
+
+[[package]]
+name = "jobserver"
+version = "0.1.33"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "38f262f097c174adebe41eb73d66ae9c06b2844fb0da69969647bbddd9b0538a"
+dependencies = [
+ "getrandom 0.3.3",
+ "libc",
+]
+
+[[package]]
+name = "js-sys"
+version = "0.3.77"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
+dependencies = [
+ "once_cell",
+ "wasm-bindgen",
+]
+
+[[package]]
+name = "json-patch"
+version = "1.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ec9ad60d674508f3ca8f380a928cfe7b096bc729c4e2dbfe3852bc45da3ab30b"
+dependencies = [
+ "serde",
+ "serde_json",
+ "thiserror 1.0.69",
+]
+
+[[package]]
+name = "jsonpath-rust"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "96acbc6188d3bd83519d053efec756aa4419de62ec47be7f28dec297f7dc9eb0"
+dependencies = [
+ "pest",
+ "pest_derive",
+ "regex",
+ "serde_json",
+ "thiserror 1.0.69",
+]
+
+[[package]]
+name = "jsonwebtoken"
+version = "8.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6971da4d9c3aa03c3d8f3ff0f4155b534aad021292003895a469716b2a230378"
+dependencies = [
+ "base64 0.21.7",
+ "pem 1.1.1",
+ "ring 0.16.20",
+ "serde",
+ "serde_json",
+ "simple_asn1",
+]
+
+[[package]]
+name = "k8s-openapi"
+version = "0.21.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "550f99d93aa4c2b25de527bce492d772caf5e21d7ac9bd4b508ba781c8d91e30"
+dependencies = [
+ "base64 0.21.7",
+ "chrono",
+ "serde",
+ "serde-value",
+ "serde_json",
+]
+
+[[package]]
+name = "kube"
+version = "0.88.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "462fe330a0617b276ec864c2255810adcdf519ecb6844253c54074b2086a97bc"
+dependencies = [
+ "k8s-openapi",
+ "kube-client",
+ "kube-core",
+ "kube-runtime",
+]
+
+[[package]]
+name = "kube-client"
+version = "0.88.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7fe0d65dd6f3adba29cfb84f19dfe55449c7f6c35425f9d8294bec40313e0b64"
+dependencies = [
+ "base64 0.21.7",
+ "bytes",
+ "chrono",
+ "either",
+ "futures",
+ "home",
+ "http 0.2.12",
+ "http-body 0.4.6",
+ "hyper 0.14.32",
+ "hyper-rustls",
+ "hyper-timeout",
+ "jsonpath-rust",
+ "k8s-openapi",
+ "kube-core",
+ "pem 3.0.5",
+ "pin-project",
+ "rustls",
+ "rustls-pemfile",
+ "secrecy",
+ "serde",
+ "serde_json",
+ "serde_yaml",
+ "thiserror 1.0.69",
+ "tokio",
+ "tokio-util",
+ "tower",
+ "tower-http",
+ "tracing",
+]
+
+[[package]]
+name = "kube-core"
+version = "0.88.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a6b42844e9172f631b8263ea9ce003b9251da13beb1401580937ad206dd82f4c"
+dependencies = [
+ "chrono",
+ "form_urlencoded",
+ "http 0.2.12",
+ "json-patch",
+ "k8s-openapi",
+ "once_cell",
+ "serde",
+ "serde_json",
+ "thiserror 1.0.69",
+]
+
+[[package]]
+name = "kube-runtime"
+version = "0.88.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2bc06275064c81056fbb28ea876b3fb339d970e8132282119359afca0835c0ea"
+dependencies = [
+ "ahash 0.8.12",
+ "async-trait",
+ "backoff",
+ "derivative",
+ "futures",
+ "hashbrown 0.14.5",
+ "json-patch",
+ "k8s-openapi",
+ "kube-client",
+ "parking_lot 0.12.4",
+ "pin-project",
+ "serde",
+ "serde_json",
+ "smallvec",
+ "thiserror 1.0.69",
+ "tokio",
+ "tokio-util",
+ "tracing",
+]
+
+[[package]]
+name = "lazy_static"
+version = "1.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"
+
+[[package]]
+name = "libc"
+version = "0.2.174"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1171693293099992e19cddea4e8b849964e9846f4acee11b3948bcc337be8776"
+
+[[package]]
+name = "libgit2-sys"
+version = "0.16.2+1.7.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ee4126d8b4ee5c9d9ea891dd875cfdc1e9d0950437179104b183d7d8a74d24e8"
+dependencies = [
+ "cc",
+ "libc",
+ "libssh2-sys",
+ "libz-sys",
+ "openssl-sys",
+ "pkg-config",
+]
+
+[[package]]
+name = "libredox"
+version = "0.1.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1580801010e535496706ba011c15f8532df6b42297d2e471fec38ceadd8c0638"
+dependencies = [
+ "bitflags 2.9.1",
+ "libc",
+ "redox_syscall 0.5.13",
+]
+
+[[package]]
+name = "libssh2-sys"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "220e4f05ad4a218192533b300327f5150e809b54c4ec83b5a1d91833601811b9"
+dependencies = [
+ "cc",
+ "libc",
+ "libz-sys",
+ "openssl-sys",
+ "pkg-config",
+ "vcpkg",
+]
+
+[[package]]
+name = "libz-sys"
+version = "1.1.22"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8b70e7a7df205e92a1a4cd9aaae7898dac0aa555503cc0a649494d0d60e7651d"
+dependencies = [
+ "cc",
+ "libc",
+ "pkg-config",
+ "vcpkg",
+]
+
+[[package]]
+name = "linux-raw-sys"
+version = "0.9.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cd945864f07fe9f5371a27ad7b52a172b4b499999f1d97574c9fa68373937e12"
+
+[[package]]
+name = "litemap"
+version = "0.8.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "241eaef5fd12c88705a01fc1066c48c4b36e0dd4377dcdc7ec3942cea7a69956"
+
+[[package]]
+name = "lock_api"
+version = "0.4.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "96936507f153605bddfcda068dd804796c84324ed2510809e5b2a624c81da765"
+dependencies = [
+ "autocfg",
+ "scopeguard",
+]
+
+[[package]]
+name = "log"
+version = "0.4.27"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94"
+
+[[package]]
+name = "mach2"
+version = "0.4.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d640282b302c0bb0a2a8e0233ead9035e3bed871f0b7e81fe4a1ec829765db44"
+dependencies = [
+ "libc",
+]
+
+[[package]]
+name = "matchers"
+version = "0.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558"
+dependencies = [
+ "regex-automata 0.1.10",
+]
+
+[[package]]
+name = "matchit"
+version = "0.7.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0e7465ac9959cc2b1404e8e2367b43684a6d13790fe23056cc8c6c5a6b7bcb94"
+
+[[package]]
+name = "md-5"
+version = "0.10.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d89e7ee0cfbedfc4da3340218492196241d89eefb6dab27de5df917a6d2e78cf"
+dependencies = [
+ "cfg-if",
+ "digest",
+]
+
+[[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
+name = "metrics"
+version = "0.21.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fde3af1a009ed76a778cb84fdef9e7dbbdf5775ae3e4cc1f434a6a307f6f76c5"
+dependencies = [
+ "ahash 0.8.12",
+ "metrics-macros",
+ "portable-atomic",
+]
+
+[[package]]
+name = "metrics-exporter-prometheus"
+version = "0.12.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1d4fa7ce7c4862db464a37b0b31d89bca874562f034bd7993895572783d02950"
+dependencies = [
+ "base64 0.21.7",
+ "hyper 0.14.32",
+ "indexmap 1.9.3",
+ "ipnet",
+ "metrics",
+ "metrics-util",
+ "quanta",
+ "thiserror 1.0.69",
+ "tokio",
+ "tracing",
+]
+
+[[package]]
+name = "metrics-macros"
+version = "0.7.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "38b4faf00617defe497754acde3024865bc143d44a86799b24e191ecff91354f"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "metrics-util"
+version = "0.15.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4de2ed6e491ed114b40b732e4d1659a9d53992ebd87490c44a6ffe23739d973e"
+dependencies = [
+ "crossbeam-epoch",
+ "crossbeam-utils",
+ "hashbrown 0.13.1",
+ "metrics",
+ "num_cpus",
+ "quanta",
+ "sketches-ddsketch",
+]
+
+[[package]]
+name = "mime"
+version = "0.3.17"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a"
+
+[[package]]
+name = "minimal-lexical"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"
+
+[[package]]
+name = "miniz_oxide"
+version = "0.8.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1fa76a2c86f704bdb222d66965fb3d63269ce38518b83cb0575fca855ebb6316"
+dependencies = [
+ "adler2",
+]
+
+[[package]]
+name = "mio"
+version = "1.0.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "78bed444cc8a2160f01cbcf811ef18cac863ad68ae8ca62092e8db51d51c761c"
+dependencies = [
+ "libc",
+ "wasi 0.11.1+wasi-snapshot-preview1",
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "multer"
+version = "2.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "01acbdc23469fd8fe07ab135923371d5f5a422fbf9c522158677c8eb15bc51c2"
+dependencies = [
+ "bytes",
+ "encoding_rs",
+ "futures-util",
+ "http 0.2.12",
+ "httparse",
+ "log",
+ "memchr",
+ "mime",
+ "spin 0.9.8",
+ "version_check",
+]
+
+[[package]]
+name = "native-tls"
+version = "0.2.14"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "87de3442987e9dbec73158d5c715e7ad9072fda936bb03d19d7fa10e00520f0e"
+dependencies = [
+ "libc",
+ "log",
+ "openssl",
+ "openssl-probe",
+ "openssl-sys",
+ "schannel",
+ "security-framework",
+ "security-framework-sys",
+ "tempfile",
+]
+
+[[package]]
+name = "nix"
+version = "0.30.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "74523f3a35e05aba87a1d978330aef40f67b0304ac79c1c00b294c9830543db6"
+dependencies = [
+ "bitflags 2.9.1",
+ "cfg-if",
+ "cfg_aliases",
+ "libc",
+]
+
+[[package]]
+name = "nom"
+version = "7.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a"
+dependencies = [
+ "memchr",
+ "minimal-lexical",
+]
+
+[[package]]
+name = "nu-ansi-term"
+version = "0.46.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84"
+dependencies = [
+ "overload",
+ "winapi",
+]
+
+[[package]]
+name = "num-bigint"
+version = "0.4.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a5e44f723f1133c9deac646763579fdb3ac745e418f2a7af9cd0c431da1f20b9"
+dependencies = [
+ "num-integer",
+ "num-traits",
+]
+
+[[package]]
+name = "num-conv"
+version = "0.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9"
+
+[[package]]
+name = "num-integer"
+version = "0.1.46"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f"
+dependencies = [
+ "num-traits",
+]
+
+[[package]]
+name = "num-traits"
+version = "0.2.19"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
+dependencies = [
+ "autocfg",
+]
+
+[[package]]
+name = "num_cpus"
+version = "1.17.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "91df4bbde75afed763b708b7eee1e8e7651e02d97f6d5dd763e89367e957b23b"
+dependencies = [
+ "hermit-abi",
+ "libc",
+]
+
+[[package]]
+name = "object"
+version = "0.36.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "62948e14d923ea95ea2c7c86c71013138b66525b86bdc08d2dcc262bdb497b87"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
+name = "once_cell"
+version = "1.21.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d"
+
+[[package]]
+name = "openssl"
+version = "0.10.73"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8505734d46c8ab1e19a1dce3aef597ad87dcb4c37e7188231769bd6bd51cebf8"
+dependencies = [
+ "bitflags 2.9.1",
+ "cfg-if",
+ "foreign-types",
+ "libc",
+ "once_cell",
+ "openssl-macros",
+ "openssl-sys",
+]
+
+[[package]]
+name = "openssl-macros"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "openssl-probe"
+version = "0.1.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d05e27ee213611ffe7d6348b942e8f942b37114c00cc03cec254295a4a17852e"
+
+[[package]]
+name = "openssl-sys"
+version = "0.9.109"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "90096e2e47630d78b7d1c20952dc621f957103f8bc2c8359ec81290d75238571"
+dependencies = [
+ "cc",
+ "libc",
+ "pkg-config",
+ "vcpkg",
+]
+
+[[package]]
+name = "ordered-float"
+version = "2.10.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "68f19d67e5a2795c94e73e0bb1cc1a7edeb2e28efd39e2e1c9b7a40c1108b11c"
+dependencies = [
+ "num-traits",
+]
+
+[[package]]
+name = "overload"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39"
+
+[[package]]
+name = "parking_lot"
+version = "0.11.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99"
+dependencies = [
+ "instant",
+ "lock_api",
+ "parking_lot_core 0.8.6",
+]
+
+[[package]]
+name = "parking_lot"
+version = "0.12.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "70d58bf43669b5795d1576d0641cfb6fbb2057bf629506267a92807158584a13"
+dependencies = [
+ "lock_api",
+ "parking_lot_core 0.9.11",
+]
+
+[[package]]
+name = "parking_lot_core"
+version = "0.8.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "60a2cfe6f0ad2bfc16aefa463b497d5c7a5ecd44a23efa72aa342d90177356dc"
+dependencies = [
+ "cfg-if",
+ "instant",
+ "libc",
+ "redox_syscall 0.2.16",
+ "smallvec",
+ "winapi",
+]
+
+[[package]]
+name = "parking_lot_core"
+version = "0.9.11"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bc838d2a56b5b1a6c25f55575dfc605fabb63bb2365f6c2353ef9159aa69e4a5"
+dependencies = [
+ "cfg-if",
+ "libc",
+ "redox_syscall 0.5.13",
+ "smallvec",
+ "windows-targets 0.52.6",
+]
+
+[[package]]
+name = "password-hash"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7676374caaee8a325c9e7a2ae557f216c5563a171d6997b0ef8a65af35147700"
+dependencies = [
+ "base64ct",
+ "rand_core",
+ "subtle",
+]
+
+[[package]]
+name = "paste"
+version = "1.0.15"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a"
+
+[[package]]
+name = "pem"
+version = "1.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a8835c273a76a90455d7344889b0964598e3316e2a79ede8e36f16bdcf2228b8"
+dependencies = [
+ "base64 0.13.1",
+]
+
+[[package]]
+name = "pem"
+version = "3.0.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "38af38e8470ac9dee3ce1bae1af9c1671fffc44ddfd8bd1d0a3445bf349a8ef3"
+dependencies = [
+ "base64 0.22.1",
+ "serde",
+]
+
+[[package]]
+name = "percent-encoding"
+version = "2.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e"
+
+[[package]]
+name = "pest"
+version = "2.8.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1db05f56d34358a8b1066f67cbb203ee3e7ed2ba674a6263a1d5ec6db2204323"
+dependencies = [
+ "memchr",
+ "thiserror 2.0.12",
+ "ucd-trie",
+]
+
+[[package]]
+name = "pest_derive"
+version = "2.8.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bb056d9e8ea77922845ec74a1c4e8fb17e7c218cc4fc11a15c5d25e189aa40bc"
+dependencies = [
+ "pest",
+ "pest_generator",
+]
+
+[[package]]
+name = "pest_generator"
+version = "2.8.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "87e404e638f781eb3202dc82db6760c8ae8a1eeef7fb3fa8264b2ef280504966"
+dependencies = [
+ "pest",
+ "pest_meta",
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "pest_meta"
+version = "2.8.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "edd1101f170f5903fde0914f899bb503d9ff5271d7ba76bbb70bea63690cc0d5"
+dependencies = [
+ "pest",
+ "sha2",
+]
+
+[[package]]
+name = "pin-project"
+version = "1.1.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "677f1add503faace112b9f1373e43e9e054bfdd22ff1a63c1bc485eaec6a6a8a"
+dependencies = [
+ "pin-project-internal",
+]
+
+[[package]]
+name = "pin-project-internal"
+version = "1.1.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6e918e4ff8c4549eb882f14b3a4bc8c8bc93de829416eacf579f1207a8fbf861"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "pin-project-lite"
+version = "0.2.16"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"
+
+[[package]]
+name = "pin-utils"
+version = "0.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184"
+
+[[package]]
+name = "pkg-config"
+version = "0.3.32"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7edddbd0b52d732b21ad9a5fab5c704c14cd949e5e9a1ec5929a24fded1b904c"
+
+[[package]]
+name = "portable-atomic"
+version = "1.11.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f84267b20a16ea918e43c6a88433c2d54fa145c92a811b5b047ccbe153674483"
+
+[[package]]
+name = "potential_utf"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e5a7c30837279ca13e7c867e9e40053bc68740f988cb07f7ca6df43cc734b585"
+dependencies = [
+ "zerovec",
+]
+
+[[package]]
+name = "powerfmt"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391"
+
+[[package]]
+name = "ppv-lite86"
+version = "0.2.21"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "85eae3c4ed2f50dcfe72643da4befc30deadb458a9b590d720cde2f2b1e97da9"
+dependencies = [
+ "zerocopy",
+]
+
+[[package]]
+name = "proc-macro2"
+version = "1.0.95"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "02b3e5e68a3a1a02aad3ec490a98007cbc13c37cbe84a3cd7b8e406d76e7f778"
+dependencies = [
+ "unicode-ident",
+]
+
+[[package]]
+name = "quanta"
+version = "0.11.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a17e662a7a8291a865152364c20c7abc5e60486ab2001e8ec10b24862de0b9ab"
+dependencies = [
+ "crossbeam-utils",
+ "libc",
+ "mach2",
+ "once_cell",
+ "raw-cpuid",
+ "wasi 0.11.1+wasi-snapshot-preview1",
+ "web-sys",
+ "winapi",
+]
+
+[[package]]
+name = "quote"
+version = "1.0.40"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
+dependencies = [
+ "proc-macro2",
+]
+
+[[package]]
+name = "r-efi"
+version = "5.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "69cdb34c158ceb288df11e18b4bd39de994f6657d83847bdffdbd7f346754b0f"
+
+[[package]]
+name = "rand"
+version = "0.8.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404"
+dependencies = [
+ "libc",
+ "rand_chacha",
+ "rand_core",
+]
+
+[[package]]
+name = "rand_chacha"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"
+dependencies = [
+ "ppv-lite86",
+ "rand_core",
+]
+
+[[package]]
+name = "rand_core"
+version = "0.6.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c"
+dependencies = [
+ "getrandom 0.2.16",
+]
+
+[[package]]
+name = "raw-cpuid"
+version = "10.7.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6c297679cb867470fa8c9f67dbba74a78d78e3e98d7cf2b08d6d71540f797332"
+dependencies = [
+ "bitflags 1.3.2",
+]
+
+[[package]]
+name = "redox_syscall"
+version = "0.2.16"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a"
+dependencies = [
+ "bitflags 1.3.2",
+]
+
+[[package]]
+name = "redox_syscall"
+version = "0.5.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0d04b7d0ee6b4a0207a0a7adb104d23ecb0b47d6beae7152d0fa34b692b29fd6"
+dependencies = [
+ "bitflags 2.9.1",
+]
+
+[[package]]
+name = "redox_users"
+version = "0.4.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ba009ff324d1fc1b900bd1fdb31564febe58a8ccc8a6fdbb93b543d33b13ca43"
+dependencies = [
+ "getrandom 0.2.16",
+ "libredox",
+ "thiserror 1.0.69",
+]
+
+[[package]]
+name = "ref-cast"
+version = "1.0.24"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4a0ae411dbe946a674d89546582cea4ba2bb8defac896622d6496f14c23ba5cf"
+dependencies = [
+ "ref-cast-impl",
+]
+
+[[package]]
+name = "ref-cast-impl"
+version = "1.0.24"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1165225c21bff1f3bbce98f5a1f889949bc902d3575308cc7b0de30b4f6d27c7"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "regex"
+version = "1.11.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191"
+dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata 0.4.9",
+ "regex-syntax 0.8.5",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.1.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132"
+dependencies = [
+ "regex-syntax 0.6.29",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908"
+dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-syntax 0.8.5",
+]
+
+[[package]]
+name = "regex-syntax"
+version = "0.6.29"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1"
+
+[[package]]
+name = "regex-syntax"
+version = "0.8.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"
+
+[[package]]
+name = "reqwest"
+version = "0.11.27"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dd67538700a17451e7cba03ac727fb961abb7607553461627b97de0b89cf4a62"
+dependencies = [
+ "base64 0.21.7",
+ "bytes",
+ "encoding_rs",
+ "futures-core",
+ "futures-util",
+ "h2",
+ "http 0.2.12",
+ "http-body 0.4.6",
+ "hyper 0.14.32",
+ "hyper-rustls",
+ "hyper-tls",
+ "ipnet",
+ "js-sys",
+ "log",
+ "mime",
+ "native-tls",
+ "once_cell",
+ "percent-encoding",
+ "pin-project-lite",
+ "rustls",
+ "rustls-pemfile",
+ "serde",
+ "serde_json",
+ "serde_urlencoded",
+ "sync_wrapper",
+ "system-configuration",
+ "tokio",
+ "tokio-native-tls",
+ "tokio-rustls",
+ "tower-service",
+ "url",
+ "wasm-bindgen",
+ "wasm-bindgen-futures",
+ "web-sys",
+ "webpki-roots",
+ "winreg",
+]
+
+[[package]]
+name = "ring"
+version = "0.16.20"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3053cf52e236a3ed746dfc745aa9cacf1b791d846bdaf412f60a8d7d6e17c8fc"
+dependencies = [
+ "cc",
+ "libc",
+ "once_cell",
+ "spin 0.5.2",
+ "untrusted 0.7.1",
+ "web-sys",
+ "winapi",
+]
+
+[[package]]
+name = "ring"
+version = "0.17.14"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a4689e6c2294d81e88dc6261c768b63bc4fcdb852be6d1352498b114f61383b7"
+dependencies = [
+ "cc",
+ "cfg-if",
+ "getrandom 0.2.16",
+ "libc",
+ "untrusted 0.9.0",
+ "windows-sys 0.52.0",
+]
+
+[[package]]
+name = "rustc-demangle"
+version = "0.1.25"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "989e6739f80c4ad5b13e0fd7fe89531180375b18520cc8c82080e4dc4035b84f"
+
+[[package]]
+name = "rustix"
+version = "1.0.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c71e83d6afe7ff64890ec6b71d6a69bb8a610ab78ce364b3352876bb4c801266"
+dependencies = [
+ "bitflags 2.9.1",
+ "errno",
+ "libc",
+ "linux-raw-sys",
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "rustls"
+version = "0.21.12"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3f56a14d1f48b391359b22f731fd4bd7e43c97f3c50eee276f3aa09c94784d3e"
+dependencies = [
+ "log",
+ "ring 0.17.14",
+ "rustls-webpki",
+ "sct",
+]
+
+[[package]]
+name = "rustls-native-certs"
+version = "0.6.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a9aace74cb666635c918e9c12bc0d348266037aa8eb599b5cba565709a8dff00"
+dependencies = [
+ "openssl-probe",
+ "rustls-pemfile",
+ "schannel",
+ "security-framework",
+]
+
+[[package]]
+name = "rustls-pemfile"
+version = "1.0.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1c74cae0a4cf6ccbbf5f359f08efdf8ee7e1dc532573bf0db71968cb56b1448c"
+dependencies = [
+ "base64 0.21.7",
+]
+
+[[package]]
+name = "rustls-webpki"
+version = "0.101.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8b6275d1ee7a1cd780b64aca7726599a1dbc893b1e64144529e55c3c2f745765"
+dependencies = [
+ "ring 0.17.14",
+ "untrusted 0.9.0",
+]
+
+[[package]]
+name = "rustversion"
+version = "1.0.21"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8a0d197bd2c9dc6e53b84da9556a69ba4cdfab8619eb41a8bd1cc2027a0f6b1d"
+
+[[package]]
+name = "ryu"
+version = "1.0.20"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"
+
+[[package]]
+name = "schannel"
+version = "0.1.27"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1f29ebaa345f945cec9fbbc532eb307f0fdad8161f281b6369539c8d84876b3d"
+dependencies = [
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "schemars"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4cd191f9397d57d581cddd31014772520aa448f65ef991055d7f61582c65165f"
+dependencies = [
+ "dyn-clone",
+ "ref-cast",
+ "serde",
+ "serde_json",
+]
+
+[[package]]
+name = "schemars"
+version = "1.0.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1375ba8ef45a6f15d83fa8748f1079428295d403d6ea991d09ab100155fbc06d"
+dependencies = [
+ "dyn-clone",
+ "ref-cast",
+ "serde",
+ "serde_json",
+]
+
+[[package]]
+name = "scopeguard"
+version = "1.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"
+
+[[package]]
+name = "sct"
+version = "0.7.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "da046153aa2352493d6cb7da4b6e5c0c057d8a1d0a9aa8560baffdd945acd414"
+dependencies = [
+ "ring 0.17.14",
+ "untrusted 0.9.0",
+]
+
+[[package]]
+name = "secrecy"
+version = "0.8.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9bd1c54ea06cfd2f6b63219704de0b9b4f72dcc2b8fdef820be6cd799780e91e"
+dependencies = [
+ "serde",
+ "zeroize",
+]
+
+[[package]]
+name = "security-framework"
+version = "2.11.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "897b2245f0b511c87893af39b033e5ca9cce68824c4d7e7630b5a1d339658d02"
+dependencies = [
+ "bitflags 2.9.1",
+ "core-foundation",
+ "core-foundation-sys",
+ "libc",
+ "security-framework-sys",
+]
+
+[[package]]
+name = "security-framework-sys"
+version = "2.14.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "49db231d56a190491cb4aeda9527f1ad45345af50b0851622a7adb8c03b01c32"
+dependencies = [
+ "core-foundation-sys",
+ "libc",
+]
+
+[[package]]
+name = "serde"
+version = "1.0.219"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
+dependencies = [
+ "serde_derive",
+]
+
+[[package]]
+name = "serde-value"
+version = "0.7.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f3a1a3341211875ef120e117ea7fd5228530ae7e7036a779fdc9117be6b3282c"
+dependencies = [
+ "ordered-float",
+ "serde",
+]
+
+[[package]]
+name = "serde_derive"
+version = "1.0.219"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "serde_json"
+version = "1.0.140"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "20068b6e96dc6c9bd23e01df8827e6c7e1f2fddd43c21810382803c136b99373"
+dependencies = [
+ "itoa",
+ "memchr",
+ "ryu",
+ "serde",
+]
+
+[[package]]
+name = "serde_path_to_error"
+version = "0.1.17"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "59fab13f937fa393d08645bf3a84bdfe86e296747b506ada67bb15f10f218b2a"
+dependencies = [
+ "itoa",
+ "serde",
+]
+
+[[package]]
+name = "serde_repr"
+version = "0.1.20"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "175ee3e80ae9982737ca543e96133087cbd9a485eecc3bc4de9c1a37b47ea59c"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "serde_urlencoded"
+version = "0.7.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd"
+dependencies = [
+ "form_urlencoded",
+ "itoa",
+ "ryu",
+ "serde",
+]
+
+[[package]]
+name = "serde_with"
+version = "3.14.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f2c45cd61fefa9db6f254525d46e392b852e0e61d9a1fd36e5bd183450a556d5"
+dependencies = [
+ "base64 0.22.1",
+ "chrono",
+ "hex",
+ "indexmap 1.9.3",
+ "indexmap 2.10.0",
+ "schemars 0.9.0",
+ "schemars 1.0.3",
+ "serde",
+ "serde_derive",
+ "serde_json",
+ "time",
+]
+
+[[package]]
+name = "serde_yaml"
+version = "0.9.34+deprecated"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6a8b1a1a2ebf674015cc02edccce75287f1a0130d394307b36743c2f5d504b47"
+dependencies = [
+ "indexmap 2.10.0",
+ "itoa",
+ "ryu",
+ "serde",
+ "unsafe-libyaml",
+]
+
+[[package]]
+name = "sha1"
+version = "0.10.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba"
+dependencies = [
+ "cfg-if",
+ "cpufeatures",
+ "digest",
+]
+
+[[package]]
+name = "sha2"
+version = "0.10.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a7507d819769d01a365ab707794a4084392c824f54a7a6a7862f8c3d0892b283"
+dependencies = [
+ "cfg-if",
+ "cpufeatures",
+ "digest",
+]
+
+[[package]]
+name = "sharded-slab"
+version = "0.1.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"
+dependencies = [
+ "lazy_static",
+]
+
+[[package]]
+name = "shlex"
+version = "1.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64"
+
+[[package]]
+name = "signal-hook-registry"
+version = "1.4.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9203b8055f63a2a00e2f593bb0510367fe707d7ff1e5c872de2f537b339e5410"
+dependencies = [
+ "libc",
+]
+
+[[package]]
+name = "simple_asn1"
+version = "0.6.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "297f631f50729c8c99b84667867963997ec0b50f32b2a7dbcab828ef0541e8bb"
+dependencies = [
+ "num-bigint",
+ "num-traits",
+ "thiserror 2.0.12",
+ "time",
+]
+
+[[package]]
+name = "sketches-ddsketch"
+version = "0.2.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "85636c14b73d81f541e525f585c0a2109e6744e1565b5c1668e31c70c10ed65c"
+
+[[package]]
+name = "slab"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "04dc19736151f35336d325007ac991178d504a119863a2fcb3758cdb5e52c50d"
+
+[[package]]
+name = "smallvec"
+version = "1.15.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"
+
+[[package]]
+name = "socket2"
+version = "0.5.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e22376abed350d73dd1cd119b57ffccad95b4e585a7cda43e286245ce23c0678"
+dependencies = [
+ "libc",
+ "windows-sys 0.52.0",
+]
+
+[[package]]
+name = "spin"
+version = "0.5.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d"
+
+[[package]]
+name = "spin"
+version = "0.9.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67"
+
+[[package]]
+name = "sqlformat"
+version = "0.2.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7bba3a93db0cc4f7bdece8bb09e77e2e785c20bfebf79eb8340ed80708048790"
+dependencies = [
+ "nom",
+ "unicode_categories",
+]
+
+[[package]]
+name = "sqlx"
+version = "0.6.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f8de3b03a925878ed54a954f621e64bf55a3c1bd29652d0d1a17830405350188"
+dependencies = [
+ "sqlx-core",
+ "sqlx-macros",
+]
+
+[[package]]
+name = "sqlx-core"
+version = "0.6.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fa8241483a83a3f33aa5fff7e7d9def398ff9990b2752b6c6112b83c6d246029"
+dependencies = [
+ "ahash 0.7.8",
+ "atoi",
+ "base64 0.13.1",
+ "bitflags 1.3.2",
+ "byteorder",
+ "bytes",
+ "chrono",
+ "crc",
+ "crossbeam-queue",
+ "dirs",
+ "dotenvy",
+ "either",
+ "event-listener",
+ "futures-channel",
+ "futures-core",
+ "futures-intrusive",
+ "futures-util",
+ "hashlink",
+ "hex",
+ "hkdf",
+ "hmac",
+ "indexmap 1.9.3",
+ "itoa",
+ "libc",
+ "log",
+ "md-5",
+ "memchr",
+ "once_cell",
+ "paste",
+ "percent-encoding",
+ "rand",
+ "serde",
+ "serde_json",
+ "sha1",
+ "sha2",
+ "smallvec",
+ "sqlformat",
+ "sqlx-rt",
+ "stringprep",
+ "thiserror 1.0.69",
+ "tokio-stream",
+ "url",
+ "whoami",
+]
+
+[[package]]
+name = "sqlx-macros"
+version = "0.6.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9966e64ae989e7e575b19d7265cb79d7fc3cbbdf179835cb0d716f294c2049c9"
+dependencies = [
+ "dotenvy",
+ "either",
+ "heck",
+ "once_cell",
+ "proc-macro2",
+ "quote",
+ "sha2",
+ "sqlx-core",
+ "sqlx-rt",
+ "syn 1.0.109",
+ "url",
+]
+
+[[package]]
+name = "sqlx-rt"
+version = "0.6.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "804d3f245f894e61b1e6263c84b23ca675d96753b5abfd5cc8597d86806e8024"
+dependencies = [
+ "native-tls",
+ "once_cell",
+ "tokio",
+ "tokio-native-tls",
+]
+
+[[package]]
+name = "stable_deref_trait"
+version = "1.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3"
+
+[[package]]
+name = "stringprep"
+version = "0.1.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7b4df3d392d81bd458a8a621b8bffbd2302a12ffe288a9d931670948749463b1"
+dependencies = [
+ "unicode-bidi",
+ "unicode-normalization",
+ "unicode-properties",
+]
+
+[[package]]
+name = "strsim"
+version = "0.10.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623"
+
+[[package]]
+name = "subtle"
+version = "2.6.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292"
+
+[[package]]
+name = "syn"
+version = "1.0.109"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "unicode-ident",
+]
+
+[[package]]
+name = "syn"
+version = "2.0.104"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "unicode-ident",
+]
+
+[[package]]
+name = "sync_wrapper"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2047c6ded9c721764247e62cd3b03c09ffc529b2ba5b10ec482ae507a4a70160"
+
+[[package]]
+name = "synstructure"
+version = "0.13.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "728a70f3dbaf5bab7f0c4b1ac8d7ae5ea60a4b5549c8a5914361c99147a709d2"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "system-configuration"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ba3a3adc5c275d719af8cb4272ea1c4a6d668a777f37e115f6d11ddbc1c8e0e7"
+dependencies = [
+ "bitflags 1.3.2",
+ "core-foundation",
+ "system-configuration-sys",
+]
+
+[[package]]
+name = "system-configuration-sys"
+version = "0.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a75fb188eb626b924683e3b95e3a48e63551fcfb51949de2f06a9d91dbee93c9"
+dependencies = [
+ "core-foundation-sys",
+ "libc",
+]
+
+[[package]]
+name = "tar"
+version = "0.4.44"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1d863878d212c87a19c1a610eb53bb01fe12951c0501cf5a0d65f724914a667a"
+dependencies = [
+ "filetime",
+ "libc",
+ "xattr",
+]
+
+[[package]]
+name = "tempfile"
+version = "3.20.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e8a64e3985349f2441a1a9ef0b853f869006c3855f2cda6862a94d26ebb9d6a1"
+dependencies = [
+ "fastrand",
+ "getrandom 0.3.3",
+ "once_cell",
+ "rustix",
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "thiserror"
+version = "1.0.69"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b6aaf5339b578ea85b50e080feb250a3e8ae8cfcdff9a461c9ec2904bc923f52"
+dependencies = [
+ "thiserror-impl 1.0.69",
+]
+
+[[package]]
+name = "thiserror"
+version = "2.0.12"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "567b8a2dae586314f7be2a752ec7474332959c6460e02bde30d702a66d488708"
+dependencies = [
+ "thiserror-impl 2.0.12",
+]
+
+[[package]]
+name = "thiserror-impl"
+version = "1.0.69"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4fee6c4efc90059e10f81e6d42c60a18f76588c3d74cb83a0b242a2b6c7504c1"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "thiserror-impl"
+version = "2.0.12"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7f7cf42b4507d8ea322120659672cf1b9dbb93f8f2d4ecfd6e51350ff5b17a1d"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "thread_local"
+version = "1.1.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
+dependencies = [
+ "cfg-if",
+]
+
+[[package]]
+name = "time"
+version = "0.3.41"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8a7619e19bc266e0f9c5e6686659d394bc57973859340060a69221e57dbc0c40"
+dependencies = [
+ "deranged",
+ "itoa",
+ "num-conv",
+ "powerfmt",
+ "serde",
+ "time-core",
+ "time-macros",
+]
+
+[[package]]
+name = "time-core"
+version = "0.1.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c9e9a38711f559d9e3ce1cdb06dd7c5b8ea546bc90052da6d06bb76da74bb07c"
+
+[[package]]
+name = "time-macros"
+version = "0.2.22"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3526739392ec93fd8b359c8e98514cb3e8e021beb4e5f597b00a0221f8ed8a49"
+dependencies = [
+ "num-conv",
+ "time-core",
+]
+
+[[package]]
+name = "tinystr"
+version = "0.8.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5d4f6d1145dcb577acf783d4e601bc1d76a13337bb54e6233add580b07344c8b"
+dependencies = [
+ "displaydoc",
+ "zerovec",
+]
+
+[[package]]
+name = "tinyvec"
+version = "1.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09b3661f17e86524eccd4371ab0429194e0d7c008abb45f7a7495b1719463c71"
+dependencies = [
+ "tinyvec_macros",
+]
+
+[[package]]
+name = "tinyvec_macros"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20"
+
+[[package]]
+name = "tokio"
+version = "1.46.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1140bb80481756a8cbe10541f37433b459c5aa1e727b4c020fbfebdc25bf3ec4"
+dependencies = [
+ "backtrace",
+ "bytes",
+ "io-uring",
+ "libc",
+ "mio",
+ "parking_lot 0.12.4",
+ "pin-project-lite",
+ "signal-hook-registry",
+ "slab",
+ "socket2",
+ "tokio-macros",
+ "windows-sys 0.52.0",
+]
+
+[[package]]
+name = "tokio-io-timeout"
+version = "1.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "30b74022ada614a1b4834de765f9bb43877f910cc8ce4be40e89042c9223a8bf"
+dependencies = [
+ "pin-project-lite",
+ "tokio",
+]
+
+[[package]]
+name = "tokio-macros"
+version = "2.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6e06d43f1345a3bcd39f6a56dbb7dcab2ba47e68e8ac134855e7e2bdbaf8cab8"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "tokio-native-tls"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bbae76ab933c85776efabc971569dd6119c580d8f5d448769dec1764bf796ef2"
+dependencies = [
+ "native-tls",
+ "tokio",
+]
+
+[[package]]
+name = "tokio-rustls"
+version = "0.24.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c28327cf380ac148141087fbfb9de9d7bd4e84ab5d2c28fbc911d753de8a7081"
+dependencies = [
+ "rustls",
+ "tokio",
+]
+
+[[package]]
+name = "tokio-stream"
+version = "0.1.17"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "eca58d7bba4a75707817a2c44174253f9236b2d5fbd055602e9d5c07c139a047"
+dependencies = [
+ "futures-core",
+ "pin-project-lite",
+ "tokio",
+ "tokio-util",
+]
+
+[[package]]
+name = "tokio-util"
+version = "0.7.15"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "66a539a9ad6d5d281510d5bd368c973d636c02dbf8a67300bfb6b950696ad7df"
+dependencies = [
+ "bytes",
+ "futures-core",
+ "futures-sink",
+ "pin-project-lite",
+ "slab",
+ "tokio",
+]
+
+[[package]]
+name = "tower"
+version = "0.4.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b8fa9be0de6cf49e536ce1851f987bd21a43b771b09473c3549a6c853db37c1c"
+dependencies = [
+ "futures-core",
+ "futures-util",
+ "pin-project",
+ "pin-project-lite",
+ "tokio",
+ "tokio-util",
+ "tower-layer",
+ "tower-service",
+ "tracing",
+]
+
+[[package]]
+name = "tower-http"
+version = "0.4.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "61c5bb1d698276a2443e5ecfabc1008bf15a36c12e6a7176e7bf089ea9131140"
+dependencies = [
+ "base64 0.21.7",
+ "bitflags 2.9.1",
+ "bytes",
+ "futures-core",
+ "futures-util",
+ "http 0.2.12",
+ "http-body 0.4.6",
+ "http-range-header",
+ "mime",
+ "pin-project-lite",
+ "tower-layer",
+ "tower-service",
+ "tracing",
+]
+
+[[package]]
+name = "tower-layer"
+version = "0.3.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "121c2a6cda46980bb0fcd1647ffaf6cd3fc79a013de288782836f6df9c48780e"
+
+[[package]]
+name = "tower-service"
+version = "0.3.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8df9b6e13f2d32c91b9bd719c00d1958837bc7dec474d94952798cc8e69eeec3"
+
+[[package]]
+name = "tracing"
+version = "0.1.41"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
+dependencies = [
+ "log",
+ "pin-project-lite",
+ "tracing-attributes",
+ "tracing-core",
+]
+
+[[package]]
+name = "tracing-attributes"
+version = "0.1.30"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "81383ab64e72a7a8b8e13130c49e3dab29def6d0c7d76a03087b3cf71c5c6903"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "tracing-core"
+version = "0.1.34"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b9d12581f227e93f094d3af2ae690a574abb8a2b9b7a96e7cfe9647b2b617678"
+dependencies = [
+ "once_cell",
+ "valuable",
+]
+
+[[package]]
+name = "tracing-futures"
+version = "0.2.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "97d095ae15e245a057c8e8451bab9b3ee1e1f68e9ba2b4fbc18d0ac5237835f2"
+dependencies = [
+ "pin-project",
+ "tracing",
+]
+
+[[package]]
+name = "tracing-log"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3"
+dependencies = [
+ "log",
+ "once_cell",
+ "tracing-core",
+]
+
+[[package]]
+name = "tracing-serde"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "704b1aeb7be0d0a84fc9828cae51dab5970fee5088f83d1dd7ee6f6246fc6ff1"
+dependencies = [
+ "serde",
+ "tracing-core",
+]
+
+[[package]]
+name = "tracing-subscriber"
+version = "0.3.19"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008"
+dependencies = [
+ "matchers",
+ "nu-ansi-term",
+ "once_cell",
+ "regex",
+ "serde",
+ "serde_json",
+ "sharded-slab",
+ "smallvec",
+ "thread_local",
+ "tracing",
+ "tracing-core",
+ "tracing-log",
+ "tracing-serde",
+]
+
+[[package]]
+name = "try-lock"
+version = "0.2.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b"
+
+[[package]]
+name = "typenum"
+version = "1.18.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1dccffe3ce07af9386bfd29e80c0ab1a8205a2fc34e4bcd40364df902cfa8f3f"
+
+[[package]]
+name = "ucd-trie"
+version = "0.1.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2896d95c02a80c6d6a5d6e953d479f5ddf2dfdb6a244441010e373ac0fb88971"
+
+[[package]]
+name = "unicode-bidi"
+version = "0.3.18"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5c1cb5db39152898a79168971543b1cb5020dff7fe43c8dc468b0885f5e29df5"
+
+[[package]]
+name = "unicode-ident"
+version = "1.0.18"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"
+
+[[package]]
+name = "unicode-normalization"
+version = "0.1.24"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5033c97c4262335cded6d6fc3e5c18ab755e1a3dc96376350f3d8e9f009ad956"
+dependencies = [
+ "tinyvec",
+]
+
+[[package]]
+name = "unicode-properties"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e70f2a8b45122e719eb623c01822704c4e0907e7e426a05927e1a1cfff5b75d0"
+
+[[package]]
+name = "unicode-segmentation"
+version = "1.12.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493"
+
+[[package]]
+name = "unicode_categories"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e"
+
+[[package]]
+name = "unsafe-libyaml"
+version = "0.2.11"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "673aac59facbab8a9007c7f6108d11f63b603f7cabff99fabf650fea5c32b861"
+
+[[package]]
+name = "untrusted"
+version = "0.7.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a156c684c91ea7d62626509bce3cb4e1d9ed5c4d978f7b4352658f96a4c26b4a"
+
+[[package]]
+name = "untrusted"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1"
+
+[[package]]
+name = "url"
+version = "2.5.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32f8b686cadd1473f4bd0117a5d28d36b1ade384ea9b5069a1c40aefed7fda60"
+dependencies = [
+ "form_urlencoded",
+ "idna",
+ "percent-encoding",
+]
+
+[[package]]
+name = "utf8_iter"
+version = "1.0.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b6c140620e7ffbb22c2dee59cafe6084a59b5ffc27a8859a5f0d494b5d52b6be"
+
+[[package]]
+name = "uuid"
+version = "1.17.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3cf4199d1e5d15ddd86a694e4d0dffa9c323ce759fea589f00fef9d81cc1931d"
+dependencies = [
+ "getrandom 0.3.3",
+ "js-sys",
+ "wasm-bindgen",
+]
+
+[[package]]
+name = "valuable"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"
+
+[[package]]
+name = "vcpkg"
+version = "0.2.15"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426"
+
+[[package]]
+name = "version_check"
+version = "0.9.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a"
+
+[[package]]
+name = "want"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e"
+dependencies = [
+ "try-lock",
+]
+
+[[package]]
+name = "wasi"
+version = "0.11.1+wasi-snapshot-preview1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ccf3ec651a847eb01de73ccad15eb7d99f80485de043efb2f370cd654f4ea44b"
+
+[[package]]
+name = "wasi"
+version = "0.14.2+wasi-0.2.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9683f9a5a998d873c0d21fcbe3c083009670149a8fab228644b8bd36b2c48cb3"
+dependencies = [
+ "wit-bindgen-rt",
+]
+
+[[package]]
+name = "wasite"
+version = "0.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b8dad83b4f25e74f184f64c43b150b91efe7647395b42289f38e50566d82855b"
+
+[[package]]
+name = "wasm-bindgen"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
+dependencies = [
+ "cfg-if",
+ "once_cell",
+ "rustversion",
+ "wasm-bindgen-macro",
+]
+
+[[package]]
+name = "wasm-bindgen-backend"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
+dependencies = [
+ "bumpalo",
+ "log",
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+ "wasm-bindgen-shared",
+]
+
+[[package]]
+name = "wasm-bindgen-futures"
+version = "0.4.50"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "555d470ec0bc3bb57890405e5d4322cc9ea83cebb085523ced7be4144dac1e61"
+dependencies = [
+ "cfg-if",
+ "js-sys",
+ "once_cell",
+ "wasm-bindgen",
+ "web-sys",
+]
+
+[[package]]
+name = "wasm-bindgen-macro"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
+dependencies = [
+ "quote",
+ "wasm-bindgen-macro-support",
+]
+
+[[package]]
+name = "wasm-bindgen-macro-support"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+ "wasm-bindgen-backend",
+ "wasm-bindgen-shared",
+]
+
+[[package]]
+name = "wasm-bindgen-shared"
+version = "0.2.100"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
+dependencies = [
+ "unicode-ident",
+]
+
+[[package]]
+name = "web-sys"
+version = "0.3.77"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "33b6dd2ef9186f1f2072e409e99cd22a975331a6b3591b12c764e0e55c60d5d2"
+dependencies = [
+ "js-sys",
+ "wasm-bindgen",
+]
+
+[[package]]
+name = "webpki-roots"
+version = "0.25.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5f20c57d8d7db6d3b86154206ae5d8fba62dd39573114de97c2cb0578251f8e1"
+
+[[package]]
+name = "whoami"
+version = "1.6.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6994d13118ab492c3c80c1f81928718159254c53c472bf9ce36f8dae4add02a7"
+dependencies = [
+ "redox_syscall 0.5.13",
+ "wasite",
+ "web-sys",
+]
+
+[[package]]
+name = "winapi"
+version = "0.3.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
+dependencies = [
+ "winapi-i686-pc-windows-gnu",
+ "winapi-x86_64-pc-windows-gnu",
+]
+
+[[package]]
+name = "winapi-i686-pc-windows-gnu"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"
+
+[[package]]
+name = "winapi-x86_64-pc-windows-gnu"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "windows-core"
+version = "0.61.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c0fdd3ddb90610c7638aa2b3a3ab2904fb9e5cdbecc643ddb3647212781c4ae3"
+dependencies = [
+ "windows-implement",
+ "windows-interface",
+ "windows-link",
+ "windows-result",
+ "windows-strings",
+]
+
+[[package]]
+name = "windows-implement"
+version = "0.60.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "windows-interface"
+version = "0.59.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "windows-link"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5e6ad25900d524eaabdbbb96d20b4311e1e7ae1699af4fb28c17ae66c80d798a"
+
+[[package]]
+name = "windows-result"
+version = "0.3.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "56f42bd332cc6c8eac5af113fc0c1fd6a8fd2aa08a0119358686e5160d0586c6"
+dependencies = [
+ "windows-link",
+]
+
+[[package]]
+name = "windows-strings"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "56e6c93f3a0c3b36176cb1327a4958a0353d5d166c2a35cb268ace15e91d3b57"
+dependencies = [
+ "windows-link",
+]
+
+[[package]]
+name = "windows-sys"
+version = "0.48.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
+dependencies = [
+ "windows-targets 0.48.5",
+]
+
+[[package]]
+name = "windows-sys"
+version = "0.52.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d"
+dependencies = [
+ "windows-targets 0.52.6",
+]
+
+[[package]]
+name = "windows-sys"
+version = "0.59.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
+dependencies = [
+ "windows-targets 0.52.6",
+]
+
+[[package]]
+name = "windows-sys"
+version = "0.60.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f2f500e4d28234f72040990ec9d39e3a6b950f9f22d3dba18416c35882612bcb"
+dependencies = [
+ "windows-targets 0.53.2",
+]
+
+[[package]]
+name = "windows-targets"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
+dependencies = [
+ "windows_aarch64_gnullvm 0.48.5",
+ "windows_aarch64_msvc 0.48.5",
+ "windows_i686_gnu 0.48.5",
+ "windows_i686_msvc 0.48.5",
+ "windows_x86_64_gnu 0.48.5",
+ "windows_x86_64_gnullvm 0.48.5",
+ "windows_x86_64_msvc 0.48.5",
+]
+
+[[package]]
+name = "windows-targets"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
+dependencies = [
+ "windows_aarch64_gnullvm 0.52.6",
+ "windows_aarch64_msvc 0.52.6",
+ "windows_i686_gnu 0.52.6",
+ "windows_i686_gnullvm 0.52.6",
+ "windows_i686_msvc 0.52.6",
+ "windows_x86_64_gnu 0.52.6",
+ "windows_x86_64_gnullvm 0.52.6",
+ "windows_x86_64_msvc 0.52.6",
+]
+
+[[package]]
+name = "windows-targets"
+version = "0.53.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c66f69fcc9ce11da9966ddb31a40968cad001c5bedeb5c2b82ede4253ab48aef"
+dependencies = [
+ "windows_aarch64_gnullvm 0.53.0",
+ "windows_aarch64_msvc 0.53.0",
+ "windows_i686_gnu 0.53.0",
+ "windows_i686_gnullvm 0.53.0",
+ "windows_i686_msvc 0.53.0",
+ "windows_x86_64_gnu 0.53.0",
+ "windows_x86_64_gnullvm 0.53.0",
+ "windows_x86_64_msvc 0.53.0",
+]
+
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"
+
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"
+
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"
+
+[[package]]
+name = "windows_i686_gnullvm"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"
+
+[[package]]
+name = "windows_i686_gnullvm"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"
+
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"
+
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"
+
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"
+
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"
+
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"
+
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"
+
+[[package]]
+name = "winreg"
+version = "0.50.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "524e57b2c537c0f9b1e69f1965311ec12182b4122e45035b1508cd24d2adadb1"
+dependencies = [
+ "cfg-if",
+ "windows-sys 0.48.0",
+]
+
+[[package]]
+name = "wit-bindgen-rt"
+version = "0.39.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6f42320e61fe2cfd34354ecb597f86f413484a798ba44a8ca1165c58d42da6c1"
+dependencies = [
+ "bitflags 2.9.1",
+]
+
+[[package]]
+name = "writeable"
+version = "0.6.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ea2f10b9bb0928dfb1b42b65e1f9e36f7f54dbdf08457afefb38afcdec4fa2bb"
+
+[[package]]
+name = "xattr"
+version = "1.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "af3a19837351dc82ba89f8a125e22a3c475f05aba604acc023d62b2739ae2909"
+dependencies = [
+ "libc",
+ "rustix",
+]
+
+[[package]]
+name = "yoke"
+version = "0.8.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5f41bb01b8226ef4bfd589436a297c53d118f65921786300e427be8d487695cc"
+dependencies = [
+ "serde",
+ "stable_deref_trait",
+ "yoke-derive",
+ "zerofrom",
+]
+
+[[package]]
+name = "yoke-derive"
+version = "0.8.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "38da3c9736e16c5d3c8c597a9aaa5d1fa565d0532ae05e27c24aa62fb32c0ab6"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+ "synstructure",
+]
+
+[[package]]
+name = "zerocopy"
+version = "0.8.26"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1039dd0d3c310cf05de012d8a39ff557cb0d23087fd44cad61df08fc31907a2f"
+dependencies = [
+ "zerocopy-derive",
+]
+
+[[package]]
+name = "zerocopy-derive"
+version = "0.8.26"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9ecf5b4cc5364572d7f4c329661bcc82724222973f2cab6f050a4e5c22f75181"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
+
+[[package]]
+name = "zerofrom"
+version = "0.1.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "50cc42e0333e05660c3587f3bf9d0478688e15d870fab3346451ce7f8c9fbea5"
+dependencies = [
+ "zerofrom-derive",
+]
+
+[[package]]
+name = "zerofrom-derive"
+version = "0.1.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d71e5d6e06ab090c67b5e44993ec16b72dcbaabc526db883a360057678b48502"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+ "synstructure",
+]
+
+[[package]]
+name = "zeroize"
+version = "1.8.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde"
+
+[[package]]
+name = "zerotrie"
+version = "0.2.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "36f0bbd478583f79edad978b407914f61b2972f5af6fa089686016be8f9af595"
+dependencies = [
+ "displaydoc",
+ "yoke",
+ "zerofrom",
+]
+
+[[package]]
+name = "zerovec"
+version = "0.11.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4a05eb080e015ba39cc9e23bbe5e7fb04d5fb040350f99f34e338d5fdd294428"
+dependencies = [
+ "yoke",
+ "zerofrom",
+ "zerovec-derive",
+]
+
+[[package]]
+name = "zerovec-derive"
+version = "0.11.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5b96237efa0c878c64bd89c436f661be4e46b2f3eff1ebb976f7ef2321d2f58f"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.104",
+]
diff --git a/backend/Cargo.toml b/backend/Cargo.toml
new file mode 100644
index 0000000000000000000000000000000000000000..269151f05c2193321783f1daf73dbd1c0bc1dd97
--- /dev/null
+++ b/backend/Cargo.toml
@@ -0,0 +1,46 @@
+[package]
+name = "backend"
+version = "0.1.0"
+edition = "2021"
+
+[dependencies]
+axum = { version = "0.6", features = ["multipart"] }
+tokio = { version = "1.28", features = ["full"] }
+serde = { version = "1.0", features = ["derive"] }
+serde_json = "1.0"
+dotenvy = "0.15"
+sqlx = { version = "0.6", features = ["postgres", "runtime-tokio-native-tls", "chrono"] }
+jsonwebtoken = "8.2"
+argon2 = "0.4"
+uuid = { version = "1.3", features = ["v4"] }
+tracing = "0.1"
+tracing-subscriber = { version = "0.3", features = ["env-filter", "fmt", "json"] }
+axum-prometheus = "0.4"
+chrono = { version = "0.4", features = ["serde"] }
+async-trait = "0.1"
+rand_core = "0.6"
+bollard = "0.19"
+futures-util = "0.3"
+tokio-stream = { version = "0.1", features = ["sync"] }
+dashmap = "5"
+once_cell = "1.18"
+tempfile = "3"
+hmac = "0.12"
+sha2 = "0.10"
+hex = "0.4"
+regex = "1"
+reqwest = { version = "0.11", features = ["json"] }
+git2 = "0.18"
+tar = "0.4"
+bytes = "1"
+nix = { version = "0.30", features = ["signal"] }
+acme2 = "0.5"
+thiserror = "1.0"
+anyhow = "1.0"
+kube = { version = "0.88", features = ["runtime"] }
+k8s-openapi = { version = "0.21", default-features = false, features = ["v1_26"] }
+strsim = "0.10"
+
+[dev-dependencies]
+tower = "0.4"
+hyper = { version = "0.14", features = ["full"] }
diff --git a/backend/migrations/0001_create_tables.sql b/backend/migrations/0001_create_tables.sql
new file mode 100644
index 0000000000000000000000000000000000000000..941bdf5e722254f59cf6f9351c96a0b6778d6a28
--- /dev/null
+++ b/backend/migrations/0001_create_tables.sql
@@ -0,0 +1,37 @@
+-- Users table
+CREATE TABLE users (
+    id SERIAL PRIMARY KEY,
+    email TEXT UNIQUE NOT NULL,
+    password_hash TEXT NOT NULL,
+    created_at TIMESTAMPTZ DEFAULT NOW()
+);
+
+-- MCP Servers table
+CREATE TABLE mcp_servers (
+    id SERIAL PRIMARY KEY,
+    owner_id INTEGER NOT NULL REFERENCES users(id),
+    name TEXT NOT NULL,
+    server_type TEXT NOT NULL,
+    config JSONB,
+    status TEXT NOT NULL,
+    api_key TEXT NOT NULL,
+    created_at TIMESTAMPTZ DEFAULT NOW()
+);
+
+-- Context Sessions table
+CREATE TABLE context_sessions (
+    id SERIAL PRIMARY KEY,
+    server_id INTEGER NOT NULL REFERENCES mcp_servers(id),
+    user_id INTEGER NOT NULL REFERENCES users(id),
+    started_at TIMESTAMPTZ DEFAULT NOW(),
+    ended_at TIMESTAMPTZ
+);
+
+-- Usage Metrics table
+CREATE TABLE usage_metrics (
+    id SERIAL PRIMARY KEY,
+    server_id INTEGER NOT NULL REFERENCES mcp_servers(id),
+    timestamp TIMESTAMPTZ DEFAULT NOW(),
+    event_type TEXT,
+    details JSONB
+);
diff --git a/backend/migrations/0002_add_server_logs.sql b/backend/migrations/0002_add_server_logs.sql
new file mode 100644
index 0000000000000000000000000000000000000000..b0c312a0083529c9653710f82a3a0bd2a04a6070
--- /dev/null
+++ b/backend/migrations/0002_add_server_logs.sql
@@ -0,0 +1,7 @@
+-- Store container logs for historical viewing
+CREATE TABLE server_logs (
+    id SERIAL PRIMARY KEY,
+    server_id INTEGER NOT NULL REFERENCES mcp_servers(id) ON DELETE CASCADE,
+    collected_at TIMESTAMPTZ DEFAULT NOW(),
+    log_text TEXT NOT NULL
+);
diff --git a/backend/migrations/0003_add_service_integrations.sql b/backend/migrations/0003_add_service_integrations.sql
new file mode 100644
index 0000000000000000000000000000000000000000..0215754d91f381cdad708f14808c0448b1a2d33f
--- /dev/null
+++ b/backend/migrations/0003_add_service_integrations.sql
@@ -0,0 +1,8 @@
+-- Prebuilt service integrations table
+CREATE TABLE service_integrations (
+    id SERIAL PRIMARY KEY,
+    server_id INTEGER NOT NULL REFERENCES mcp_servers(id) ON DELETE CASCADE,
+    service_type TEXT NOT NULL,
+    config JSONB,
+    created_at TIMESTAMPTZ DEFAULT NOW()
+);
diff --git a/backend/migrations/0004_add_webhook_secret.sql b/backend/migrations/0004_add_webhook_secret.sql
new file mode 100644
index 0000000000000000000000000000000000000000..aa8e7177ae7bb1ab6920488139e42c2cb9590819
--- /dev/null
+++ b/backend/migrations/0004_add_webhook_secret.sql
@@ -0,0 +1,2 @@
+-- Add webhook secret column to store deployment triggers
+ALTER TABLE mcp_servers ADD COLUMN webhook_secret TEXT;
diff --git a/backend/migrations/0005_add_custom_domains.sql b/backend/migrations/0005_add_custom_domains.sql
new file mode 100644
index 0000000000000000000000000000000000000000..deb5338e43cb42a6c4c3333494529d82228abe09
--- /dev/null
+++ b/backend/migrations/0005_add_custom_domains.sql
@@ -0,0 +1,7 @@
+-- Map custom domains to MCP servers
+CREATE TABLE custom_domains (
+    id SERIAL PRIMARY KEY,
+    server_id INTEGER NOT NULL REFERENCES mcp_servers(id) ON DELETE CASCADE,
+    domain TEXT UNIQUE NOT NULL,
+    created_at TIMESTAMPTZ DEFAULT NOW()
+);
diff --git a/backend/migrations/0006_add_server_secrets.sql b/backend/migrations/0006_add_server_secrets.sql
new file mode 100644
index 0000000000000000000000000000000000000000..7ef405c6dc9c0b34f39a97814f5cf781c9a657f7
--- /dev/null
+++ b/backend/migrations/0006_add_server_secrets.sql
@@ -0,0 +1,12 @@
+-- Enable pgcrypto for encryption
+CREATE EXTENSION IF NOT EXISTS pgcrypto;
+
+-- Table for per-server secrets
+CREATE TABLE server_secrets (
+    id SERIAL PRIMARY KEY,
+    server_id INTEGER NOT NULL REFERENCES mcp_servers(id) ON DELETE CASCADE,
+    name TEXT NOT NULL,
+    value BYTEA NOT NULL,
+    created_at TIMESTAMPTZ DEFAULT NOW(),
+    UNIQUE(server_id, name)
+);
diff --git a/backend/migrations/0007_add_server_files.sql b/backend/migrations/0007_add_server_files.sql
new file mode 100644
index 0000000000000000000000000000000000000000..b3e0e82ce37a16ef5069a1d53659b2469595ccc7
--- /dev/null
+++ b/backend/migrations/0007_add_server_files.sql
@@ -0,0 +1,8 @@
+-- Files uploaded by servers or users
+CREATE TABLE server_files (
+    id SERIAL PRIMARY KEY,
+    server_id INTEGER NOT NULL REFERENCES mcp_servers(id) ON DELETE CASCADE,
+    name TEXT NOT NULL,
+    path TEXT NOT NULL,
+    created_at TIMESTAMPTZ DEFAULT NOW()
+);
diff --git a/backend/migrations/0008_add_gpu_flag.sql b/backend/migrations/0008_add_gpu_flag.sql
new file mode 100644
index 0000000000000000000000000000000000000000..3390807577aa4316cb27e62a2ca29884745abb5f
--- /dev/null
+++ b/backend/migrations/0008_add_gpu_flag.sql
@@ -0,0 +1,2 @@
+-- Allow servers to request GPU resources
+ALTER TABLE mcp_servers ADD COLUMN use_gpu BOOLEAN NOT NULL DEFAULT FALSE;
diff --git a/backend/migrations/0009_add_manifest.sql b/backend/migrations/0009_add_manifest.sql
new file mode 100644
index 0000000000000000000000000000000000000000..a5bac118c6f6575f2539c53eb569a55fb4ce9d39
--- /dev/null
+++ b/backend/migrations/0009_add_manifest.sql
@@ -0,0 +1,2 @@
+-- Store MCP manifest returned by the container
+ALTER TABLE mcp_servers ADD COLUMN manifest JSONB;
diff --git a/backend/migrations/0010_add_server_capabilities.sql b/backend/migrations/0010_add_server_capabilities.sql
new file mode 100644
index 0000000000000000000000000000000000000000..6859aa962a8cf63756a13a8f9d21e2e3ff5e2db2
--- /dev/null
+++ b/backend/migrations/0010_add_server_capabilities.sql
@@ -0,0 +1,7 @@
+-- Store capabilities declared in an MCP manifest
+CREATE TABLE server_capabilities (
+    id SERIAL PRIMARY KEY,
+    server_id INTEGER NOT NULL REFERENCES mcp_servers(id) ON DELETE CASCADE,
+    name TEXT NOT NULL,
+    description TEXT
+);
diff --git a/backend/migrations/0011_add_indexes.sql b/backend/migrations/0011_add_indexes.sql
new file mode 100644
index 0000000000000000000000000000000000000000..d8bda2a08b28df154663a51e4714e82aab740e38
--- /dev/null
+++ b/backend/migrations/0011_add_indexes.sql
@@ -0,0 +1,11 @@
+-- Add indexes for foreign key columns to improve query performance
+CREATE INDEX IF NOT EXISTS idx_mcp_servers_owner_id ON mcp_servers(owner_id);
+CREATE INDEX IF NOT EXISTS idx_context_sessions_server_id ON context_sessions(server_id);
+CREATE INDEX IF NOT EXISTS idx_context_sessions_user_id ON context_sessions(user_id);
+CREATE INDEX IF NOT EXISTS idx_usage_metrics_server_id ON usage_metrics(server_id);
+CREATE INDEX IF NOT EXISTS idx_service_integrations_server_id ON service_integrations(server_id);
+CREATE INDEX IF NOT EXISTS idx_server_logs_server_id ON server_logs(server_id);
+CREATE INDEX IF NOT EXISTS idx_custom_domains_server_id ON custom_domains(server_id);
+CREATE INDEX IF NOT EXISTS idx_server_secrets_server_id ON server_secrets(server_id);
+CREATE INDEX IF NOT EXISTS idx_server_files_server_id ON server_files(server_id);
+CREATE INDEX IF NOT EXISTS idx_server_capabilities_server_id ON server_capabilities(server_id);
diff --git a/backend/migrations/0012_add_job_queue.sql b/backend/migrations/0012_add_job_queue.sql
new file mode 100644
index 0000000000000000000000000000000000000000..46d7a2067bf53079572d79928bdd99311c7fc071
--- /dev/null
+++ b/backend/migrations/0012_add_job_queue.sql
@@ -0,0 +1,8 @@
+-- Persistent job queue for container operations
+CREATE TABLE job_queue (
+    id SERIAL PRIMARY KEY,
+    payload JSONB NOT NULL,
+    status TEXT NOT NULL DEFAULT 'queued',
+    created_at TIMESTAMPTZ DEFAULT NOW()
+);
+CREATE INDEX IF NOT EXISTS idx_job_queue_status ON job_queue(status);
diff --git a/backend/migrations/0013_add_roles_quota.sql b/backend/migrations/0013_add_roles_quota.sql
new file mode 100644
index 0000000000000000000000000000000000000000..820c2b482b140a4059076e7f130e8468fcc0941c
--- /dev/null
+++ b/backend/migrations/0013_add_roles_quota.sql
@@ -0,0 +1,3 @@
+-- Add role and quota columns to users
+ALTER TABLE users ADD COLUMN role TEXT NOT NULL DEFAULT 'user';
+ALTER TABLE users ADD COLUMN server_quota INTEGER NOT NULL DEFAULT 5;
diff --git a/backend/migrations/0014_add_vector_dbs.sql b/backend/migrations/0014_add_vector_dbs.sql
new file mode 100644
index 0000000000000000000000000000000000000000..3ae58934fa999839c5f285fae8818a2ef1c68d51
--- /dev/null
+++ b/backend/migrations/0014_add_vector_dbs.sql
@@ -0,0 +1,13 @@
+-- Managed vector database instances
+CREATE TABLE vector_dbs (
+    id SERIAL PRIMARY KEY,
+    owner_id INTEGER NOT NULL REFERENCES users(id),
+    name TEXT NOT NULL,
+    db_type TEXT NOT NULL,
+    container_id TEXT,
+    url TEXT,
+    created_at TIMESTAMPTZ DEFAULT NOW()
+);
+
+CREATE INDEX IF NOT EXISTS idx_vector_dbs_owner_id ON vector_dbs(owner_id);
+
diff --git a/backend/migrations/0015_add_ingestion_jobs.sql b/backend/migrations/0015_add_ingestion_jobs.sql
new file mode 100644
index 0000000000000000000000000000000000000000..b5db7d6647d9db8dca569e15c53b9007ea1bc458
--- /dev/null
+++ b/backend/migrations/0015_add_ingestion_jobs.sql
@@ -0,0 +1,12 @@
+-- Data ingestion jobs for syncing content into vector databases
+CREATE TABLE ingestion_jobs (
+    id SERIAL PRIMARY KEY,
+    owner_id INTEGER NOT NULL REFERENCES users(id),
+    vector_db_id INTEGER NOT NULL REFERENCES vector_dbs(id),
+    source_url TEXT NOT NULL,
+    schedule_minutes INTEGER DEFAULT 0,
+    last_run TIMESTAMPTZ,
+    created_at TIMESTAMPTZ DEFAULT NOW()
+);
+
+CREATE INDEX IF NOT EXISTS idx_ingestion_jobs_owner_id ON ingestion_jobs(owner_id);
diff --git a/backend/migrations/0016_add_workflows.sql b/backend/migrations/0016_add_workflows.sql
new file mode 100644
index 0000000000000000000000000000000000000000..8222d69097b05f3e285a2f6d293f5c9e3fa0a96d
--- /dev/null
+++ b/backend/migrations/0016_add_workflows.sql
@@ -0,0 +1,17 @@
+-- Workflows allow chaining MCP servers together
+CREATE TABLE workflows (
+    id SERIAL PRIMARY KEY,
+    owner_id INTEGER NOT NULL REFERENCES users(id),
+    name TEXT NOT NULL,
+    created_at TIMESTAMPTZ DEFAULT NOW()
+);
+
+CREATE TABLE workflow_steps (
+    id SERIAL PRIMARY KEY,
+    workflow_id INTEGER NOT NULL REFERENCES workflows(id) ON DELETE CASCADE,
+    position INTEGER NOT NULL,
+    server_id INTEGER NOT NULL REFERENCES mcp_servers(id)
+);
+
+CREATE INDEX IF NOT EXISTS idx_workflows_owner_id ON workflows(owner_id);
+CREATE INDEX IF NOT EXISTS idx_steps_workflow_id ON workflow_steps(workflow_id);
diff --git a/backend/migrations/0017_add_invocation_traces.sql b/backend/migrations/0017_add_invocation_traces.sql
new file mode 100644
index 0000000000000000000000000000000000000000..ed2d255306daa4d74ffd81ad6a1f7c8fa5b23d28
--- /dev/null
+++ b/backend/migrations/0017_add_invocation_traces.sql
@@ -0,0 +1,10 @@
+-- Track request/response pairs for evaluation
+CREATE TABLE invocation_traces (
+    id SERIAL PRIMARY KEY,
+    server_id INTEGER NOT NULL REFERENCES mcp_servers(id) ON DELETE CASCADE,
+    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
+    input_json JSONB NOT NULL,
+    output_text TEXT,
+    created_at TIMESTAMPTZ DEFAULT NOW()
+);
+CREATE INDEX IF NOT EXISTS idx_invocation_server ON invocation_traces(server_id);
diff --git a/backend/migrations/0018_add_evaluation_tables.sql b/backend/migrations/0018_add_evaluation_tables.sql
new file mode 100644
index 0000000000000000000000000000000000000000..e0acbefa80a8330120624668ce05de8fbc29dbb3
--- /dev/null
+++ b/backend/migrations/0018_add_evaluation_tables.sql
@@ -0,0 +1,16 @@
+-- Track evaluation tests and results for automated context evaluation
+CREATE TABLE evaluation_tests (
+    id SERIAL PRIMARY KEY,
+    server_id INTEGER NOT NULL REFERENCES mcp_servers(id) ON DELETE CASCADE,
+    question TEXT NOT NULL,
+    expected_answer TEXT NOT NULL,
+    created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
+);
+
+CREATE TABLE evaluation_results (
+    id SERIAL PRIMARY KEY,
+    test_id INTEGER NOT NULL REFERENCES evaluation_tests(id) ON DELETE CASCADE,
+    response TEXT NOT NULL,
+    score DOUBLE PRECISION NOT NULL,
+    created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
+);
diff --git a/backend/migrations/0019_add_organizations.sql b/backend/migrations/0019_add_organizations.sql
new file mode 100644
index 0000000000000000000000000000000000000000..888a5b6ec46c7ea67180856b6664a74b3bcc76b6
--- /dev/null
+++ b/backend/migrations/0019_add_organizations.sql
@@ -0,0 +1,14 @@
+CREATE TABLE organizations (
+    id SERIAL PRIMARY KEY,
+    name TEXT NOT NULL,
+    owner_id INTEGER REFERENCES users(id) ON DELETE CASCADE
+);
+
+CREATE TABLE organization_members (
+    organization_id INTEGER REFERENCES organizations(id) ON DELETE CASCADE,
+    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
+    role TEXT NOT NULL DEFAULT 'member',
+    PRIMARY KEY (organization_id, user_id)
+);
+
+ALTER TABLE mcp_servers ADD COLUMN organization_id INTEGER REFERENCES organizations(id);
diff --git a/backend/src/auth.rs b/backend/src/auth.rs
new file mode 100644
index 0000000000000000000000000000000000000000..f42ea737cf05e6a1db7fcec46000a54195ce5eb8
--- /dev/null
+++ b/backend/src/auth.rs
@@ -0,0 +1,155 @@
+use crate::extractor::AuthUser;
+use argon2::password_hash::{PasswordHash, SaltString};
+use argon2::{Argon2, PasswordHasher, PasswordVerifier};
+use axum::{
+    extract::Extension,
+    http::{HeaderMap, StatusCode},
+    Json,
+};
+use tracing::error;
+use crate::error::{AppError, AppResult};
+use chrono::{Duration, Utc};
+use jsonwebtoken::{encode, EncodingKey, Header};
+use rand_core::OsRng;
+use serde::{Deserialize, Serialize};
+use sqlx::{PgPool, Row};
+
+#[derive(Deserialize)]
+pub struct RegisterRequest {
+    pub email: String,
+    pub password: String,
+}
+
+#[derive(Deserialize)]
+pub struct LoginRequest {
+    pub email: String,
+    pub password: String,
+}
+
+#[derive(Serialize)]
+struct Claims {
+    sub: i32,
+    role: String,
+    exp: usize,
+}
+
+#[derive(Serialize)]
+pub struct UserInfo {
+    pub id: i32,
+    pub email: String,
+    pub role: String,
+    pub server_quota: i32,
+}
+
+pub async fn register_user(
+    Extension(pool): Extension<PgPool>,
+    Json(payload): Json<RegisterRequest>,
+) -> AppResult<StatusCode> {
+    if payload.password.len() < 8 {
+        return Err(AppError::BadRequest("Password too short".into()));
+    }
+    let salt = SaltString::generate(&mut OsRng);
+    let argon2 = Argon2::default();
+    let hash = argon2
+        .hash_password(payload.password.as_bytes(), &salt)
+        .map_err(|e| AppError::Message(format!("Hashing failed: {}", e)))?;
+    let result = sqlx::query("INSERT INTO users (email, password_hash) VALUES ($1, $2)")
+        .bind(&payload.email)
+        .bind(hash.to_string())
+        .execute(&pool)
+        .await;
+    match result {
+        Ok(_) => Ok(StatusCode::CREATED),
+        Err(e) => {
+            if let sqlx::Error::Database(db_err) = &e {
+                if db_err.constraint() == Some("users_email_key") {
+                    return Err(AppError::BadRequest("Email already registered".into()));
+                }
+            }
+            Err(AppError::Db(e))
+        }
+    }
+}
+
+pub async fn login_user(
+    Extension(pool): Extension<PgPool>,
+    Json(payload): Json<LoginRequest>,
+) -> AppResult<(HeaderMap, &'static str)> {
+    let rec = sqlx::query("SELECT id, password_hash, role FROM users WHERE email = $1")
+        .bind(&payload.email)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error while fetching user");
+            AppError::Db(e)
+        })?;
+    let rec = rec.ok_or(AppError::Unauthorized)?;
+    let id: i32 = rec.get("id");
+    let pass_hash: String = rec.get("password_hash");
+    let role: String = rec.get("role");
+    let parsed = PasswordHash::new(&pass_hash)
+        .map_err(|e| {
+            error!(?e, "Hash parse error");
+            AppError::Message(format!("Hash error: {}", e))
+        })?;
+    if Argon2::default()
+        .verify_password(payload.password.as_bytes(), &parsed)
+        .is_err()
+    {
+        return Err(AppError::Unauthorized);
+    }
+    let exp = Utc::now()
+        .checked_add_signed(Duration::hours(24))
+        .expect("valid timestamp")
+        .timestamp() as usize;
+    let claims = Claims { sub: id, role: role.clone(), exp };
+    let secret = crate::config::JWT_SECRET.as_str();
+    let token = encode(
+        &Header::default(),
+        &claims,
+        &EncodingKey::from_secret(secret.as_bytes()),
+    )
+    .map_err(|e| {
+        error!(?e, "Token encoding error");
+        AppError::Message("Token error".into())
+    })?;
+    let mut headers = HeaderMap::new();
+    headers.insert(
+        axum::http::header::SET_COOKIE,
+        format!("auth_token={token}; HttpOnly; Secure; SameSite=Strict; Path=/")
+            .parse()
+            .expect("valid header value"),
+    );
+    Ok((headers, "Login successful"))
+}
+
+pub async fn logout_user() -> (HeaderMap, &'static str) {
+    let mut headers = HeaderMap::new();
+    headers.insert(
+        axum::http::header::SET_COOKIE,
+        "auth_token=deleted; HttpOnly; Path=/; Max-Age=0"
+            .parse()
+            .expect("valid header value"),
+    );
+    (headers, "Logged out")
+}
+
+pub async fn current_user(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, role }: AuthUser,
+) -> AppResult<Json<UserInfo>> {
+    let rec = sqlx::query("SELECT email, server_quota FROM users WHERE id = $1")
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error while fetching user email");
+            AppError::Db(e)
+        })?;
+    let Some(row) = rec else {
+        return Err(AppError::NotFound);
+    };
+    let email: String = row.get("email");
+    let quota: i32 = row.get("server_quota");
+    Ok(Json(UserInfo { id: user_id, email, role, server_quota: quota }))
+}
diff --git a/backend/src/bin/proxy_controller.rs b/backend/src/bin/proxy_controller.rs
new file mode 100644
index 0000000000000000000000000000000000000000..e7ac69362f33a50cd92cda72430010df7cbcffe4
--- /dev/null
+++ b/backend/src/bin/proxy_controller.rs
@@ -0,0 +1,64 @@
+use dotenvy::dotenv;
+use regex::Regex;
+use std::collections::HashMap;
+use std::path::{Path, PathBuf};
+use std::time::SystemTime;
+use tokio::fs;
+use tokio::time::{sleep, Duration};
+
+#[path = "../proxy.rs"]
+mod proxy;
+use proxy::{ensure_tls, reload};
+
+fn conf_dir() -> PathBuf {
+    std::env::var("PROXY_CONF_DIR")
+        .map(PathBuf::from)
+        .unwrap_or_else(|_| PathBuf::from("./proxy_conf"))
+}
+
+#[tokio::main]
+async fn main() -> anyhow::Result<()> {
+    dotenv().ok();
+    let dir = conf_dir();
+    fs::create_dir_all(&dir).await?;
+    let mut mtimes: HashMap<PathBuf, SystemTime> = HashMap::new();
+    let domain_re = Regex::new(r"server_name\s+([^;]+);")?;
+    loop {
+        let mut changed = false;
+        let mut domains = Vec::new();
+        let mut entries = match fs::read_dir(&dir).await {
+            Ok(e) => e,
+            Err(_) => {
+                sleep(Duration::from_secs(10)).await;
+                continue;
+            }
+        };
+        while let Some(entry) = entries.next_entry().await? {
+            let path = entry.path();
+            if path.extension().and_then(|s| s.to_str()) != Some("conf") {
+                continue;
+            }
+            let meta = entry.metadata().await?;
+            let mtime = meta.modified()?;
+            if mtimes.get(&path) != Some(&mtime) {
+                mtimes.insert(path.clone(), mtime);
+                changed = true;
+            }
+            let content = fs::read_to_string(&path).await?;
+            if let Some(caps) = domain_re.captures(&content) {
+                for d in caps[1].split_whitespace() {
+                    domains.push(d.to_string());
+                }
+            }
+        }
+        if changed {
+            for d in &domains {
+                ensure_tls(d).await;
+            }
+            if let Err(e) = reload().await {
+                eprintln!("failed to reload nginx: {e:?}");
+            }
+        }
+        sleep(Duration::from_secs(10)).await;
+    }
+}
diff --git a/backend/src/build.rs b/backend/src/build.rs
new file mode 100644
index 0000000000000000000000000000000000000000..7cf9bafd69d8c6da0388e30b9ee6743db0fd3590
--- /dev/null
+++ b/backend/src/build.rs
@@ -0,0 +1,238 @@
+use regex::Regex;
+use sqlx::PgPool;
+use crate::servers::set_status;
+use std::path::Path;
+use tempfile::tempdir;
+use tokio::fs;
+use bollard::body_full;
+use bollard::image::BuildImageOptions;
+use bollard::Docker;
+use futures_util::StreamExt;
+use bytes::Bytes;
+use tar::Builder as TarBuilder;
+
+#[derive(Clone, Copy)]
+enum LangBuilder {
+    Node,
+    Python,
+    Rust,
+}
+
+fn dockerfile_exposes_8080(content: &str) -> bool {
+    let re = Regex::new(r"(?i)^\s*EXPOSE\s+(\d+)").expect("invalid regex");
+    for line in content.lines() {
+        if let Some(cap) = re.captures(line) {
+            if let Some(port) = cap.get(1) {
+                if port.as_str() == "8080" {
+                    return true;
+                }
+            }
+        }
+    }
+    false
+}
+
+async fn detect_builder(path: &Path) -> Option<LangBuilder> {
+    if fs::metadata(path.join("package.json")).await.is_ok() {
+        return Some(LangBuilder::Node);
+    }
+    if fs::metadata(path.join("requirements.txt")).await.is_ok()
+        || fs::metadata(path.join("pyproject.toml")).await.is_ok()
+    {
+        return Some(LangBuilder::Python);
+    }
+    if fs::metadata(path.join("Cargo.toml")).await.is_ok() {
+        return Some(LangBuilder::Rust);
+    }
+    None
+}
+
+async fn generate_dockerfile(path: &Path, builder: LangBuilder) -> std::io::Result<()> {
+    let contents = match builder {
+        LangBuilder::Node => {
+            "FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nEXPOSE 8080\nCMD [\"npm\", \"start\"]".to_string()
+        }
+        LangBuilder::Python => {
+            "FROM python:3.11\nWORKDIR /app\nCOPY . .\nRUN pip install -r requirements.txt || true\nEXPOSE 8080\nCMD [\"python\", \"main.py\"]".to_string()
+        }
+        LangBuilder::Rust => {
+            "FROM rust:1.75 AS build\nWORKDIR /app\nCOPY . .\nRUN cargo install --path .\nFROM debian:buster-slim\nCOPY --from=build /usr/local/cargo/bin/* /app/\nEXPOSE 8080\nCMD [\"/app/mcp-server\"]".to_string()
+        }
+    };
+    fs::write(path.join("Dockerfile"), contents).await
+}
+
+async fn insert_log(pool: &PgPool, server_id: i32, text: &str) {
+    let _ = sqlx::query("INSERT INTO server_logs (server_id, log_text) VALUES ($1, $2)")
+        .bind(server_id)
+        .bind(text)
+        .execute(pool)
+        .await;
+}
+
+/// Clone a git repository and build a Docker image.
+/// Returns the built image tag on success.
+pub async fn build_from_git(
+    pool: &PgPool,
+    server_id: i32,
+    repo_url: &str,
+    branch: Option<&str>,
+) -> Option<String> {
+    insert_log(pool, server_id, "Cloning repository").await;
+    let tmp = match tempdir() {
+        Ok(t) => t,
+        Err(e) => {
+            tracing::error!(?e, "tempdir failed");
+            set_status(pool, server_id, "error").await;
+            insert_log(pool, server_id, "Failed to create build dir").await;
+            return None;
+        }
+    };
+
+    let repo = repo_url.to_string();
+    let br_opt = branch.map(|s| s.to_string());
+    let clone_path = tmp.path().to_path_buf();
+    if let Err(e) = tokio::task::spawn_blocking(move || {
+        let mut builder = git2::build::RepoBuilder::new();
+        if let Some(ref br) = br_opt {
+            builder.branch(br);
+        }
+        builder.clone(&repo, &clone_path).map(|_| ())
+    })
+    .await
+    .unwrap_or_else(|e| Err(git2::Error::from_str(&e.to_string())))
+    {
+        tracing::error!(?e, "git clone failed");
+        insert_log(pool, server_id, "Git clone failed").await;
+        set_status(pool, server_id, "error").await;
+        return None;
+    }
+
+    // Generate a Dockerfile when none exists using a simple language-specific template
+    let dockerfile = tmp.path().join("Dockerfile");
+    if fs::metadata(&dockerfile).await.is_err() {
+        if let Some(builder) = detect_builder(tmp.path()).await {
+            insert_log(pool, server_id, "No Dockerfile found, generating one").await;
+            if let Err(e) = generate_dockerfile(tmp.path(), builder).await {
+                tracing::error!(?e, "failed to write Dockerfile");
+            }
+        }
+    }
+
+    insert_log(pool, server_id, "Building image").await;
+    let tag = format!("mcp-custom-{server_id}");
+    let docker = match Docker::connect_with_local_defaults() {
+        Ok(d) => d,
+        Err(e) => {
+            tracing::error!(?e, "Failed to connect to Docker");
+            insert_log(pool, server_id, "Docker connection failed").await;
+            set_status(pool, server_id, "error").await;
+            return None;
+        }
+    };
+
+    let ctx_path = tmp.path().to_path_buf();
+    let tar_res = tokio::task::spawn_blocking(move || {
+        let mut builder = TarBuilder::new(Vec::new());
+        builder
+            .append_dir_all(".", &ctx_path)
+            .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e))?;
+        builder.into_inner().map(Bytes::from)
+    })
+    .await
+    .unwrap_or_else(|e| Err(std::io::Error::new(std::io::ErrorKind::Other, e))) ;
+
+    let tar_data = match tar_res {
+        Ok(d) => d,
+        Err(e) => {
+            tracing::error!(?e, "Failed to create tar");
+            insert_log(pool, server_id, "Failed to create build context").await;
+            set_status(pool, server_id, "error").await;
+            return None;
+        }
+    };
+
+    let options = BuildImageOptions::<String> {
+        dockerfile: "Dockerfile".into(),
+        t: tag.clone(),
+        pull: true,
+        nocache: true,
+        rm: true,
+        forcerm: true,
+        ..Default::default()
+    };
+
+    let mut build_stream = docker.build_image(options, None, Some(body_full(tar_data)));
+    while let Some(item) = build_stream.next().await {
+        match item {
+            Ok(output) => {
+                if let Some(msg) = output.stream {
+                    insert_log(pool, server_id, msg.trim()).await;
+                }
+            }
+            Err(e) => {
+                tracing::error!(?e, "docker build error");
+                insert_log(pool, server_id, "Image build failed").await;
+                set_status(pool, server_id, "error").await;
+                return None;
+            }
+        }
+    }
+
+    // Parse Dockerfile for EXPOSE instructions
+    let dockerfile = tmp.path().join("Dockerfile");
+    if let Ok(content) = tokio::fs::read_to_string(&dockerfile).await {
+        if !dockerfile_exposes_8080(&content) {
+            insert_log(pool, server_id, "Warning: no EXPOSE 8080 found").await;
+        }
+    }
+
+    insert_log(pool, server_id, "Image built").await;
+
+    if let Ok(registry) = std::env::var("REGISTRY") {
+        let full_tag = format!("{}/{}", registry, tag);
+        insert_log(pool, server_id, "Pushing image to registry").await;
+        let _ = tokio::process::Command::new("docker")
+            .arg("tag")
+            .arg(&tag)
+            .arg(&full_tag)
+            .status()
+            .await;
+        let _ = tokio::process::Command::new("docker")
+            .arg("push")
+            .arg(&full_tag)
+            .status()
+            .await;
+    }
+    insert_log(pool, server_id, "Cleaning up").await;
+    Some(tag)
+}
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+    use tempfile::tempdir;
+
+    #[tokio::test]
+    async fn detect_builder_works() {
+        let dir = tempdir().unwrap();
+        fs::write(dir.path().join("package.json"), "{}").await.unwrap();
+        assert!(matches!(detect_builder(dir.path()).await, Some(LangBuilder::Node)));
+    }
+
+    #[tokio::test]
+    async fn generates_dockerfile() {
+        let dir = tempdir().unwrap();
+        generate_dockerfile(dir.path(), LangBuilder::Python).await.unwrap();
+        let contents = fs::read_to_string(dir.path().join("Dockerfile")).await.unwrap();
+        assert!(contents.contains("python"));
+    }
+
+    #[test]
+    fn exposes_check() {
+        let dockerfile = "FROM scratch\nEXPOSE 8080";
+        assert!(dockerfile_exposes_8080(dockerfile));
+        let other = "FROM scratch\nEXPOSE 5000";
+        assert!(!dockerfile_exposes_8080(other));
+    }
+}
diff --git a/backend/src/capabilities.rs b/backend/src/capabilities.rs
new file mode 100644
index 0000000000000000000000000000000000000000..2952839de2ab7d63e479b7a8e196606643e2b986
--- /dev/null
+++ b/backend/src/capabilities.rs
@@ -0,0 +1,79 @@
+use crate::extractor::AuthUser;
+use axum::{extract::{Extension, Path}, http::StatusCode, Json};
+use tracing::error;
+use serde::Serialize;
+use sqlx::{PgPool, Row};
+
+#[derive(Serialize)]
+pub struct Capability {
+    pub id: i32,
+    pub name: String,
+    pub description: Option<String>,
+}
+
+pub async fn list_capabilities(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(server_id): Path<i32>,
+) -> Result<Json<Vec<Capability>>, (StatusCode, String)> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error verifying server ownership");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    if rec.is_none() {
+        return Err((StatusCode::NOT_FOUND, "Server not found".into()));
+    }
+    let rows = sqlx::query(
+        "SELECT id, name, description FROM server_capabilities WHERE server_id = $1 ORDER BY id",
+    )
+    .bind(server_id)
+    .fetch_all(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error fetching capabilities");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    let caps = rows
+        .into_iter()
+        .map(|r| Capability {
+            id: r.get("id"),
+            name: r.get("name"),
+            description: r.try_get("description").ok(),
+        })
+        .collect();
+    Ok(Json(caps))
+}
+
+pub async fn sync_capabilities(
+    pool: &PgPool,
+    server_id: i32,
+    manifest: &serde_json::Value,
+) {
+    if let Some(caps) = manifest.get("capabilities").and_then(|v| v.as_array()) {
+        if let Ok(mut tx) = pool.begin().await {
+            let _ = sqlx::query("DELETE FROM server_capabilities WHERE server_id = $1")
+                .bind(server_id)
+                .execute(&mut *tx)
+                .await;
+            for cap in caps {
+                if let Some(name) = cap.get("name").and_then(|v| v.as_str()) {
+                    let desc = cap.get("description").and_then(|v| v.as_str());
+                    let _ = sqlx::query(
+                        "INSERT INTO server_capabilities (server_id, name, description) VALUES ($1, $2, $3)",
+                    )
+                    .bind(server_id)
+                    .bind(name)
+                    .bind(desc)
+                    .execute(&mut *tx)
+                    .await;
+                }
+            }
+            let _ = tx.commit().await;
+        }
+    }
+}
diff --git a/backend/src/config.rs b/backend/src/config.rs
new file mode 100644
index 0000000000000000000000000000000000000000..76a25170142cae0b3d37857eada4a1e1f93ade69
--- /dev/null
+++ b/backend/src/config.rs
@@ -0,0 +1,17 @@
+use once_cell::sync::Lazy;
+
+/// Secret used for JWT signing. Must be set via the `JWT_SECRET` env variable.
+pub static JWT_SECRET: Lazy<String> =
+    Lazy::new(|| std::env::var("JWT_SECRET").expect("JWT_SECRET must be set"));
+
+/// Container runtime backend. Defaults to `docker`.
+pub static CONTAINER_RUNTIME: Lazy<String> =
+    Lazy::new(|| std::env::var("CONTAINER_RUNTIME").unwrap_or_else(|_| "docker".to_string()));
+
+/// Namespace used by the Kubernetes runtime. Defaults to `default`.
+pub static K8S_NAMESPACE: Lazy<String> =
+    Lazy::new(|| std::env::var("K8S_NAMESPACE").unwrap_or_else(|_| "default".to_string()));
+
+/// Service account name used by the Kubernetes runtime. Defaults to `default`.
+pub static K8S_SERVICE_ACCOUNT: Lazy<String> =
+    Lazy::new(|| std::env::var("K8S_SERVICE_ACCOUNT").unwrap_or_else(|_| "default".to_string()));
diff --git a/backend/src/docker.rs b/backend/src/docker.rs
new file mode 100644
index 0000000000000000000000000000000000000000..0b52be5b236168a259cb9ce8fff9f4c147fb4de3
--- /dev/null
+++ b/backend/src/docker.rs
@@ -0,0 +1,533 @@
+use crate::servers::{add_metric, set_status};
+use crate::proxy;
+use crate::capabilities;
+use bollard::container::{
+    Config as ContainerConfig, CreateContainerOptions, RemoveContainerOptions,
+    StartContainerOptions, StopContainerOptions,
+};
+use bollard::models::HostConfig;
+use bollard::Docker;
+use serde_json::Value;
+use sqlx::{PgPool, Row};
+use tokio::sync::mpsc::{self, Receiver};
+use crate::build;
+use reqwest;
+
+async fn insert_log(pool: &PgPool, server_id: i32, text: &str) {
+    let _ = sqlx::query("INSERT INTO server_logs (server_id, log_text) VALUES ($1, $2)")
+        .bind(server_id)
+        .bind(text)
+        .execute(pool)
+        .await;
+}
+
+/// Spawn a background task to launch an MCP server container.
+/// Updates the `mcp_servers` table with running/error status.
+pub fn spawn_server_task(
+    server_id: i32,
+    server_type: String,
+    config: Option<Value>,
+    api_key: String,
+    use_gpu: bool,
+    pool: PgPool,
+) {
+    tokio::spawn(async move {
+        let cfg_clone = config.clone();
+        let branch = cfg_clone
+            .as_ref()
+            .and_then(|v| v.get("branch"))
+            .and_then(|v| v.as_str());
+        let docker = match Docker::connect_with_local_defaults() {
+            Ok(d) => d,
+            Err(e) => {
+                tracing::error!("Failed to connect to Docker: {e:?}");
+                set_status(&pool, server_id, "error").await;
+                return;
+            }
+        };
+        // ensure any old container is removed so redeployments succeed
+        let name = format!("mcp-server-{server_id}");
+        let _ = docker
+            .stop_container(&name, Some(StopContainerOptions { t: 5 }))
+            .await;
+        let _ = docker
+            .remove_container(
+                &name,
+                Some(RemoveContainerOptions {
+                    force: true,
+                    ..Default::default()
+                }),
+            )
+            .await;
+
+        let mut image = match server_type.as_str() {
+            "PostgreSQL" => "ghcr.io/anycontext/postgres-mcp:latest".to_string(),
+            "Slack" => "ghcr.io/anycontext/slack-mcp:latest".to_string(),
+            "PDF Parser" => "ghcr.io/anycontext/pdf-mcp:latest".to_string(),
+            "Notion" => "ghcr.io/anycontext/notion-mcp:latest".to_string(),
+            "Router" => "ghcr.io/anycontext/router-mcp:latest".to_string(),
+            "Custom" => config
+                .as_ref()
+                .and_then(|v| v.get("image"))
+                .and_then(|v| v.as_str())
+                .unwrap_or("ghcr.io/anycontext/default-mcp:latest")
+                .to_string(),
+            _ => "ghcr.io/anycontext/default-mcp:latest".to_string(),
+        };
+
+        // Build from git repo if provided
+        if let Some(repo) = cfg_clone
+            .as_ref()
+            .and_then(|v| v.get("repo_url"))
+            .and_then(|v| v.as_str())
+        {
+            set_status(&pool, server_id, "cloning").await;
+            if let Some(tag) = build::build_from_git(&pool, server_id, repo, branch).await {
+                image = tag;
+            } else {
+                return;
+            }
+        }
+
+        let container_name = format!("mcp-server-{server_id}");
+        let create_opts = CreateContainerOptions {
+            name: container_name.as_str(),
+            platform: None,
+        };
+
+        let mut env_vars = vec![format!("MCP_API_KEY={}", api_key)];
+        if let Some(cfg) = config.as_ref() {
+            if let Some(obj) = cfg.as_object() {
+                for (k, v) in obj {
+                    if k == "image" || k == "repo_url" {
+                        continue;
+                    }
+                    env_vars.push(format!("CFG_{}={}", k.to_uppercase(), v));
+                }
+            }
+        }
+
+        // Attach environment variables for any service integrations
+        if let Ok(rows) = sqlx::query(
+            "SELECT service_type, config FROM service_integrations WHERE server_id = $1",
+        )
+        .bind(server_id)
+        .fetch_all(&pool)
+        .await
+        {
+            for row in rows {
+                let service_type: String = row.get("service_type");
+                let cfg: Option<serde_json::Value> = row.try_get("config").ok();
+                match service_type.as_str() {
+                    "Redis" => {
+                        if let Some(obj) = cfg.as_ref().and_then(|v| v.as_object()) {
+                            if let Some(url) = obj.get("url").and_then(|v| v.as_str()) {
+                                env_vars.push(format!("REDIS_URL={}", url));
+                            }
+                        }
+                    }
+                    "S3" => {
+                        if let Some(obj) = cfg.as_ref().and_then(|v| v.as_object()) {
+                            if let Some(bucket) = obj.get("bucket").and_then(|v| v.as_str()) {
+                                env_vars.push(format!("S3_BUCKET={}", bucket));
+                            }
+                            if let Some(region) = obj.get("region").and_then(|v| v.as_str()) {
+                                env_vars.push(format!("S3_REGION={}", region));
+                            }
+                        }
+                    }
+                    _ => {}
+                }
+            }
+        }
+
+        // Inject user-defined secrets
+        if let Ok(rows) = sqlx::query(
+            "SELECT name, value FROM server_secrets WHERE server_id = $1",
+        )
+        .bind(server_id)
+        .fetch_all(&pool)
+        .await
+        {
+            for row in rows {
+                let name: String = row.get("name");
+                let val: String = row.get("value");
+                let value = if let Some(path) = val.strip_prefix("vault:") {
+                    if let Some(vault) = crate::vault::VaultClient::from_env() {
+                        match vault.read_secret(path).await {
+                            Ok(v) => v,
+                            Err(e) => {
+                                tracing::error!(?e, "vault read failed");
+                                continue;
+                            }
+                        }
+                    } else {
+                        tracing::warn!("vault not configured");
+                        continue;
+                    }
+                } else {
+                    match sqlx::query("SELECT pgp_sym_decrypt($1::bytea, $2) as v")
+                        .bind(val)
+                        .bind(&crate::secrets::encryption_key())
+                        .fetch_one(&pool)
+                        .await
+                    {
+                        Ok(r) => r.get::<String, _>("v"),
+                        Err(e) => {
+                            tracing::error!(?e, "secret decrypt failed");
+                            continue;
+                        }
+                    }
+                };
+                env_vars.push(format!("{}={}", name.to_uppercase(), value));
+            }
+        }
+
+        // Prepare storage directory and mount for persistent files
+        let storage_dir = format!("storage/{server_id}");
+        if tokio::fs::create_dir_all(&storage_dir).await.is_err() {
+            tracing::warn!("failed to create storage dir for server {server_id}");
+        }
+        let bind_path = match std::fs::canonicalize(&storage_dir) {
+            Ok(p) => p,
+            Err(_) => std::path::PathBuf::from(&storage_dir),
+        };
+        let volume = format!("{}:/data", bind_path.display());
+
+        let cpu_limit = cfg_clone
+            .as_ref()
+            .and_then(|v| v.get("cpu_limit"))
+            .and_then(|v| v.as_f64());
+        let memory_limit = cfg_clone
+            .as_ref()
+            .and_then(|v| v.get("memory_limit"))
+            .and_then(|v| v.as_u64());
+
+        let host_cfg = HostConfig {
+            auto_remove: Some(true),
+            binds: Some(vec![volume]),
+            device_requests: if use_gpu {
+                Some(vec![bollard::models::DeviceRequest {
+                    driver: Some("nvidia".into()),
+                    count: Some(-1),
+                    capabilities: Some(vec![vec!["gpu".into()]]),
+                    ..Default::default()
+                }])
+            } else {
+                None
+            },
+            nano_cpus: cpu_limit.map(|c| (c * 1_000_000_000.0) as i64),
+            memory: memory_limit.map(|m| (m * 1024 * 1024) as i64),
+            ..Default::default()
+        };
+        let container_config = ContainerConfig::<String> {
+            image: Some(image.into()),
+            env: Some(env_vars),
+            host_config: Some(host_cfg),
+            ..Default::default()
+        };
+
+        match docker
+            .create_container(Some(create_opts), container_config)
+            .await
+        {
+            Ok(container) => {
+                if docker
+                    .start_container(&container.id, None::<StartContainerOptions<String>>)
+                    .await
+                    .is_ok()
+                {
+                    set_status(&pool, server_id, "running").await;
+                    let _ = add_metric(&pool, server_id, "start", None).await;
+                    insert_log(&pool, server_id, "Container started").await;
+                    proxy::rebuild_for_server(&pool, server_id).await;
+                    if let Ok(resp) = reqwest::get(
+                        format!("http://mcp-server-{server_id}:8080/.well-known/mcp.json"),
+                    )
+                    .await
+                    {
+                        if let Ok(json) = resp.json::<serde_json::Value>().await {
+                            let _ = sqlx::query("UPDATE mcp_servers SET manifest = $1 WHERE id = $2")
+                                .bind(&json)
+                                .bind(server_id)
+                                .execute(&pool)
+                                .await;
+                            capabilities::sync_capabilities(&pool, server_id, &json).await;
+                        }
+                    }
+                    tracing::info!("server {server_id} started");
+                    monitor_server_task(
+                        server_id,
+                        server_type.clone(),
+                        config.clone(),
+                        api_key.clone(),
+                        use_gpu,
+                        pool.clone(),
+                    );
+                } else {
+                    tracing::error!("failed to start container {server_id}");
+                    set_status(&pool, server_id, "error").await;
+                    insert_log(&pool, server_id, "Failed to start container").await;
+                }
+            }
+            Err(e) => {
+                tracing::error!("container creation failed: {e:?}");
+                set_status(&pool, server_id, "error").await;
+                insert_log(&pool, server_id, "Container creation failed").await;
+            }
+        }
+    });
+}
+
+/// Stop the container for the specified server ID.
+pub fn stop_server_task(server_id: i32, pool: PgPool) {
+    tokio::spawn(async move {
+        let docker = match Docker::connect_with_local_defaults() {
+            Ok(d) => d,
+            Err(e) => {
+                tracing::error!("Failed to connect to Docker: {e:?}");
+                return;
+            }
+        };
+
+        let name = format!("mcp-server-{server_id}");
+        let _ = docker
+            .stop_container(&name, Some(StopContainerOptions { t: 5 }))
+            .await;
+
+        set_status(&pool, server_id, "stopped").await;
+        let _ = add_metric(&pool, server_id, "stop", None).await;
+        insert_log(&pool, server_id, "Container stopped").await;
+        proxy::rebuild_for_server(&pool, server_id).await;
+        tracing::info!("server {server_id} stopped");
+    });
+}
+
+/// Remove the container and delete the database record.
+pub fn delete_server_task(server_id: i32, pool: PgPool) {
+    tokio::spawn(async move {
+        let docker = match Docker::connect_with_local_defaults() {
+            Ok(d) => d,
+            Err(e) => {
+                tracing::error!("Failed to connect to Docker: {e:?}");
+                return;
+            }
+        };
+
+        let name = format!("mcp-server-{server_id}");
+        let _ = docker
+            .stop_container(&name, Some(StopContainerOptions { t: 5 }))
+            .await;
+        let _ = docker
+            .remove_container(
+                &name,
+                Some(RemoveContainerOptions {
+                    force: true,
+                    ..Default::default()
+                }),
+            )
+            .await;
+
+        let _ = sqlx::query("DELETE FROM mcp_servers WHERE id = $1")
+            .bind(server_id)
+            .execute(&pool)
+            .await;
+        let _ = add_metric(&pool, server_id, "delete", None).await;
+        let _ = tokio::fs::remove_dir_all(format!("storage/{server_id}")).await;
+        insert_log(&pool, server_id, "Server deleted").await;
+        proxy::rebuild_for_server(&pool, server_id).await;
+        tracing::info!("server {server_id} deleted");
+    });
+}
+
+/// Spawn a simple Chroma vector database container.
+pub fn spawn_vector_db_task(id: i32, db_type: String, pool: PgPool) {
+    tokio::spawn(async move {
+        let docker = match Docker::connect_with_local_defaults() {
+            Ok(d) => d,
+            Err(e) => {
+                tracing::error!(?e, "Failed to connect to Docker");
+                return;
+            }
+        };
+        let name = format!("mcp-vectordb-{id}");
+        let _ = docker
+            .remove_container(
+                &name,
+                Some(RemoveContainerOptions { force: true, ..Default::default() }),
+            )
+            .await;
+        let image = match db_type.as_str() {
+            "chroma" => "ghcr.io/chroma-core/chroma:latest",
+            _ => "ghcr.io/chroma-core/chroma:latest",
+        };
+        let create_opts = CreateContainerOptions { name: &name, platform: None };
+        let host_cfg = HostConfig {
+            auto_remove: Some(true),
+            ..Default::default()
+        };
+        let container_cfg = ContainerConfig::<String> {
+            image: Some(image.into()),
+            host_config: Some(host_cfg),
+            ..Default::default()
+        };
+        match docker.create_container(Some(create_opts), container_cfg).await {
+            Ok(info) => {
+                if docker.start_container(&info.id, None::<StartContainerOptions<String>>).await.is_ok() {
+                    let url = format!("http://{name}:8000");
+                    let _ = sqlx::query("UPDATE vector_dbs SET container_id = $1, url = $2 WHERE id = $3")
+                        .bind(&info.id)
+                        .bind(&url)
+                        .bind(id)
+                        .execute(&pool)
+                        .await;
+                } else {
+                    tracing::error!("failed to start vector db container {id}");
+                }
+            }
+            Err(e) => {
+                tracing::error!(?e, "failed to create vector db container");
+            }
+        }
+    });
+}
+
+pub fn delete_vector_db_task(id: i32, pool: PgPool) {
+    tokio::spawn(async move {
+        let docker = match Docker::connect_with_local_defaults() {
+            Ok(d) => d,
+            Err(e) => {
+                tracing::error!(?e, "Failed to connect to Docker");
+                return;
+            }
+        };
+        let name = format!("mcp-vectordb-{id}");
+        let _ = docker
+            .remove_container(&name, Some(RemoveContainerOptions { force: true, ..Default::default() }))
+            .await;
+        let _ = sqlx::query("DELETE FROM vector_dbs WHERE id = $1")
+            .bind(id)
+            .execute(&pool)
+            .await;
+        let _ = tokio::fs::remove_dir_all(format!("storage/vector-{id}")).await;
+    });
+}
+
+/// Fetch the latest logs for a container.
+pub async fn fetch_logs(server_id: i32) -> Result<String, bollard::errors::Error> {
+    use bollard::container::LogsOptions;
+    use futures_util::StreamExt;
+
+    let docker = Docker::connect_with_local_defaults()?;
+    let name = format!("mcp-server-{server_id}");
+    let mut stream = docker.logs(
+        &name,
+        Some(LogsOptions::<String> {
+            stdout: true,
+            stderr: true,
+            follow: false,
+            timestamps: false,
+            tail: "100".into(),
+            ..Default::default()
+        }),
+    );
+
+    let mut out = String::new();
+    while let Some(item) = stream.next().await {
+        if let Ok(chunk) = item {
+            out.push_str(&chunk.to_string());
+        }
+    }
+    Ok(out)
+}
+
+/// Start streaming logs for a container. Returns a channel receiver with lines.
+pub fn stream_logs_task(server_id: i32, pool: PgPool) -> Option<Receiver<String>> {
+    let (tx, rx) = mpsc::channel(16);
+    let docker = match Docker::connect_with_local_defaults() {
+        Ok(d) => d,
+        Err(e) => {
+            tracing::error!("Failed to connect to Docker: {e:?}");
+            return None;
+        }
+    };
+
+    tokio::spawn(async move {
+        use bollard::container::LogsOptions;
+        use futures_util::StreamExt;
+
+        let mut stream = docker.logs(
+            &format!("mcp-server-{server_id}"),
+            Some(LogsOptions::<String> {
+                stdout: true,
+                stderr: true,
+                follow: true,
+                timestamps: false,
+                tail: "0".into(),
+                ..Default::default()
+            }),
+        );
+
+        while let Some(item) = stream.next().await {
+            if let Ok(chunk) = item {
+                let line = chunk.to_string();
+                let _ = tx.send(line.clone()).await;
+                let _ =
+                    sqlx::query("INSERT INTO server_logs (server_id, log_text) VALUES ($1, $2)")
+                        .bind(server_id)
+                        .bind(&line)
+                        .execute(&pool)
+                        .await;
+            }
+        }
+    });
+
+    Some(rx)
+}
+
+/// Monitor a running container and restart it if it exits unexpectedly.
+pub fn monitor_server_task(
+    server_id: i32,
+    server_type: String,
+    config: Option<Value>,
+    api_key: String,
+    use_gpu: bool,
+    pool: PgPool,
+) {
+    tokio::spawn(async move {
+        use bollard::container::InspectContainerOptions;
+        use std::time::Duration;
+        let docker = match Docker::connect_with_local_defaults() {
+            Ok(d) => d,
+            Err(e) => {
+                tracing::error!("Failed to connect to Docker: {e:?}");
+                return;
+            }
+        };
+        let name = format!("mcp-server-{server_id}");
+        loop {
+            tokio::time::sleep(Duration::from_secs(30)).await;
+            let running = docker
+                .inspect_container(&name, None::<InspectContainerOptions>)
+                .await
+                .ok()
+                .and_then(|info| info.state)
+                .and_then(|s| s.running)
+                .unwrap_or(false);
+            if !running {
+                insert_log(&pool, server_id, "Container exited; restarting").await;
+                set_status(&pool, server_id, "restarting").await;
+                let _ = add_metric(&pool, server_id, "restart", None).await;
+                spawn_server_task(
+                    server_id,
+                    server_type.clone(),
+                    config.clone(),
+                    api_key.clone(),
+                    use_gpu,
+                    pool.clone(),
+                );
+                break;
+            }
+        }
+    });
+}
diff --git a/backend/src/domains.rs b/backend/src/domains.rs
new file mode 100644
index 0000000000000000000000000000000000000000..d4e0cc51cde93e31f6eb56ada63f9df6e133d680
--- /dev/null
+++ b/backend/src/domains.rs
@@ -0,0 +1,130 @@
+use crate::{extractor::AuthUser, proxy};
+use axum::{
+    extract::{Extension, Path},
+    http::StatusCode,
+    Json,
+};
+use tracing::error;
+use serde::{Deserialize, Serialize};
+use sqlx::{PgPool, Row};
+
+#[derive(Serialize)]
+pub struct Domain {
+    pub id: i32,
+    pub domain: String,
+    pub created_at: chrono::DateTime<chrono::Utc>,
+}
+
+#[derive(Deserialize)]
+pub struct CreateDomain {
+    pub domain: String,
+}
+
+pub async fn list_domains(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(server_id): Path<i32>,
+) -> Result<Json<Vec<Domain>>, (StatusCode, String)> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error while verifying server owner");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    if rec.is_none() {
+        return Err((StatusCode::NOT_FOUND, "Server not found".into()));
+    }
+    let rows = sqlx::query(
+        "SELECT id, domain, created_at FROM custom_domains WHERE server_id = $1 ORDER BY id",
+    )
+    .bind(server_id)
+    .fetch_all(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error fetching domains");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    let domains = rows
+        .into_iter()
+        .map(|r| Domain {
+            id: r.get("id"),
+            domain: r.get("domain"),
+            created_at: r.get("created_at"),
+        })
+        .collect();
+    Ok(Json(domains))
+}
+
+pub async fn create_domain(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(server_id): Path<i32>,
+    Json(payload): Json<CreateDomain>,
+) -> Result<StatusCode, (StatusCode, String)> {
+    if payload.domain.trim().is_empty() {
+        return Err((StatusCode::BAD_REQUEST, "Domain required".into()));
+    }
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error while verifying server owner");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    if rec.is_none() {
+        return Err((StatusCode::NOT_FOUND, "Server not found".into()));
+    }
+    sqlx::query(
+        "INSERT INTO custom_domains (server_id, domain) VALUES ($1, $2)",
+    )
+    .bind(server_id)
+    .bind(&payload.domain)
+    .execute(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error inserting domain");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    proxy::rebuild_for_server(&pool, server_id).await;
+    Ok(StatusCode::CREATED)
+}
+
+pub async fn delete_domain(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path((server_id, domain_id)): Path<(i32, i32)>,
+) -> Result<StatusCode, (StatusCode, String)> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error while verifying server owner");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    if rec.is_none() {
+        return Err((StatusCode::NOT_FOUND, "Server not found".into()));
+    }
+    let result = sqlx::query(
+        "DELETE FROM custom_domains WHERE id = $1 AND server_id = $2",
+    )
+    .bind(domain_id)
+    .bind(server_id)
+    .execute(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error deleting domain");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    if result.rows_affected() == 0 {
+        return Err((StatusCode::NOT_FOUND, "Domain not found".into()));
+    }
+    proxy::rebuild_for_server(&pool, server_id).await;
+    Ok(StatusCode::NO_CONTENT)
+}
diff --git a/backend/src/error.rs b/backend/src/error.rs
new file mode 100644
index 0000000000000000000000000000000000000000..1906d808528b7d0092644e22c19f7e96e92deb2d
--- /dev/null
+++ b/backend/src/error.rs
@@ -0,0 +1,43 @@
+use axum::{http::StatusCode, response::{IntoResponse, Response}};
+use thiserror::Error;
+
+#[derive(Debug, Error)]
+pub enum AppError {
+    #[error("database error: {0}")]
+    Db(#[from] sqlx::Error),
+    #[error("docker error: {0}")]
+    Docker(#[from] bollard::errors::Error),
+    #[error("vault error: {0}")]
+    Vault(#[from] reqwest::Error),
+    #[error("not found")]
+    NotFound,
+    #[error("unauthorized")]
+    Unauthorized,
+    #[error("forbidden")]
+    Forbidden,
+    #[error("bad request: {0}")]
+    BadRequest(String),
+    #[error("bad gateway: {0}")]
+    BadGateway(String),
+    #[error("{0}")]
+    Message(String),
+}
+
+impl IntoResponse for AppError {
+    fn into_response(self) -> Response {
+        let status = match self {
+            AppError::NotFound => StatusCode::NOT_FOUND,
+            AppError::Unauthorized => StatusCode::UNAUTHORIZED,
+            AppError::Forbidden => StatusCode::FORBIDDEN,
+            AppError::BadRequest(_) => StatusCode::BAD_REQUEST,
+            AppError::BadGateway(_) => StatusCode::BAD_GATEWAY,
+            AppError::Db(_) | AppError::Docker(_) | AppError::Vault(_) | AppError::Message(_) => {
+                StatusCode::INTERNAL_SERVER_ERROR
+            }
+        };
+        tracing::error!(?self);
+        (status, self.to_string()).into_response()
+    }
+}
+
+pub type AppResult<T> = Result<T, AppError>;
diff --git a/backend/src/evaluation.rs b/backend/src/evaluation.rs
new file mode 100644
index 0000000000000000000000000000000000000000..d17486383fc4e56871192d571bcd7be3f5cfc280
--- /dev/null
+++ b/backend/src/evaluation.rs
@@ -0,0 +1,223 @@
+use axum::{extract::{Extension, Path}, Json};
+use serde::{Deserialize, Serialize};
+use sqlx::{PgPool, Row};
+use crate::extractor::AuthUser;
+use crate::error::{AppError, AppResult};
+use strsim::jaro_winkler;
+
+#[derive(Serialize)]
+pub struct EvaluationTest {
+    pub id: i32,
+    pub question: String,
+    pub expected_answer: String,
+    pub created_at: chrono::DateTime<chrono::Utc>,
+}
+
+#[derive(Deserialize)]
+pub struct CreateTest {
+    pub question: String,
+    pub expected_answer: String,
+}
+
+#[derive(Serialize)]
+pub struct EvaluationResult {
+    pub id: i32,
+    pub test_id: i32,
+    pub response: String,
+    pub score: f64,
+    pub created_at: chrono::DateTime<chrono::Utc>,
+}
+
+pub async fn list_tests(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(server_id): Path<i32>,
+) -> AppResult<Json<Vec<EvaluationTest>>> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id=$1 AND owner_id=$2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await?;
+    if rec.is_none() { return Err(AppError::NotFound); }
+    let rows = sqlx::query(
+        "SELECT id, question, expected_answer, created_at FROM evaluation_tests WHERE server_id=$1 ORDER BY id"
+    )
+    .bind(server_id)
+    .fetch_all(&pool)
+    .await?;
+    let list = rows.into_iter().map(|r| EvaluationTest {
+        id: r.get("id"),
+        question: r.get("question"),
+        expected_answer: r.get("expected_answer"),
+        created_at: r.get("created_at"),
+    }).collect();
+    Ok(Json(list))
+}
+
+pub async fn create_test(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(server_id): Path<i32>,
+    Json(payload): Json<CreateTest>,
+) -> AppResult<Json<EvaluationTest>> {
+    let rec = sqlx::query(
+        "INSERT INTO evaluation_tests (server_id, question, expected_answer) \
+         SELECT id, $2, $3 FROM mcp_servers WHERE id=$1 AND owner_id=$4 RETURNING id, created_at"
+    )
+    .bind(server_id)
+    .bind(&payload.question)
+    .bind(&payload.expected_answer)
+    .bind(user_id)
+    .fetch_optional(&pool)
+    .await?;
+    let rec = rec.ok_or(AppError::NotFound)?;
+    Ok(Json(EvaluationTest {
+        id: rec.get("id"),
+        question: payload.question,
+        expected_answer: payload.expected_answer,
+        created_at: rec.get("created_at"),
+    }))
+}
+
+pub async fn list_results(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(server_id): Path<i32>,
+) -> AppResult<Json<Vec<EvaluationResult>>> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id=$1 AND owner_id=$2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await?;
+    if rec.is_none() { return Err(AppError::NotFound); }
+    let rows = sqlx::query(
+        "SELECT r.id, r.test_id, r.response, r.score, r.created_at FROM evaluation_results r JOIN evaluation_tests t ON r.test_id=t.id WHERE t.server_id=$1 ORDER BY r.id DESC LIMIT 50"
+    )
+    .bind(server_id)
+    .fetch_all(&pool)
+    .await?;
+    let list = rows.into_iter().map(|r| EvaluationResult {
+        id: r.get("id"),
+        test_id: r.get("test_id"),
+        response: r.get("response"),
+        score: r.get("score"),
+        created_at: r.get("created_at"),
+    }).collect();
+    Ok(Json(list))
+}
+
+#[derive(Serialize)]
+pub struct RunSummary { pub results: Vec<EvaluationResult> }
+
+pub async fn run_tests(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(server_id): Path<i32>,
+) -> AppResult<Json<RunSummary>> {
+    let row = sqlx::query("SELECT api_key FROM mcp_servers WHERE id=$1 AND owner_id=$2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await?;
+    let Some(row) = row else { return Err(AppError::NotFound); };
+    let api_key: String = row.get("api_key");
+    let tests = sqlx::query("SELECT id, question, expected_answer FROM evaluation_tests WHERE server_id=$1")
+        .bind(server_id)
+        .fetch_all(&pool)
+        .await?;
+    let mut results = Vec::new();
+    for row in tests {
+        let test_id: i32 = row.get("id");
+        let question: String = row.get("question");
+        let expected: String = row.get("expected_answer");
+        let input = serde_json::json!({"question": question});
+        let client = reqwest::Client::new();
+        let resp_text = match client
+            .post(format!("http://mcp-server-{server_id}:8080/invoke"))
+            .header("Authorization", format!("Bearer {}", api_key))
+            .json(&input)
+            .send()
+            .await
+        {
+            Ok(resp) => resp.text().await.unwrap_or_default(),
+            Err(_) => String::new(),
+        };
+        let score = jaro_winkler(&expected, &resp_text);
+        let rec = sqlx::query(
+            "INSERT INTO evaluation_results (test_id, response, score) VALUES ($1,$2,$3) RETURNING id, created_at"
+        )
+        .bind(test_id)
+        .bind(&resp_text)
+        .bind(score)
+        .fetch_one(&pool)
+        .await?;
+        results.push(EvaluationResult {
+            id: rec.get("id"),
+            test_id,
+            response: resp_text,
+            score,
+            created_at: rec.get("created_at"),
+        });
+    }
+    Ok(Json(RunSummary { results }))
+}
+
+pub async fn list_all_results(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+) -> AppResult<Json<Vec<(String, String, f64, chrono::DateTime<chrono::Utc>)>>> {
+    let rows = sqlx::query(
+        "SELECT s.name, t.question, r.score, r.created_at \
+         FROM evaluation_results r \
+         JOIN evaluation_tests t ON r.test_id=t.id \
+         JOIN mcp_servers s ON t.server_id=s.id \
+         WHERE s.owner_id=$1 ORDER BY r.created_at DESC LIMIT 50"
+    )
+    .bind(user_id)
+    .fetch_all(&pool)
+    .await?;
+    let list = rows
+        .into_iter()
+        .map(|r| {
+            (
+                r.get::<String, _>("name"),
+                r.get::<String, _>("question"),
+                r.get::<f64, _>("score"),
+                r.get::<chrono::DateTime<chrono::Utc>, _>("created_at"),
+            )
+        })
+        .collect();
+    Ok(Json(list))
+}
+
+#[derive(Serialize)]
+pub struct ServerScore {
+    pub server: String,
+    pub average_score: f64,
+    pub runs: i64,
+}
+
+pub async fn scores_summary(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+) -> AppResult<Json<Vec<ServerScore>>> {
+    let rows = sqlx::query(
+        "SELECT s.name, AVG(r.score) AS avg_score, COUNT(r.id) AS runs \
+         FROM evaluation_results r \
+         JOIN evaluation_tests t ON r.test_id=t.id \
+         JOIN mcp_servers s ON t.server_id=s.id \
+         WHERE s.owner_id=$1 GROUP BY s.name ORDER BY avg_score DESC"
+    )
+    .bind(user_id)
+    .fetch_all(&pool)
+    .await?;
+    let list = rows
+        .into_iter()
+        .map(|r| ServerScore {
+            server: r.get("name"),
+            average_score: r.get("avg_score"),
+            runs: r.get("runs"),
+        })
+        .collect();
+    Ok(Json(list))
+}
diff --git a/backend/src/extractor.rs b/backend/src/extractor.rs
new file mode 100644
index 0000000000000000000000000000000000000000..84e9cea3cb1167d3ccff8fad735f91f7e7bd8a40
--- /dev/null
+++ b/backend/src/extractor.rs
@@ -0,0 +1,96 @@
+use axum::async_trait;
+use axum::{
+    extract::FromRequestParts,
+    http::{request::Parts, StatusCode},
+};
+use jsonwebtoken::{decode, DecodingKey, Validation};
+use serde::Deserialize;
+
+#[derive(Deserialize)]
+struct Claims {
+    sub: i32,
+    role: String,
+    #[allow(dead_code)]
+    exp: usize,
+}
+
+pub struct AuthUser {
+    pub user_id: i32,
+    pub role: String,
+}
+
+#[async_trait]
+impl<S> FromRequestParts<S> for AuthUser
+where
+    S: Send + Sync,
+{
+    type Rejection = (StatusCode, String);
+
+    async fn from_request_parts(parts: &mut Parts, _state: &S) -> Result<Self, Self::Rejection> {
+        let token_opt = if let Some(cookie_header) = parts.headers.get(axum::http::header::COOKIE) {
+            let cookies = cookie_header.to_str().unwrap_or("");
+            cookies.split(';').find_map(|c| {
+                let c = c.trim();
+                c.strip_prefix("auth_token=").map(|s| s.to_string())
+            })
+        } else if let Some(authz) = parts.headers.get(axum::http::header::AUTHORIZATION) {
+            authz
+                .to_str()
+                .ok()
+                .and_then(|s| s.strip_prefix("Bearer ").map(|s| s.to_string()))
+        } else {
+            None
+        };
+        let token = token_opt.ok_or((StatusCode::UNAUTHORIZED, "Missing token".into()))?;
+        let secret = crate::config::JWT_SECRET.as_str();
+        let decoded = decode::<Claims>(
+            &token,
+            &DecodingKey::from_secret(secret.as_bytes()),
+            &Validation::default(),
+        )
+        .map_err(|_| (StatusCode::UNAUTHORIZED, "Invalid token".into()))?;
+        Ok(AuthUser {
+            user_id: decoded.claims.sub,
+            role: decoded.claims.role,
+        })
+    }
+}
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+    use axum::{http::Request, RequestPartsExt};
+    use jsonwebtoken::{encode, EncodingKey, Header};
+
+    #[tokio::test]
+    async fn token_parsed_from_header() {
+        let claims = serde_json::json!({"sub": 7, "role": "user", "exp": 9999999999u64});
+        let token = encode(
+            &Header::default(),
+            &claims,
+            &EncodingKey::from_secret(b"secret"),
+        )
+        .unwrap();
+        std::env::set_var("JWT_SECRET", "secret");
+        let request = Request::builder()
+            .header("Authorization", format!("Bearer {}", token))
+            .body(axum::body::Body::empty())
+            .unwrap();
+        let mut parts = request.into_parts().0;
+        let user = AuthUser::from_request_parts(&mut parts, &()).await.unwrap();
+        assert_eq!(user.user_id, 7);
+        assert_eq!(user.role, "user");
+    }
+
+    #[tokio::test]
+    async fn invalid_token_rejected() {
+        std::env::set_var("JWT_SECRET", "secret");
+        let request = Request::builder()
+            .header("Authorization", "Bearer invalid")
+            .body(axum::body::Body::empty())
+            .unwrap();
+        let mut parts = request.into_parts().0;
+        let res = AuthUser::from_request_parts(&mut parts, &()).await;
+        assert!(res.is_err());
+    }
+}
diff --git a/backend/src/file_store.rs b/backend/src/file_store.rs
new file mode 100644
index 0000000000000000000000000000000000000000..eae7f9e10dfd261010f4aaf6ac2097de0e12e40c
--- /dev/null
+++ b/backend/src/file_store.rs
@@ -0,0 +1,134 @@
+use axum::{extract::{Multipart, Path, Extension}, http::{StatusCode, HeaderMap, header}, Json, response::IntoResponse};
+use serde::Serialize;
+use sqlx::{PgPool, Row};
+use tokio::{fs, io::AsyncWriteExt};
+use tracing::error;
+
+#[derive(Serialize)]
+pub struct FileInfo {
+    pub id: i32,
+    pub name: String,
+    pub created_at: chrono::DateTime<chrono::Utc>,
+}
+
+pub async fn list_files(
+    Path(server_id): Path<i32>,
+    Extension(pool): Extension<PgPool>,
+) -> Result<Json<Vec<FileInfo>>, (StatusCode, String)> {
+    let rows = sqlx::query("SELECT id, name, created_at FROM server_files WHERE server_id = $1 ORDER BY id DESC")
+        .bind(server_id)
+        .fetch_all(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error listing files");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    let files = rows
+        .into_iter()
+        .map(|r| FileInfo {
+            id: r.get("id"),
+            name: r.get("name"),
+            created_at: r.get("created_at"),
+        })
+        .collect();
+    Ok(Json(files))
+}
+
+pub async fn upload_file(
+    Path(server_id): Path<i32>,
+    Extension(pool): Extension<PgPool>,
+    mut multipart: Multipart,
+) -> Result<impl IntoResponse, (StatusCode, String)> {
+    let dir = format!("storage/{server_id}");
+    if fs::create_dir_all(&dir).await.is_err() {
+        return Err((StatusCode::INTERNAL_SERVER_ERROR, "Failed to create dir".into()));
+    }
+    while let Some(field) = multipart.next_field().await.unwrap_or(None) {
+        let file_name = field.file_name().map(|s| s.to_string()).unwrap_or_else(|| "file.bin".into());
+        let data = field.bytes().await.map_err(|e| {
+            error!(?e, "Failed reading upload field");
+            (StatusCode::BAD_REQUEST, "Read error".into())
+        })?;
+        let path = format!("{}/{}", dir, file_name);
+        let mut f = fs::File::create(&path).await.map_err(|e| {
+            error!(?e, "Failed creating file");
+            (StatusCode::INTERNAL_SERVER_ERROR, "Write error".into())
+        })?;
+        f.write_all(&data).await.map_err(|e| {
+            error!(?e, "Failed writing file");
+            (StatusCode::INTERNAL_SERVER_ERROR, "Write error".into())
+        })?;
+        let rec = sqlx::query("INSERT INTO server_files (server_id, name, path) VALUES ($1,$2,$3) RETURNING id, created_at")
+            .bind(server_id)
+            .bind(&file_name)
+            .bind(&path)
+            .fetch_one(&pool)
+            .await
+            .map_err(|e| {
+                error!(?e, "DB error inserting file record");
+                (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+            })?;
+        return Ok((StatusCode::CREATED, Json(FileInfo {
+            id: rec.get("id"),
+            name: file_name,
+            created_at: rec.get("created_at"),
+        })));
+    }
+    Err((StatusCode::BAD_REQUEST, "No file".into()))
+}
+
+pub async fn download_file(
+    Path((server_id, file_id)): Path<(i32, i32)>,
+    Extension(pool): Extension<PgPool>,
+) -> Result<impl IntoResponse, (StatusCode, String)> {
+    let row = sqlx::query("SELECT name, path FROM server_files WHERE id = $1 AND server_id = $2")
+        .bind(file_id)
+        .bind(server_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error fetching file metadata");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    let Some(r) = row else { return Err((StatusCode::NOT_FOUND, "File not found".into())); };
+    let name: String = r.get("name");
+    let path: String = r.get("path");
+    let data = fs::read(&path).await.map_err(|e| {
+        error!(?e, "File read error");
+        (StatusCode::INTERNAL_SERVER_ERROR, "Read error".into())
+    })?;
+    let mut headers = HeaderMap::new();
+    headers.insert(header::CONTENT_TYPE, header::HeaderValue::from_static("application/octet-stream"));
+    let disposition = format!("attachment; filename=\"{}\"", name);
+    if let Ok(val) = header::HeaderValue::from_str(&disposition) {
+        headers.insert(header::CONTENT_DISPOSITION, val);
+    }
+    Ok((headers, data))
+}
+
+pub async fn delete_file(
+    Path((server_id, file_id)): Path<(i32, i32)>,
+    Extension(pool): Extension<PgPool>,
+) -> Result<StatusCode, (StatusCode, String)> {
+    let row = sqlx::query("SELECT path FROM server_files WHERE id = $1 AND server_id = $2")
+        .bind(file_id)
+        .bind(server_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error fetching file for deletion");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    let Some(r) = row else { return Err((StatusCode::NOT_FOUND, "File not found".into())); };
+    let path: String = r.get("path");
+    let _ = fs::remove_file(&path).await;
+    sqlx::query("DELETE FROM server_files WHERE id = $1")
+        .bind(file_id)
+        .execute(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error deleting file record");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    Ok(StatusCode::NO_CONTENT)
+}
diff --git a/backend/src/ingestion.rs b/backend/src/ingestion.rs
new file mode 100644
index 0000000000000000000000000000000000000000..9782a8e2635784f306ce3e4d1cd4e4c33aa7b7ea
--- /dev/null
+++ b/backend/src/ingestion.rs
@@ -0,0 +1,144 @@
+use axum::{extract::{Extension, Path}, Json, http::StatusCode};
+use serde::{Serialize, Deserialize};
+use sqlx::{PgPool, Row};
+use tracing::error;
+use crate::extractor::AuthUser;
+
+#[derive(Serialize)]
+pub struct IngestionJob {
+    pub id: i32,
+    pub vector_db_id: i32,
+    pub source_url: String,
+    pub schedule_minutes: i32,
+    pub last_run: Option<chrono::DateTime<chrono::Utc>>,
+    pub created_at: chrono::DateTime<chrono::Utc>,
+}
+
+#[derive(Deserialize)]
+pub struct CreateJob {
+    pub vector_db_id: i32,
+    pub source_url: String,
+    #[serde(default)]
+    pub schedule_minutes: i32,
+}
+
+pub async fn list_jobs(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+) -> Result<Json<Vec<IngestionJob>>, (StatusCode, String)> {
+    let rows = sqlx::query(
+        "SELECT id, vector_db_id, source_url, schedule_minutes, last_run, created_at \
+         FROM ingestion_jobs WHERE owner_id = $1 ORDER BY id"
+    )
+    .bind(user_id)
+    .fetch_all(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error listing ingestion jobs");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    let jobs = rows.into_iter().map(|r| IngestionJob {
+        id: r.get("id"),
+        vector_db_id: r.get("vector_db_id"),
+        source_url: r.get("source_url"),
+        schedule_minutes: r.get("schedule_minutes"),
+        last_run: r.try_get("last_run").ok(),
+        created_at: r.get("created_at"),
+    }).collect();
+    Ok(Json(jobs))
+}
+
+pub async fn create_job(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Json(payload): Json<CreateJob>,
+) -> Result<Json<IngestionJob>, (StatusCode, String)> {
+    let rec = sqlx::query(
+        "INSERT INTO ingestion_jobs (owner_id, vector_db_id, source_url, schedule_minutes) \
+         VALUES ($1,$2,$3,$4) RETURNING id, last_run, created_at"
+    )
+    .bind(user_id)
+    .bind(payload.vector_db_id)
+    .bind(&payload.source_url)
+    .bind(payload.schedule_minutes)
+    .fetch_one(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error creating ingestion job");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    Ok(Json(IngestionJob {
+        id: rec.get("id"),
+        vector_db_id: payload.vector_db_id,
+        source_url: payload.source_url,
+        schedule_minutes: payload.schedule_minutes,
+        last_run: rec.try_get("last_run").ok(),
+        created_at: rec.get("created_at"),
+    }))
+}
+
+pub async fn delete_job(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+) -> Result<StatusCode, (StatusCode, String)> {
+    let res = sqlx::query(
+        "DELETE FROM ingestion_jobs WHERE id = $1 AND owner_id = $2"
+    )
+    .bind(id)
+    .bind(user_id)
+    .execute(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error deleting job");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    if res.rows_affected() == 0 {
+        return Err((StatusCode::NOT_FOUND, "Job not found".into()));
+    }
+    Ok(StatusCode::NO_CONTENT)
+}
+
+pub fn start_ingestion_worker(pool: PgPool) {
+    tokio::spawn(async move {
+        loop {
+            let rows = sqlx::query(
+                "SELECT id, vector_db_id, source_url, schedule_minutes, last_run FROM ingestion_jobs"
+            )
+            .fetch_all(&pool)
+            .await
+            .unwrap_or_default();
+            let now = chrono::Utc::now();
+            for row in rows {
+                let id: i32 = row.get("id");
+                let vector_db_id: i32 = row.get("vector_db_id");
+                let url: String = row.get("source_url");
+                let schedule: i32 = row.get("schedule_minutes");
+                let last_run: Option<chrono::DateTime<chrono::Utc>> = row.try_get("last_run").ok();
+                let due = match last_run {
+                    Some(t) => now - t > chrono::Duration::minutes(schedule as i64),
+                    None => true,
+                };
+                if due {
+                    if let Ok(resp) = reqwest::get(&url).await {
+                        if let Ok(text) = resp.text().await {
+                            let target = format!("http://mcp-vectordb-{vector_db_id}:8000/ingest");
+                            let _ = reqwest::Client::new()
+                                .post(&target)
+                                .body(text)
+                                .send()
+                                .await;
+                            let _ = sqlx::query(
+                                "UPDATE ingestion_jobs SET last_run = NOW() WHERE id = $1"
+                            )
+                            .bind(id)
+                            .execute(&pool)
+                            .await;
+                        }
+                    }
+                }
+            }
+            tokio::time::sleep(std::time::Duration::from_secs(60)).await;
+        }
+    });
+}
diff --git a/backend/src/invocations.rs b/backend/src/invocations.rs
new file mode 100644
index 0000000000000000000000000000000000000000..7b1b49f6866166ef5ed7bb5756486c062fc8caa0
--- /dev/null
+++ b/backend/src/invocations.rs
@@ -0,0 +1,58 @@
+use axum::{extract::{Extension, Path}, Json};
+use serde::{Deserialize, Serialize};
+use sqlx::{PgPool, Row};
+use crate::extractor::AuthUser;
+use crate::error::{AppError, AppResult};
+
+#[derive(Serialize)]
+pub struct InvocationTrace {
+    pub id: i32,
+    pub input_json: serde_json::Value,
+    pub output_text: Option<String>,
+    pub created_at: chrono::DateTime<chrono::Utc>,
+}
+
+pub async fn list_invocations(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(server_id): Path<i32>,
+) -> AppResult<Json<Vec<InvocationTrace>>> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await?;
+    if rec.is_none() { return Err(AppError::NotFound); }
+    let rows = sqlx::query(
+        "SELECT id, input_json, output_text, created_at FROM invocation_traces WHERE server_id = $1 ORDER BY id DESC LIMIT 50"
+    )
+    .bind(server_id)
+    .fetch_all(&pool)
+    .await?;
+    let traces = rows.into_iter().map(|r| InvocationTrace {
+        id: r.get("id"),
+        input_json: r.get("input_json"),
+        output_text: r.get("output_text"),
+        created_at: r.get("created_at"),
+    }).collect();
+    Ok(Json(traces))
+}
+
+pub async fn record_invocation(
+    pool: &PgPool,
+    server_id: i32,
+    user_id: i32,
+    input_json: &serde_json::Value,
+    output_text: Option<&str>,
+) -> Result<(), sqlx::Error> {
+    sqlx::query(
+        "INSERT INTO invocation_traces (server_id, user_id, input_json, output_text) VALUES ($1,$2,$3,$4)"
+    )
+    .bind(server_id)
+    .bind(user_id)
+    .bind(input_json)
+    .bind(output_text)
+    .execute(pool)
+    .await?;
+    Ok(())
+}
diff --git a/backend/src/job_queue.rs b/backend/src/job_queue.rs
new file mode 100644
index 0000000000000000000000000000000000000000..d018e3550abab98c959e5c9d65e54a7e3256c579
--- /dev/null
+++ b/backend/src/job_queue.rs
@@ -0,0 +1,85 @@
+use tokio::sync::mpsc::{channel, Receiver, Sender};
+use sqlx::{PgPool, Row};
+use crate::runtime::ContainerRuntime;
+use std::sync::Arc;
+use serde_json::Value;
+use serde::{Serialize, Deserialize};
+use tokio::time::{sleep, Duration};
+
+#[derive(Debug, Serialize, Deserialize)]
+pub enum Job {
+    Start {
+        server_id: i32,
+        server_type: String,
+        config: Option<Value>,
+        api_key: String,
+        use_gpu: bool,
+    },
+    Stop { server_id: i32 },
+    Delete { server_id: i32 },
+}
+
+pub async fn enqueue_job(pool: &PgPool, job: &Job) {
+    if let Ok(payload) = serde_json::to_value(job) {
+        let _ = sqlx::query("INSERT INTO job_queue (payload) VALUES ($1)")
+            .bind(payload)
+            .execute(pool)
+            .await;
+    }
+}
+
+pub fn start_worker(pool: PgPool, runtime: Arc<dyn ContainerRuntime>) -> Sender<Job> {
+    let (tx, mut rx): (Sender<Job>, Receiver<Job>) = channel(32);
+
+    // Load queued jobs from the database on startup
+    let db_pool = pool.clone();
+    let replay_tx = tx.clone();
+    tokio::spawn(async move {
+        loop {
+            let rows = sqlx::query("SELECT id, payload FROM job_queue WHERE status = 'queued' ORDER BY id")
+                .fetch_all(&db_pool)
+                .await
+                .unwrap_or_default();
+            for row in rows {
+                let id: i32 = row.get("id");
+                let payload: Value = row.get("payload");
+                if let Ok(job) = serde_json::from_value::<Job>(payload) {
+                    let _ = sqlx::query("UPDATE job_queue SET status = 'processing' WHERE id = $1")
+                        .bind(id)
+                        .execute(&db_pool)
+                        .await;
+                    let _ = replay_tx.send(job).await;
+                    let _ = sqlx::query("DELETE FROM job_queue WHERE id = $1")
+                        .bind(id)
+                        .execute(&db_pool)
+                        .await;
+                }
+            }
+            sleep(Duration::from_secs(5)).await;
+        }
+    });
+
+    tokio::spawn(async move {
+        while let Some(job) = rx.recv().await {
+            match &job {
+                Job::Start { .. } | Job::Stop { .. } | Job::Delete { .. } => {}
+            }
+
+            match job {
+                Job::Start { server_id, server_type, config, api_key, use_gpu } => {
+                    let rt = runtime.clone();
+                    rt.spawn_server_task(server_id, server_type, config, api_key, use_gpu, pool.clone());
+                }
+                Job::Stop { server_id } => {
+                    let rt = runtime.clone();
+                    rt.stop_server_task(server_id, pool.clone());
+                }
+                Job::Delete { server_id } => {
+                    let rt = runtime.clone();
+                    rt.delete_server_task(server_id, pool.clone());
+                }
+            }
+        }
+    });
+    tx
+}
diff --git a/backend/src/main.rs b/backend/src/main.rs
new file mode 100644
index 0000000000000000000000000000000000000000..db7e461206ed8b3b08f121f11e690aa5e0747b15
--- /dev/null
+++ b/backend/src/main.rs
@@ -0,0 +1,94 @@
+mod auth;
+mod docker;
+mod extractor;
+mod runtime;
+mod servers;
+use crate::routes::api_routes;
+mod build;
+mod capabilities;
+mod config;
+mod domains;
+mod error;
+mod file_store;
+mod job_queue;
+mod proxy;
+mod routes;
+mod secrets;
+mod services;
+mod vault;
+mod marketplace;
+mod vector_dbs;
+mod organizations;
+mod ingestion;
+mod invocations;
+mod evaluation;
+mod workflows;
+
+use axum::{routing::get, Extension, Router};
+use axum_prometheus::PrometheusMetricLayer;
+use job_queue::{start_worker, Job};
+use runtime::{ContainerRuntime, DockerRuntime, KubernetesRuntime};
+use sqlx::postgres::PgPoolOptions;
+use std::net::SocketAddr;
+use std::sync::Arc;
+use tracing_subscriber::{fmt, EnvFilter};
+
+async fn root() -> &'static str {
+    "MCP Host API"
+}
+
+#[tokio::main]
+async fn main() -> Result<(), Box<dyn std::error::Error>> {
+    fmt()
+        .with_env_filter(EnvFilter::from_default_env())
+        .json()
+        .init();
+
+    dotenvy::dotenv().ok();
+    // Fail fast if the JWT secret is missing
+    let _ = config::JWT_SECRET.as_str();
+    let db_url = std::env::var("DATABASE_URL")
+        .unwrap_or_else(|_| "postgres://postgres:password@localhost/mcp".into());
+    let pool = PgPoolOptions::new()
+        .max_connections(5)
+        .connect(&db_url)
+        .await?;
+
+    // Run migrations if available
+    if sqlx::migrate!().run(&pool).await.is_err() {
+        eprintln!("Database migrations failed");
+    }
+
+    let runtime: Arc<dyn ContainerRuntime> = match config::CONTAINER_RUNTIME.as_str() {
+        "kubernetes" => match KubernetesRuntime::new().await {
+            Ok(rt) => Arc::new(rt),
+            Err(e) => {
+                tracing::warn!(%e, "failed to init Kubernetes runtime; using docker");
+                Arc::new(DockerRuntime)
+            }
+        },
+        _ => Arc::new(DockerRuntime),
+    };
+    let job_tx = start_worker(pool.clone(), runtime.clone());
+    ingestion::start_ingestion_worker(pool.clone());
+    let (prometheus_layer, metrics_handle) = PrometheusMetricLayer::pair();
+    let app = Router::new()
+        .route("/", get(root))
+        .route(
+            "/metrics",
+            get(move || async move { metrics_handle.render() }),
+        )
+        .merge(api_routes())
+        .layer(prometheus_layer)
+        .layer(Extension(pool.clone()))
+        .layer(Extension(job_tx.clone()))
+        .layer(Extension(runtime.clone()));
+
+    let addr = SocketAddr::from(([127, 0, 0, 1], 3000));
+    println!("Listening on {}", addr);
+    axum::Server::bind(&addr)
+        .serve(app.into_make_service())
+        .await?;
+
+    Ok(())
+}
diff --git a/backend/src/marketplace.rs b/backend/src/marketplace.rs
new file mode 100644
index 0000000000000000000000000000000000000000..2067781d9594763da69ccdc55197191cbefdb428
--- /dev/null
+++ b/backend/src/marketplace.rs
@@ -0,0 +1,22 @@
+use once_cell::sync::Lazy;
+use serde::Serialize;
+use axum::{Json};
+
+#[derive(Serialize, Clone)]
+pub struct MarketplaceItem {
+    pub server_type: String,
+    pub image: String,
+    pub description: String,
+}
+
+static ITEMS: Lazy<Vec<MarketplaceItem>> = Lazy::new(|| vec![
+    MarketplaceItem { server_type: "PostgreSQL".into(), image: "ghcr.io/anycontext/postgres-mcp:latest".into(), description: "Expose a PostgreSQL database via MCP".into() },
+    MarketplaceItem { server_type: "Slack".into(), image: "ghcr.io/anycontext/slack-mcp:latest".into(), description: "Query Slack channels".into() },
+    MarketplaceItem { server_type: "PDF Parser".into(), image: "ghcr.io/anycontext/pdf-mcp:latest".into(), description: "Load and search PDF documents".into() },
+    MarketplaceItem { server_type: "Notion".into(), image: "ghcr.io/anycontext/notion-mcp:latest".into(), description: "Connect to Notion pages".into() },
+    MarketplaceItem { server_type: "Router".into(), image: "ghcr.io/anycontext/router-mcp:latest".into(), description: "Route queries to multiple MCPs".into() },
+]);
+
+pub async fn list_marketplace() -> Json<Vec<MarketplaceItem>> {
+    Json(ITEMS.clone())
+}
diff --git a/backend/src/organizations.rs b/backend/src/organizations.rs
new file mode 100644
index 0000000000000000000000000000000000000000..d45bef13d287d4e3c9f5693e75535dae763c8daa
--- /dev/null
+++ b/backend/src/organizations.rs
@@ -0,0 +1,110 @@
+use axum::{Extension, Json, Router, routing::{get, post}};
+use axum::extract::{Path};
+use sqlx::{PgPool, Row};
+use crate::error::{AppError, AppResult};
+use crate::extractor::AuthUser;
+
+#[derive(serde::Deserialize)]
+pub struct NewOrg {
+    pub name: String,
+}
+
+#[derive(serde::Serialize)]
+pub struct OrgInfo {
+    pub id: i32,
+    pub name: String,
+}
+
+pub fn routes() -> Router {
+    Router::new()
+        .route("/api/orgs", get(list_orgs).post(create_org))
+        .route("/api/orgs/:id/members", post(add_member))
+}
+
+pub async fn list_orgs(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+) -> AppResult<Json<Vec<OrgInfo>>> {
+    let rows = sqlx::query(
+        "SELECT o.id, o.name FROM organizations o \
+        JOIN organization_members m ON m.organization_id = o.id \
+        WHERE m.user_id = $1"
+    )
+    .bind(user_id)
+    .fetch_all(&pool)
+    .await
+    .map_err(|e| {
+        tracing::error!(?e, "DB error listing orgs");
+        AppError::Db(e)
+    })?;
+    let orgs = rows.into_iter().map(|r| OrgInfo {
+        id: r.get("id"),
+        name: r.get("name"),
+    }).collect();
+    Ok(Json(orgs))
+}
+
+pub async fn create_org(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Json(payload): Json<NewOrg>,
+) -> AppResult<Json<OrgInfo>> {
+    if payload.name.trim().is_empty() {
+        return Err(AppError::BadRequest("Name required".into()));
+    }
+    let rec = sqlx::query(
+        "INSERT INTO organizations (name, owner_id) VALUES ($1, $2) RETURNING id"
+    )
+    .bind(&payload.name)
+    .bind(user_id)
+    .fetch_one(&pool)
+    .await
+    .map_err(|e| {
+        tracing::error!(?e, "DB error creating org");
+        AppError::Db(e)
+    })?;
+    let id: i32 = rec.get("id");
+    sqlx::query(
+        "INSERT INTO organization_members (organization_id, user_id, role) VALUES ($1, $2, 'owner')"
+    )
+    .bind(id)
+    .bind(user_id)
+    .execute(&pool)
+    .await
+    .map_err(|e| {
+        tracing::error!(?e, "DB error adding owner to org");
+        AppError::Db(e)
+    })?;
+    Ok(Json(OrgInfo { id, name: payload.name }))
+}
+
+#[derive(serde::Deserialize)]
+pub struct AddMemberPayload { pub user_id: i32 }
+
+pub async fn add_member(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+    Json(payload): Json<AddMemberPayload>,
+) -> AppResult<()> {
+    // verify requester is owner
+    let rec = sqlx::query("SELECT role FROM organization_members WHERE organization_id=$1 AND user_id=$2")
+        .bind(id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| { tracing::error!(?e, "DB error"); AppError::Db(e) })?;
+    let Some(row) = rec else { return Err(AppError::Forbidden); };
+    let role: String = row.get("role");
+    if role != "owner" { return Err(AppError::Forbidden); }
+    sqlx::query(
+        "INSERT INTO organization_members (organization_id, user_id) VALUES ($1,$2) ON CONFLICT DO NOTHING"
+    )
+    .bind(id)
+    .bind(payload.user_id)
+    .execute(&pool)
+    .await
+    .map_err(|e| { tracing::error!(?e, "DB error adding member"); AppError::Db(e) })?;
+    Ok(())
+}
+
diff --git a/backend/src/proxy.rs b/backend/src/proxy.rs
new file mode 100644
index 0000000000000000000000000000000000000000..06b50e7c19efdce89a108ad0212c0a9b2f79a693
--- /dev/null
+++ b/backend/src/proxy.rs
@@ -0,0 +1,135 @@
+use sqlx::{PgPool, Row};
+use std::path::PathBuf;
+use std::time::Duration;
+use nix::sys::signal::{kill, Signal};
+use nix::unistd::Pid;
+use acme2::{AccountBuilder, DirectoryBuilder, OrderBuilder, Csr, gen_rsa_private_key};
+
+pub fn conf_dir() -> PathBuf {
+    std::env::var("PROXY_CONF_DIR")
+        .map(PathBuf::from)
+        .unwrap_or_else(|_| PathBuf::from("./proxy_conf"))
+}
+
+pub async fn ensure_tls(domain: &str) {
+    let cert_path = format!("/etc/letsencrypt/live/{domain}/fullchain.pem");
+    if tokio::fs::metadata(&cert_path).await.is_ok() {
+        return;
+    }
+    let email = match std::env::var("CERTBOT_EMAIL") {
+        Ok(e) => e,
+        Err(_) => return,
+    };
+    if let Err(e) = obtain_cert(domain.to_string(), email).await {
+        tracing::error!(?e, "certificate request failed");
+    }
+}
+
+async fn obtain_cert(domain: String, email: String) -> Result<(), Box<dyn std::error::Error>> {
+    const LETS_ENCRYPT_URL: &str = "https://acme-v02.api.letsencrypt.org/directory";
+    let dir = DirectoryBuilder::new(LETS_ENCRYPT_URL.to_string()).build().await?;
+    let account = AccountBuilder::new(dir.clone())
+        .contact(vec![format!("mailto:{email}")])
+        .terms_of_service_agreed(true)
+        .build()
+        .await?;
+
+    let mut order = OrderBuilder::new(account)
+        .add_dns_identifier(domain.clone())
+        .build()
+        .await?;
+
+    for auth in order.authorizations().await? {
+        if let Some(mut challenge) = auth.get_challenge("http-01") {
+            let token = match &challenge.token {
+                Some(t) => t.clone(),
+                None => continue,
+            };
+            let key = match challenge.key_authorization()? {
+                Some(k) => k,
+                None => continue,
+            };
+            let path = conf_dir().join("acme").join(&token);
+            if let Some(p) = path.parent() {
+                tokio::fs::create_dir_all(p).await?;
+            }
+            tokio::fs::write(&path, key).await?;
+            challenge = challenge.validate().await?;
+            challenge.wait_done(Duration::from_secs(5), 15).await?;
+        }
+    }
+
+    order = order.wait_ready(Duration::from_secs(5), 15).await?;
+    let pkey = gen_rsa_private_key(2048)?;
+    order = order.finalize(Csr::Automatic(pkey.clone())).await?;
+    order = order.wait_done(Duration::from_secs(5), 15).await?;
+    let certs = order
+        .certificate()
+        .await?
+        .ok_or("certificate missing")?;
+    let mut pem_chain = Vec::new();
+    for c in &certs {
+        pem_chain.extend(c.to_pem()?);
+    }
+    let cert_dir = format!("/etc/letsencrypt/live/{domain}");
+    tokio::fs::create_dir_all(&cert_dir).await?;
+    tokio::fs::write(format!("{cert_dir}/fullchain.pem"), pem_chain).await?;
+    tokio::fs::write(
+        format!("{cert_dir}/privkey.pem"),
+        pkey.private_key_to_pem_pkcs8()?,
+    )
+    .await?;
+    Ok(())
+}
+
+async fn write_config(server_id: i32, domains: &[String]) -> std::io::Result<()> {
+    let dir = conf_dir();
+    tokio::fs::create_dir_all(&dir).await.ok();
+    let path = dir.join(format!("server_{}.conf", server_id));
+    if domains.is_empty() {
+        let _ = tokio::fs::remove_file(&path).await;
+        return Ok(());
+    }
+    let mut content = String::new();
+    for d in domains {
+        content.push_str(&format!(
+"server {{
+    listen 80;
+    server_name {};
+    location / {{
+        proxy_pass http://mcp-server-{}:8080;
+    }}
+}}
+",
+            d, server_id
+        ));
+    }
+    tokio::fs::write(&path, content).await?;
+    Ok(())
+}
+
+pub async fn reload() -> std::io::Result<()> {
+    let pid_str = tokio::fs::read_to_string("/run/nginx.pid").await?;
+    if let Ok(pid) = pid_str.trim().parse::<i32>() {
+        if let Err(e) = kill(Pid::from_raw(pid), Signal::SIGHUP) {
+            tracing::error!(?e, "failed to reload nginx");
+        }
+    }
+    Ok(())
+}
+
+pub async fn rebuild_for_server(pool: &PgPool, server_id: i32) {
+    match sqlx::query("SELECT domain FROM custom_domains WHERE server_id = $1")
+        .bind(server_id)
+        .fetch_all(pool)
+        .await
+    {
+        Ok(rows) => {
+            let domains: Vec<String> = rows.into_iter().map(|r| r.get("domain")).collect();
+            if let Err(e) = write_config(server_id, &domains).await {
+                tracing::error!(?e, "failed to write proxy config");
+            }
+        }
+        Err(e) => tracing::error!(?e, "proxy DB error"),
+    }
+}
diff --git a/backend/src/routes.rs b/backend/src/routes.rs
new file mode 100644
index 0000000000000000000000000000000000000000..7b8e66d731d501eb7d5fe8312138276d3f06144a
--- /dev/null
+++ b/backend/src/routes.rs
@@ -0,0 +1,50 @@
+use axum::{routing::{get, post, delete, patch}, Router};
+
+use crate::{auth, capabilities, domains, file_store, secrets, services, servers, marketplace, vector_dbs, ingestion, invocations, evaluation, organizations, workflows};
+
+
+pub fn api_routes() -> Router {
+    Router::new()
+        .route("/api/marketplace", get(marketplace::list_marketplace))
+        .route("/api/register", post(auth::register_user))
+        .route("/api/login", post(auth::login_user))
+        .route("/api/logout", post(auth::logout_user))
+        .route("/api/me", get(auth::current_user))
+        .route("/api/servers", get(servers::list_servers).post(servers::create_server))
+        .route("/api/servers/:id/start", post(servers::start_server))
+        .route("/api/servers/:id/stop", post(servers::stop_server))
+        .route("/api/servers/:id/redeploy", post(servers::redeploy_server))
+        .route("/api/servers/:id/webhook", post(servers::webhook_redeploy))
+        .route("/api/servers/:id/github", post(servers::github_webhook))
+        .route("/api/servers/:id/invoke", post(servers::invoke_server))
+        .route("/api/servers/:id/manifest", get(servers::get_manifest))
+        .route("/api/servers/:id/client-config", get(servers::client_config))
+        .route("/api/servers/:id/capabilities", get(capabilities::list_capabilities))
+        .route("/api/servers/:id", delete(servers::delete_server))
+        .route("/api/servers/:id/logs", get(servers::server_logs))
+        .route("/api/servers/:id/logs/history", get(servers::stored_logs))
+        .route("/api/servers/:id/logs/stream", get(servers::stream_logs))
+        .route("/api/servers/:id/metrics", get(servers::get_metrics).post(servers::post_metric))
+        .route("/api/servers/:id/metrics/stream", get(servers::stream_metrics))
+        .route("/api/servers/stream", get(servers::stream_status))
+        .route("/api/servers/:id/services", get(services::list_services).post(services::create_service))
+        .route("/api/servers/:id/services/:service_id", patch(services::update_service).delete(services::delete_service))
+        .route("/api/servers/:id/secrets", get(secrets::list_secrets).post(secrets::create_secret))
+        .route("/api/servers/:id/secrets/:secret_id", get(secrets::get_secret).patch(secrets::update_secret).delete(secrets::delete_secret))
+        .route("/api/servers/:id/domains", get(domains::list_domains).post(domains::create_domain))
+        .route("/api/servers/:id/domains/:domain_id", delete(domains::delete_domain))
+        .route("/api/servers/:id/files", get(file_store::list_files).post(file_store::upload_file))
+        .route("/api/servers/:id/files/:file_id", get(file_store::download_file).delete(file_store::delete_file))
+        .route("/api/vector-dbs", get(vector_dbs::list_vector_dbs).post(vector_dbs::create_vector_db))
+        .route("/api/vector-dbs/:id", delete(vector_dbs::delete_vector_db))
+        .route("/api/ingestion-jobs", get(ingestion::list_jobs).post(ingestion::create_job))
+        .route("/api/ingestion-jobs/:id", delete(ingestion::delete_job))
+        .route("/api/servers/:id/invocations", get(invocations::list_invocations))
+        .route("/api/servers/:id/eval/tests", get(evaluation::list_tests).post(evaluation::create_test))
+        .route("/api/servers/:id/eval/run", post(evaluation::run_tests))
+        .route("/api/servers/:id/eval/results", get(evaluation::list_results))
+        .route("/api/evaluations", get(evaluation::list_all_results))
+        .route("/api/evaluations/summary", get(evaluation::scores_summary))
+        .merge(workflows::routes())
+        .merge(organizations::routes())
+}
diff --git a/backend/src/runtime.rs b/backend/src/runtime.rs
new file mode 100644
index 0000000000000000000000000000000000000000..853548b9ab0197975748e90c01bdbd9cdfce2776
--- /dev/null
+++ b/backend/src/runtime.rs
@@ -0,0 +1,311 @@
+use async_trait::async_trait;
+use sqlx::PgPool;
+use tokio::sync::mpsc::Receiver;
+
+#[async_trait]
+pub trait ContainerRuntime: Send + Sync {
+    fn spawn_server_task(
+        &self,
+        server_id: i32,
+        server_type: String,
+        config: Option<serde_json::Value>,
+        api_key: String,
+        use_gpu: bool,
+        pool: PgPool,
+    );
+
+    fn stop_server_task(&self, server_id: i32, pool: PgPool);
+
+    fn delete_server_task(&self, server_id: i32, pool: PgPool);
+
+    async fn fetch_logs(&self, server_id: i32) -> Result<String, bollard::errors::Error>;
+
+    fn stream_logs_task(&self, server_id: i32, pool: PgPool) -> Option<Receiver<String>>;
+}
+
+pub struct DockerRuntime;
+
+#[async_trait]
+impl ContainerRuntime for DockerRuntime {
+    fn spawn_server_task(
+        &self,
+        server_id: i32,
+        server_type: String,
+        config: Option<serde_json::Value>,
+        api_key: String,
+        use_gpu: bool,
+        pool: PgPool,
+    ) {
+        crate::docker::spawn_server_task(server_id, server_type, config, api_key, use_gpu, pool);
+    }
+
+    fn stop_server_task(&self, server_id: i32, pool: PgPool) {
+        crate::docker::stop_server_task(server_id, pool);
+    }
+
+    fn delete_server_task(&self, server_id: i32, pool: PgPool) {
+        crate::docker::delete_server_task(server_id, pool);
+    }
+
+    async fn fetch_logs(&self, server_id: i32) -> Result<String, bollard::errors::Error> {
+        crate::docker::fetch_logs(server_id).await
+    }
+
+    fn stream_logs_task(&self, server_id: i32, pool: PgPool) -> Option<Receiver<String>> {
+        crate::docker::stream_logs_task(server_id, pool)
+    }
+}
+
+pub struct KubernetesRuntime {
+    client: kube::Client,
+}
+
+impl KubernetesRuntime {
+    pub async fn new() -> Result<Self, kube::Error> {
+        let client = kube::Client::try_default().await?;
+        Ok(Self { client })
+    }
+}
+
+#[async_trait]
+impl ContainerRuntime for KubernetesRuntime {
+    fn spawn_server_task(
+        &self,
+        server_id: i32,
+        server_type: String,
+        config: Option<serde_json::Value>,
+        api_key: String,
+        use_gpu: bool,
+        pool: PgPool,
+    ) {
+        use k8s_openapi::api::core::v1 as corev1;
+        use kube::{Api, api::{PostParams, DeleteParams}};
+        use std::collections::BTreeMap;
+
+        let client = self.client.clone();
+        let namespace = crate::config::K8S_NAMESPACE.clone();
+        tokio::spawn(async move {
+            let cfg_clone = config.clone();
+            let branch = cfg_clone
+                .as_ref()
+                .and_then(|v| v.get("branch"))
+                .and_then(|v| v.as_str());
+
+            let mut image = match server_type.as_str() {
+                "PostgreSQL" => "ghcr.io/anycontext/postgres-mcp:latest".to_string(),
+                "Slack" => "ghcr.io/anycontext/slack-mcp:latest".to_string(),
+                "Custom" => config
+                    .as_ref()
+                    .and_then(|v| v.get("image"))
+                    .and_then(|v| v.as_str())
+                    .unwrap_or("ghcr.io/anycontext/default-mcp:latest")
+                    .to_string(),
+                _ => "ghcr.io/anycontext/default-mcp:latest".to_string(),
+            };
+
+            // Build from git repo if provided
+            if let Some(repo) = cfg_clone
+                .as_ref()
+                .and_then(|v| v.get("repo_url"))
+                .and_then(|v| v.as_str())
+            {
+                crate::servers::set_status(&pool, server_id, "cloning").await;
+                if let Some(tag) = crate::build::build_from_git(&pool, server_id, repo, branch).await {
+                    image = tag;
+                } else {
+                    return;
+                }
+            }
+
+            let pods: Api<corev1::Pod> = Api::namespaced(client.clone(), &namespace);
+            let pod_name = format!("mcp-server-{server_id}");
+
+            let mut env_vars = vec![corev1::EnvVar {
+                name: "MCP_API_KEY".into(),
+                value: Some(api_key.clone()),
+                ..Default::default()
+            }];
+
+            if let Some(cfg) = config.as_ref() {
+                if let Some(obj) = cfg.as_object() {
+                    for (k, v) in obj {
+                        if k == "image" || k == "repo_url" { continue; }
+                        env_vars.push(corev1::EnvVar {
+                            name: format!("CFG_{}", k.to_uppercase()),
+                            value: Some(v.to_string()),
+                            ..Default::default()
+                        });
+                    }
+                }
+            }
+
+            let storage_dir = format!("storage/{server_id}");
+            if tokio::fs::create_dir_all(&storage_dir).await.is_err() {
+                tracing::warn!(server_id, "failed to create storage dir");
+            }
+
+            let pod = corev1::Pod {
+                metadata: kube::api::ObjectMeta {
+                    name: Some(pod_name.clone()),
+                    ..Default::default()
+                },
+                spec: Some(corev1::PodSpec {
+                    containers: vec![corev1::Container {
+                        name: "mcp".into(),
+                        image: Some(image.clone()),
+                        env: Some(env_vars),
+                        volume_mounts: Some(vec![corev1::VolumeMount {
+                            mount_path: "/data".into(),
+                            name: "data".into(),
+                            ..Default::default()
+                        }]),
+                        resources: {
+                            use k8s_openapi::apimachinery::pkg::api::resource::Quantity;
+                            let mut limits = BTreeMap::new();
+                            let mut requests = BTreeMap::new();
+
+                            if let Some(cpu) = config.as_ref()
+                                .and_then(|v| v.get("cpu_limit"))
+                                .and_then(|v| v.as_f64())
+                            {
+                                let q = Quantity(format!("{}", cpu));
+                                limits.insert("cpu".into(), q.clone());
+                                requests.insert("cpu".into(), q.clone());
+                            }
+
+                            if let Some(mem) = config.as_ref()
+                                .and_then(|v| v.get("memory_limit"))
+                                .and_then(|v| v.as_u64())
+                            {
+                                let q = Quantity(format!("{}Mi", mem));
+                                limits.insert("memory".into(), q.clone());
+                                requests.insert("memory".into(), q.clone());
+                            }
+
+                            if use_gpu {
+                                limits.insert("nvidia.com/gpu".into(), Quantity("1".into()));
+                            }
+
+                            if !limits.is_empty() || !requests.is_empty() {
+                                Some(corev1::ResourceRequirements {
+                                    limits: if limits.is_empty() { None } else { Some(limits) },
+                                    requests: if requests.is_empty() { None } else { Some(requests) },
+                                    ..Default::default()
+                                })
+                            } else {
+                                None
+                            }
+                        },
+                        ..Default::default()
+                    }],
+                    volumes: Some(vec![corev1::Volume {
+                        name: "data".into(),
+                        host_path: Some(corev1::HostPathVolumeSource {
+                            path: std::fs::canonicalize(&storage_dir)
+                                .unwrap_or_else(|_| std::path::PathBuf::from(&storage_dir))
+                                .display()
+                                .to_string(),
+                            ..Default::default()
+                        }),
+                        ..Default::default()
+                    }]),
+                    restart_policy: Some("Never".into()),
+                    service_account_name: Some(crate::config::K8S_SERVICE_ACCOUNT.to_string()),
+                    ..Default::default()
+                }),
+                ..Default::default()
+            };
+
+            let _ = pods.delete(&pod_name, &DeleteParams::default()).await; // cleanup any old pod
+            match pods.create(&PostParams::default(), &pod).await {
+                Ok(_) => {
+                    crate::servers::set_status(&pool, server_id, "running").await;
+                    let _ = crate::servers::add_metric(&pool, server_id, "start", None).await;
+                    crate::proxy::rebuild_for_server(&pool, server_id).await;
+                }
+                Err(e) => {
+                    tracing::error!(?e, "failed to create pod");
+                    crate::servers::set_status(&pool, server_id, "error").await;
+                }
+            }
+        });
+    }
+
+    fn stop_server_task(&self, server_id: i32, pool: PgPool) {
+        use kube::{Api, api::DeleteParams};
+        use k8s_openapi::api::core::v1::Pod;
+        let client = self.client.clone();
+        let namespace = crate::config::K8S_NAMESPACE.clone();
+        tokio::spawn(async move {
+            let pods: Api<Pod> = Api::namespaced(client, &namespace);
+            let name = format!("mcp-server-{server_id}");
+            let _ = pods.delete(&name, &DeleteParams::default()).await;
+            crate::servers::set_status(&pool, server_id, "stopped").await;
+            let _ = crate::servers::add_metric(&pool, server_id, "stop", None).await;
+            crate::proxy::rebuild_for_server(&pool, server_id).await;
+        });
+    }
+
+    fn delete_server_task(&self, server_id: i32, pool: PgPool) {
+        use kube::{Api, api::DeleteParams};
+        use k8s_openapi::api::core::v1::Pod;
+        let client = self.client.clone();
+        let namespace = crate::config::K8S_NAMESPACE.clone();
+        tokio::spawn(async move {
+            let pods: Api<Pod> = Api::namespaced(client, &namespace);
+            let name = format!("mcp-server-{server_id}");
+            let _ = pods.delete(&name, &DeleteParams::default()).await;
+            let _ = sqlx::query("DELETE FROM mcp_servers WHERE id = $1")
+                .bind(server_id)
+                .execute(&pool)
+                .await;
+            let _ = crate::servers::add_metric(&pool, server_id, "delete", None).await;
+            let _ = tokio::fs::remove_dir_all(format!("storage/{server_id}")).await;
+            crate::proxy::rebuild_for_server(&pool, server_id).await;
+        });
+    }
+
+    async fn fetch_logs(&self, server_id: i32) -> Result<String, bollard::errors::Error> {
+        use kube::{Api, api::LogParams};
+        use k8s_openapi::api::core::v1::Pod;
+        let pods: Api<Pod> = Api::namespaced(self.client.clone(), &crate::config::K8S_NAMESPACE);
+        let name = format!("mcp-server-{server_id}");
+        match pods.logs(&name, &LogParams { tail_lines: Some(100), ..LogParams::default() }).await {
+            Ok(s) => Ok(s),
+            Err(e) => Err(bollard::errors::Error::DockerResponseServerError {
+                status_code: 500,
+                message: e.to_string(),
+            }),
+        }
+    }
+
+    fn stream_logs_task(&self, server_id: i32, pool: PgPool) -> Option<Receiver<String>> {
+        use kube::{Api, api::LogParams};
+        use k8s_openapi::api::core::v1::Pod;
+        use futures_util::io::AsyncBufReadExt;
+        use futures_util::StreamExt;
+
+        let client = self.client.clone();
+        let namespace = crate::config::K8S_NAMESPACE.clone();
+        let (tx, rx) = tokio::sync::mpsc::channel(16);
+        tokio::spawn(async move {
+            let pods: Api<Pod> = Api::namespaced(client, &namespace);
+            let name = format!("mcp-server-{server_id}");
+            match pods.log_stream(&name, &LogParams { follow: true, ..LogParams::default() }).await {
+                Ok(stream) => {
+                    let mut lines = stream.lines();
+                    while let Some(Ok(line)) = lines.next().await {
+                        let _ = tx.send(line.clone()).await;
+                        let _ = sqlx::query("INSERT INTO server_logs (server_id, log_text) VALUES ($1,$2)")
+                            .bind(server_id)
+                            .bind(&line)
+                            .execute(&pool)
+                            .await;
+                    }
+                }
+                Err(e) => tracing::error!(?e, "k8s log stream failed"),
+            }
+        });
+        Some(rx)
+    }
+}
diff --git a/backend/src/secrets.rs b/backend/src/secrets.rs
new file mode 100644
index 0000000000000000000000000000000000000000..79aeb322e175f8ebf7645d2ac03953d95dcac000
--- /dev/null
+++ b/backend/src/secrets.rs
@@ -0,0 +1,312 @@
+use crate::extractor::AuthUser;
+use crate::vault::VaultClient;
+use axum::{
+    extract::{Extension, Path},
+    http::StatusCode,
+    Json,
+};
+use tracing::error;
+use serde::{Deserialize, Serialize};
+use sqlx::{PgPool, Row};
+
+#[derive(Serialize)]
+pub struct SecretInfo {
+    pub id: i32,
+    pub name: String,
+    pub created_at: chrono::DateTime<chrono::Utc>,
+}
+
+#[derive(Deserialize, Serialize)]
+pub struct CreateSecret {
+    pub name: String,
+    pub value: String,
+}
+
+#[derive(Deserialize)]
+pub struct UpdateSecret {
+    pub value: String,
+}
+
+pub fn encryption_key() -> String {
+    std::env::var("SECRET_KEY").unwrap_or_else(|_| "secret".into())
+}
+
+pub async fn list_secrets(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(server_id): Path<i32>,
+) -> Result<Json<Vec<SecretInfo>>, (StatusCode, String)> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error while verifying server owner");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    if rec.is_none() {
+        return Err((StatusCode::NOT_FOUND, "Server not found".into()));
+    }
+    let rows = sqlx::query(
+        "SELECT id, name, created_at FROM server_secrets WHERE server_id = $1 ORDER BY id",
+    )
+    .bind(server_id)
+    .fetch_all(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error listing secrets");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    let secrets = rows
+        .into_iter()
+        .map(|r| SecretInfo {
+            id: r.get("id"),
+            name: r.get("name"),
+            created_at: r.get("created_at"),
+        })
+        .collect();
+    Ok(Json(secrets))
+}
+
+pub async fn create_secret(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(server_id): Path<i32>,
+    Json(payload): Json<CreateSecret>,
+) -> Result<StatusCode, (StatusCode, String)> {
+    if payload.name.trim().is_empty() {
+        return Err((StatusCode::BAD_REQUEST, "Name required".into()));
+    }
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error while verifying server owner");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    if rec.is_none() {
+        return Err((StatusCode::NOT_FOUND, "Server not found".into()));
+    }
+    if let Some(vault) = VaultClient::from_env() {
+        let path = format!("servers/{}/{}", server_id, payload.name);
+        vault
+            .store_secret(&path, &payload.value)
+            .await
+            .map_err(|e| {
+                error!(?e, "Vault error storing secret");
+                (StatusCode::INTERNAL_SERVER_ERROR, "Vault error".into())
+            })?;
+        sqlx::query(
+            "INSERT INTO server_secrets (server_id, name, value) VALUES ($1, $2, $3)",
+        )
+        .bind(server_id)
+        .bind(&payload.name)
+        .bind(format!("vault:{}", path))
+        .execute(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error inserting secret path");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    } else {
+        let key = encryption_key();
+        sqlx::query(
+            "INSERT INTO server_secrets (server_id, name, value) VALUES ($1, $2, pgp_sym_encrypt($3, $4))",
+        )
+        .bind(server_id)
+        .bind(&payload.name)
+        .bind(&payload.value)
+        .bind(&key)
+        .execute(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error inserting secret");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    }
+    Ok(StatusCode::CREATED)
+}
+
+pub async fn get_secret(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path((server_id, secret_id)): Path<(i32, i32)>,
+) -> Result<Json<CreateSecret>, (StatusCode, String)> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error while verifying server owner");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    if rec.is_none() {
+        return Err((StatusCode::NOT_FOUND, "Server not found".into()));
+    }
+    let row = sqlx::query(
+        "SELECT name, value FROM server_secrets WHERE id = $1 AND server_id = $2",
+    )
+    .bind(secret_id)
+    .bind(server_id)
+    .fetch_optional(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error fetching secret");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    if let Some(r) = row {
+        let name: String = r.get("name");
+        let value: String = r.get("value");
+        if let Some(path) = value.strip_prefix("vault:") {
+            if let Some(vault) = VaultClient::from_env() {
+                let val = vault.read_secret(path).await.map_err(|e| {
+                    error!(?e, "Vault error reading secret");
+                    (StatusCode::INTERNAL_SERVER_ERROR, "Vault error".into())
+                })?;
+                Ok(Json(CreateSecret { name, value: val }))
+            } else {
+                Err((StatusCode::INTERNAL_SERVER_ERROR, "Vault not configured".into()))
+            }
+        } else {
+            let key = encryption_key();
+            let row = sqlx::query(
+                "SELECT pgp_sym_decrypt($1::bytea, $2) as value",
+            )
+            .bind(value)
+            .bind(&key)
+            .fetch_one(&pool)
+            .await
+            .map_err(|e| {
+                error!(?e, "DB error decrypting secret");
+                (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+            })?;
+            let val: String = row.get("value");
+            Ok(Json(CreateSecret { name, value: val }))
+        }
+    } else {
+        Err((StatusCode::NOT_FOUND, "Secret not found".into()))
+    }
+}
+
+pub async fn update_secret(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path((server_id, secret_id)): Path<(i32, i32)>,
+    Json(payload): Json<UpdateSecret>,
+) -> Result<StatusCode, (StatusCode, String)> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error while verifying server owner");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    if rec.is_none() {
+        return Err((StatusCode::NOT_FOUND, "Server not found".into()));
+    }
+    let row = sqlx::query(
+        "SELECT value FROM server_secrets WHERE id = $1 AND server_id = $2",
+    )
+    .bind(secret_id)
+    .bind(server_id)
+    .fetch_optional(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error fetching secret");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    let Some(r) = row else { return Err((StatusCode::NOT_FOUND, "Secret not found".into())); };
+    let stored: String = r.get("value");
+    if let Some(path) = stored.strip_prefix("vault:") {
+        if let Some(vault) = VaultClient::from_env() {
+            vault.store_secret(path, &payload.value).await.map_err(|e| {
+                error!(?e, "Vault error updating secret");
+                (StatusCode::INTERNAL_SERVER_ERROR, "Vault error".into())
+            })?;
+        } else {
+            return Err((StatusCode::INTERNAL_SERVER_ERROR, "Vault not configured".into()));
+        }
+    } else {
+        let key = encryption_key();
+        let result = sqlx::query(
+            "UPDATE server_secrets SET value = pgp_sym_encrypt($1, $2) WHERE id = $3 AND server_id = $4",
+        )
+        .bind(&payload.value)
+        .bind(&key)
+        .bind(secret_id)
+        .bind(server_id)
+        .execute(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error updating secret");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+        if result.rows_affected() == 0 {
+            return Err((StatusCode::NOT_FOUND, "Secret not found".into()));
+        }
+    }
+    Ok(StatusCode::NO_CONTENT)
+}
+
+pub async fn delete_secret(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path((server_id, secret_id)): Path<(i32, i32)>,
+) -> Result<StatusCode, (StatusCode, String)> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error while verifying server owner");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    if rec.is_none() {
+        return Err((StatusCode::NOT_FOUND, "Server not found".into()));
+    }
+    let row = sqlx::query(
+        "SELECT value FROM server_secrets WHERE id = $1 AND server_id = $2",
+    )
+    .bind(secret_id)
+    .bind(server_id)
+    .fetch_optional(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error fetching secret");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    let Some(r) = row else { return Err((StatusCode::NOT_FOUND, "Secret not found".into())); };
+    let stored: String = r.get("value");
+    if let Some(path) = stored.strip_prefix("vault:") {
+        if let Some(vault) = VaultClient::from_env() {
+            vault.delete_secret(path).await.map_err(|e| {
+                error!(?e, "Vault error deleting secret");
+                (StatusCode::INTERNAL_SERVER_ERROR, "Vault error".into())
+            })?;
+        } else {
+            return Err((StatusCode::INTERNAL_SERVER_ERROR, "Vault not configured".into()));
+        }
+    }
+    let result = sqlx::query(
+        "DELETE FROM server_secrets WHERE id = $1 AND server_id = $2",
+    )
+    .bind(secret_id)
+    .bind(server_id)
+    .execute(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error deleting secret");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    if result.rows_affected() == 0 {
+        return Err((StatusCode::NOT_FOUND, "Secret not found".into()));
+    }
+    Ok(StatusCode::NO_CONTENT)
+}
diff --git a/backend/src/servers.rs b/backend/src/servers.rs
new file mode 100644
index 0000000000000000000000000000000000000000..7f7756712e4709532e6237fc4a994da5eb76627e
--- /dev/null
+++ b/backend/src/servers.rs
@@ -0,0 +1,901 @@
+use crate::runtime::ContainerRuntime;
+use crate::extractor::AuthUser;
+use axum::{
+    extract::{Extension, Path},
+    http::StatusCode,
+    response::sse::{Event, Sse},
+    Json,
+};
+use futures_util::StreamExt;
+use once_cell::sync::Lazy;
+use dashmap::DashMap;
+use tokio::sync::broadcast;
+use serde_json;
+use serde::{Deserialize, Serialize};
+use sqlx::{PgPool, Row};
+use std::convert::Infallible;
+use tokio_stream::wrappers::{BroadcastStream, ReceiverStream};
+use tracing::error;
+use crate::error::{AppError, AppResult};
+use crate::invocations::record_invocation;
+use uuid::Uuid;
+use reqwest;
+
+#[derive(Serialize)]
+pub struct Server {
+    pub id: i32,
+    pub name: String,
+    pub server_type: String,
+    pub status: String,
+    pub use_gpu: bool,
+    pub organization_id: Option<i32>,
+}
+
+#[derive(Deserialize)]
+pub struct CreateServer {
+    pub name: String,
+    pub server_type: String,
+    pub config: Option<serde_json::Value>,
+    pub use_gpu: Option<bool>,
+    pub organization_id: Option<i32>,
+}
+
+#[derive(Serialize)]
+pub struct ServerInfo {
+    pub id: i32,
+    pub name: String,
+    pub server_type: String,
+    pub status: String,
+    pub use_gpu: bool,
+    pub organization_id: Option<i32>,
+    pub api_key: String,
+    pub webhook_secret: String,
+    pub manifest: Option<serde_json::Value>,
+    pub created_at: chrono::DateTime<chrono::Utc>,
+}
+
+#[derive(Serialize)]
+pub struct LogEntry {
+    pub id: i32,
+    pub collected_at: chrono::DateTime<chrono::Utc>,
+    pub log_text: String,
+}
+
+#[derive(Serialize, Clone)]
+pub struct Metric {
+    pub id: i32,
+    pub timestamp: chrono::DateTime<chrono::Utc>,
+    pub event_type: String,
+    pub details: Option<serde_json::Value>,
+}
+
+#[derive(Deserialize)]
+pub struct MetricInput {
+    pub event_type: String,
+    pub details: Option<serde_json::Value>,
+}
+
+static METRIC_CHANNELS: Lazy<DashMap<i32, broadcast::Sender<Metric>>> = Lazy::new(DashMap::new);
+
+#[derive(Serialize, Clone)]
+pub struct StatusUpdate {
+    pub id: i32,
+    pub status: String,
+}
+
+static STATUS_CHANNELS: Lazy<DashMap<i32, broadcast::Sender<StatusUpdate>>> = Lazy::new(DashMap::new);
+
+fn subscribe_status(user_id: i32) -> broadcast::Receiver<StatusUpdate> {
+    use dashmap::mapref::entry::Entry;
+    match STATUS_CHANNELS.entry(user_id) {
+        Entry::Occupied(e) => e.get().subscribe(),
+        Entry::Vacant(v) => {
+            let (tx, rx) = broadcast::channel(16);
+            v.insert(tx);
+            rx
+        }
+    }
+}
+
+fn subscribe_metrics(server_id: i32) -> broadcast::Receiver<Metric> {
+    use dashmap::mapref::entry::Entry;
+    match METRIC_CHANNELS.entry(server_id) {
+        Entry::Occupied(e) => e.get().subscribe(),
+        Entry::Vacant(v) => {
+            let (tx, rx) = broadcast::channel(16);
+            v.insert(tx);
+            rx
+        }
+    }
+}
+
+pub async fn set_status(pool: &PgPool, server_id: i32, status: &str) {
+    if let Ok(row) = sqlx::query(
+        "UPDATE mcp_servers SET status = $1 WHERE id = $2 RETURNING owner_id",
+    )
+    .bind(status)
+    .bind(server_id)
+    .fetch_one(pool)
+    .await
+    {
+        let owner_id: i32 = row.get("owner_id");
+        if let Some(tx) = STATUS_CHANNELS.get(&owner_id) {
+            let _ = tx.send(StatusUpdate { id: server_id, status: status.into() });
+        }
+    } else {
+        tracing::error!(server_id, status, "failed to update status");
+    }
+}
+
+pub async fn list_servers(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, role }: AuthUser,
+) -> AppResult<Json<Vec<Server>>> {
+    let query = if role == "admin" {
+        sqlx::query("SELECT id, name, server_type, status, use_gpu, organization_id FROM mcp_servers")
+            .fetch_all(&pool)
+    } else {
+        sqlx::query("SELECT id, name, server_type, status, use_gpu, organization_id FROM mcp_servers WHERE owner_id = $1")
+            .bind(user_id)
+            .fetch_all(&pool)
+    };
+    let rows = query
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error listing servers");
+            AppError::Db(e)
+        })?;
+    let servers = rows
+        .into_iter()
+        .map(|r| Server {
+            id: r.get("id"),
+            name: r.get("name"),
+            server_type: r.get("server_type"),
+            status: r.get("status"),
+            use_gpu: r.get("use_gpu"),
+            organization_id: r.try_get("organization_id").ok(),
+        })
+        .collect();
+    Ok(Json(servers))
+}
+
+pub async fn create_server(
+    Extension(pool): Extension<PgPool>,
+    Extension(job_tx): Extension<tokio::sync::mpsc::Sender<Job>>,
+    AuthUser { user_id, role }: AuthUser,
+    Json(payload): Json<CreateServer>,
+) -> AppResult<Json<ServerInfo>> {
+    if payload.name.trim().is_empty() {
+        return Err(AppError::BadRequest("Name is required".into()));
+    }
+
+    // enforce quota for non-admin users
+    if role != "admin" {
+        let count: i64 = sqlx::query_scalar("SELECT COUNT(*) FROM mcp_servers WHERE owner_id = $1")
+            .bind(user_id)
+            .fetch_one(&pool)
+            .await
+            .map_err(|e| {
+                error!(?e, "DB error counting servers");
+                AppError::Db(e)
+            })?;
+        let quota: i32 = sqlx::query_scalar("SELECT server_quota FROM users WHERE id = $1")
+            .bind(user_id)
+            .fetch_one(&pool)
+            .await
+            .map_err(|e| {
+                error!(?e, "DB error fetching quota");
+                AppError::Db(e)
+            })?;
+        if count as i32 >= quota {
+            return Err(AppError::BadRequest("Server quota exceeded".into()));
+        }
+    }
+
+    let api_key = Uuid::new_v4().to_string();
+    let webhook_secret = Uuid::new_v4().to_string();
+    let rec = sqlx::query(
+        "INSERT INTO mcp_servers (owner_id, name, server_type, config, status, api_key, webhook_secret, use_gpu, organization_id) \
+         VALUES ($1, $2, $3, $4, 'creating', $5, $6, $7, $8) \
+         RETURNING id, status, created_at",
+    )
+    .bind(user_id)
+    .bind(&payload.name)
+    .bind(&payload.server_type)
+    .bind(&payload.config)
+    .bind(&api_key)
+    .bind(&webhook_secret)
+    .bind(payload.use_gpu.unwrap_or(false))
+    .bind(payload.organization_id)
+    .fetch_one(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error creating server");
+        AppError::Db(e)
+    })?;
+
+    let id: i32 = rec.get("id");
+    let status: String = rec.get("status");
+    let created_at: chrono::DateTime<chrono::Utc> = rec.get("created_at");
+
+    let info = ServerInfo {
+        id,
+        name: payload.name,
+        server_type: payload.server_type.clone(),
+        status: status.clone(),
+        use_gpu: payload.use_gpu.unwrap_or(false),
+        organization_id: payload.organization_id,
+        api_key: api_key.clone(),
+        webhook_secret: webhook_secret.clone(),
+        manifest: None,
+        created_at,
+    };
+
+    let job = Job::Start {
+        server_id: id,
+        server_type: payload.server_type,
+        config: payload.config,
+        api_key,
+        use_gpu: payload.use_gpu.unwrap_or(false),
+    };
+    enqueue_job(&pool, &job).await;
+    let _ = job_tx.send(job).await;
+
+    Ok(Json(info))
+}
+
+use crate::job_queue::{Job, enqueue_job};
+
+pub async fn start_server(
+    Extension(pool): Extension<PgPool>,
+    Extension(job_tx): Extension<tokio::sync::mpsc::Sender<Job>>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+) -> AppResult<StatusCode> {
+    let rec = sqlx::query(
+            "SELECT server_type, config, api_key, status, use_gpu FROM mcp_servers WHERE id = $1 AND owner_id = $2"
+        )
+        .bind(id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error fetching server");
+            AppError::Db(e)
+        })?;
+    let Some(rec) = rec else {
+        return Err(AppError::NotFound);
+    };
+
+    let status: String = rec.get("status");
+    if status == "running" {
+        return Err(AppError::BadRequest("Server already running".into()));
+    }
+
+    let server_type: String = rec.get("server_type");
+    let config: Option<serde_json::Value> = rec.try_get("config").ok();
+    let api_key: String = rec.get("api_key");
+    let use_gpu: bool = rec.get("use_gpu");
+
+    set_status(&pool, id, "starting").await;
+
+    let job = Job::Start {
+        server_id: id,
+        server_type,
+        config,
+        api_key,
+        use_gpu,
+    };
+    enqueue_job(&pool, &job).await;
+    let _ = job_tx.send(job).await;
+
+    Ok(StatusCode::ACCEPTED)
+}
+
+pub async fn stop_server(
+    Extension(pool): Extension<PgPool>,
+    Extension(job_tx): Extension<tokio::sync::mpsc::Sender<Job>>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+) -> AppResult<StatusCode> {
+    let rec = sqlx::query("SELECT status FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error fetching server");
+            AppError::Db(e)
+        })?;
+    let Some(row) = rec else {
+        return Err(AppError::NotFound);
+    };
+    let status: String = row.get("status");
+    if status != "running" {
+        return Err(AppError::BadRequest("Server not running".into()));
+    }
+
+    set_status(&pool, id, "stopping").await;
+
+    let job = Job::Stop { server_id: id };
+    enqueue_job(&pool, &job).await;
+    let _ = job_tx.send(job).await;
+
+    Ok(StatusCode::ACCEPTED)
+}
+
+pub async fn delete_server(
+    Extension(pool): Extension<PgPool>,
+    Extension(job_tx): Extension<tokio::sync::mpsc::Sender<Job>>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+) -> AppResult<StatusCode> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error fetching server status");
+            AppError::Db(e)
+        })?;
+    let Some(_) = rec else {
+        return Err(AppError::NotFound);
+    };
+
+    let job = Job::Delete { server_id: id };
+    enqueue_job(&pool, &job).await;
+    let _ = job_tx.send(job).await;
+    Ok(StatusCode::NO_CONTENT)
+}
+
+pub async fn redeploy_server(
+    Extension(pool): Extension<PgPool>,
+    Extension(job_tx): Extension<tokio::sync::mpsc::Sender<Job>>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+) -> AppResult<StatusCode> {
+    let rec = sqlx::query(
+            "SELECT server_type, config, api_key, use_gpu FROM mcp_servers WHERE id = $1 AND owner_id = $2",
+        )
+        .bind(id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error fetching server");
+            AppError::Db(e)
+        })?;
+    let Some(rec) = rec else {
+        return Err(AppError::NotFound);
+    };
+    let server_type: String = rec.get("server_type");
+    let config: Option<serde_json::Value> = rec.try_get("config").ok();
+    let api_key: String = rec.get("api_key");
+    let use_gpu: bool = rec.get("use_gpu");
+
+    set_status(&pool, id, "redeploying").await;
+
+    let job = Job::Start {
+        server_id: id,
+        server_type,
+        config,
+        api_key,
+        use_gpu,
+    };
+    enqueue_job(&pool, &job).await;
+    let _ = job_tx.send(job).await;
+    Ok(StatusCode::ACCEPTED)
+}
+
+pub async fn webhook_redeploy(
+    Extension(pool): Extension<PgPool>,
+    Extension(job_tx): Extension<tokio::sync::mpsc::Sender<Job>>,
+    Path(id): Path<i32>,
+    headers: axum::http::HeaderMap,
+) -> AppResult<StatusCode> {
+    let rec = sqlx::query(
+        "SELECT webhook_secret, server_type, config, api_key, use_gpu FROM mcp_servers WHERE id = $1",
+    )
+    .bind(id)
+    .fetch_optional(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error fetching server for webhook");
+        AppError::Db(e)
+    })?;
+    let Some(rec) = rec else {
+        return Err(AppError::NotFound);
+    };
+    let secret: String = rec.get("webhook_secret");
+    let provided = headers
+        .get("x-webhook-secret")
+        .and_then(|v| v.to_str().ok())
+        .unwrap_or("");
+    if secret != provided {
+        return Err(AppError::Unauthorized);
+    }
+
+    let server_type: String = rec.get("server_type");
+    let config: Option<serde_json::Value> = rec.try_get("config").ok();
+    let api_key: String = rec.get("api_key");
+    let use_gpu: bool = rec.get("use_gpu");
+
+    set_status(&pool, id, "redeploying").await;
+
+    let job = Job::Start {
+        server_id: id,
+        server_type,
+        config,
+        api_key,
+        use_gpu,
+    };
+    enqueue_job(&pool, &job).await;
+    let _ = job_tx.send(job).await;
+    Ok(StatusCode::ACCEPTED)
+}
+
+/// Handle GitHub push webhooks using the stored secret for HMAC verification.
+pub async fn github_webhook(
+    Extension(pool): Extension<PgPool>,
+    Extension(job_tx): Extension<tokio::sync::mpsc::Sender<Job>>,
+    Path(id): Path<i32>,
+    headers: axum::http::HeaderMap,
+    body: axum::body::Bytes,
+) -> AppResult<StatusCode> {
+    use hmac::{Hmac, Mac};
+    use sha2::Sha256;
+
+    let rec = sqlx::query(
+        "SELECT webhook_secret, server_type, config, api_key, use_gpu FROM mcp_servers WHERE id = $1",
+    )
+    .bind(id)
+    .fetch_optional(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error fetching server for GitHub webhook");
+        AppError::Db(e)
+    })?;
+    let Some(rec) = rec else {
+        return Err(AppError::NotFound);
+    };
+    let secret: String = rec.get("webhook_secret");
+
+    // Verify HMAC signature
+    let sig_header = headers
+        .get("x-hub-signature-256")
+        .or_else(|| headers.get("x-hub-signature"))
+        .ok_or(AppError::BadRequest("Missing signature".into()))?;
+    let sig = sig_header
+        .to_str()
+        .map_err(|e| {
+            error!(?e, "Signature parse error");
+            AppError::BadRequest("Bad signature".into())
+        })?;
+    let expected = {
+        let mut mac =
+            Hmac::<Sha256>::new_from_slice(secret.as_bytes()).expect("HMAC can use any key length");
+        mac.update(&body);
+        format!("sha256={}", hex::encode(mac.finalize().into_bytes()))
+    };
+    if expected != sig {
+        return Err(AppError::Unauthorized);
+    }
+
+    if headers
+        .get("x-github-event")
+        .and_then(|v| v.to_str().ok())
+        != Some("push")
+    {
+        return Ok(StatusCode::OK); // ignore other events
+    }
+
+    let server_type: String = rec.get("server_type");
+    let config: Option<serde_json::Value> = rec.try_get("config").ok();
+    let api_key: String = rec.get("api_key");
+    let use_gpu: bool = rec.get("use_gpu");
+
+    set_status(&pool, id, "redeploying").await;
+
+    let job = Job::Start {
+        server_id: id,
+        server_type,
+        config,
+        api_key,
+        use_gpu,
+    };
+    enqueue_job(&pool, &job).await;
+    let _ = job_tx.send(job).await;
+    Ok(StatusCode::ACCEPTED)
+}
+
+pub async fn server_logs(
+    Extension(pool): Extension<PgPool>,
+    Extension(runtime): Extension<std::sync::Arc<dyn ContainerRuntime>>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+) -> AppResult<String> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error verifying server ownership");
+            AppError::Db(e)
+        })?;
+    let Some(_) = rec else {
+        return Err(AppError::NotFound);
+    };
+
+    match runtime.fetch_logs(id).await {
+        Ok(text) => {
+            let _ = sqlx::query("INSERT INTO server_logs (server_id, log_text) VALUES ($1, $2)")
+                .bind(id)
+                .bind(&text)
+                .execute(&pool)
+                .await;
+            Ok(text)
+        }
+        Err(_) => Err(AppError::Message("Failed to fetch logs".into())),
+    }
+}
+
+pub async fn stored_logs(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+) -> AppResult<Json<Vec<LogEntry>>> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error verifying server ownership");
+            AppError::Db(e)
+        })?;
+    let Some(_) = rec else {
+        return Err(AppError::NotFound);
+    };
+
+    let rows = sqlx::query("SELECT id, collected_at, log_text FROM server_logs WHERE server_id = $1 ORDER BY collected_at DESC LIMIT 20")
+        .bind(id)
+        .fetch_all(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error fetching logs");
+            AppError::Db(e)
+        })?;
+    let logs = rows
+        .into_iter()
+        .map(|r| LogEntry {
+            id: r.get("id"),
+            collected_at: r.get("collected_at"),
+            log_text: r.get("log_text"),
+        })
+        .collect();
+    Ok(Json(logs))
+}
+
+pub async fn stream_logs(
+    Extension(pool): Extension<PgPool>,
+    Extension(runtime): Extension<std::sync::Arc<dyn ContainerRuntime>>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+) -> AppResult<Sse<impl tokio_stream::Stream<Item = Result<Event, Infallible>>>>
+{
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error verifying server ownership");
+            AppError::Db(e)
+        })?;
+    let Some(_) = rec else {
+        return Err(AppError::NotFound);
+    };
+
+    let Some(rx) = runtime.stream_logs_task(id, pool.clone()) else {
+        return Err(AppError::Message("Docker error".into()));
+    };
+    let stream = ReceiverStream::new(rx).map(|line| Ok(Event::default().data(line)));
+    Ok(Sse::new(stream))
+}
+
+pub async fn add_metric(
+    pool: &PgPool,
+    server_id: i32,
+    event_type: &str,
+    details: Option<&serde_json::Value>,
+) -> Result<Metric, sqlx::Error> {
+    let rec = sqlx::query(
+        "INSERT INTO usage_metrics (server_id, event_type, details) VALUES ($1, $2, $3) RETURNING id, timestamp, event_type, details",
+    )
+    .bind(server_id)
+    .bind(event_type)
+    .bind(details)
+    .fetch_one(pool)
+    .await?;
+    let metric = Metric {
+        id: rec.get("id"),
+        timestamp: rec.get("timestamp"),
+        event_type: rec.get("event_type"),
+        details: rec.try_get("details").ok(),
+    };
+    if let Some(sender) = METRIC_CHANNELS.get(&server_id) {
+        let _ = sender.send(metric.clone());
+    }
+    Ok(metric)
+}
+
+pub async fn get_metrics(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+) -> AppResult<Json<Vec<Metric>>> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error verifying server ownership");
+            AppError::Db(e)
+        })?;
+    let Some(_) = rec else {
+        return Err(AppError::NotFound);
+    };
+    let rows = sqlx::query("SELECT id, timestamp, event_type, details FROM usage_metrics WHERE server_id = $1 ORDER BY timestamp DESC LIMIT 50")
+        .bind(id)
+        .fetch_all(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error fetching metrics");
+            AppError::Db(e)
+        })?;
+    let events = rows
+        .into_iter()
+        .map(|r| Metric {
+            id: r.get("id"),
+            timestamp: r.get("timestamp"),
+            event_type: r.get("event_type"),
+            details: r.try_get("details").ok(),
+        })
+        .collect();
+    Ok(Json(events))
+}
+
+pub async fn post_metric(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+    Json(payload): Json<MetricInput>,
+) -> AppResult<StatusCode> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error verifying server ownership");
+            AppError::Db(e)
+        })?;
+    let Some(_) = rec else {
+        return Err(AppError::NotFound);
+    };
+    add_metric(&pool, id, &payload.event_type, payload.details.as_ref())
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error inserting metric");
+            AppError::Db(e)
+        })?;
+    Ok(StatusCode::CREATED)
+}
+
+pub async fn stream_metrics(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+) -> AppResult<Sse<impl tokio_stream::Stream<Item = Result<Event, Infallible>>>> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error verifying server ownership");
+            AppError::Db(e)
+        })?;
+    let Some(_) = rec else {
+        return Err(AppError::NotFound);
+    };
+    let rx = subscribe_metrics(id);
+    let stream = BroadcastStream::new(rx).filter_map(|res| async move {
+        match res {
+            Ok(metric) => {
+                match serde_json::to_string(&metric) {
+                    Ok(data) => Some(Ok(Event::default().data(data))),
+                    Err(e) => {
+                        tracing::error!(?e, "metric serialization failed");
+                        None
+                    }
+                }
+            }
+            Err(_) => None,
+        }
+    });
+    Ok(Sse::new(stream))
+}
+
+pub async fn stream_status(
+    AuthUser { user_id, .. }: AuthUser,
+) -> Sse<impl tokio_stream::Stream<Item = Result<Event, Infallible>>> {
+    let rx = subscribe_status(user_id);
+    let stream = BroadcastStream::new(rx).filter_map(|res| async move {
+        match res {
+            Ok(upd) => serde_json::to_string(&upd)
+                .ok()
+                .map(|d| Ok(Event::default().data(d))),
+            Err(_) => None,
+        }
+    });
+    Sse::new(stream)
+}
+
+/// Proxy a request to the running MCP server and return its response.
+pub async fn invoke_server(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+    Json(payload): Json<serde_json::Value>,
+) -> AppResult<String> {
+    let rec = sqlx::query("SELECT api_key FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error verifying server ownership");
+            AppError::Db(e)
+        })?;
+    let Some(rec) = rec else {
+        return Err(AppError::NotFound);
+    };
+    let api_key: String = rec.get("api_key");
+
+    let client = reqwest::Client::new();
+    match client
+        .post(format!("http://mcp-server-{id}:8080/invoke"))
+        .header("Authorization", format!("Bearer {}", api_key))
+        .json(&payload)
+        .send()
+        .await
+    {
+        Ok(resp) => match resp.text().await {
+            Ok(text) => {
+                if let Err(e) = record_invocation(&pool, id, user_id, &payload, Some(&text)).await {
+                    error!(?e, "failed to record invocation");
+                }
+                Ok(text)
+            }
+            Err(_) => Err(AppError::Message("Failed to read response".into())),
+        },
+        Err(_) => {
+            if let Err(e) = record_invocation(&pool, id, user_id, &payload, None).await {
+                error!(?e, "failed to record invocation");
+            }
+            Err(AppError::BadGateway("Container unreachable".into()))
+        }
+    }
+}
+
+/// Return the stored MCP manifest for a server if available.
+pub async fn get_manifest(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+) -> AppResult<Json<serde_json::Value>> {
+    let rec = sqlx::query("SELECT manifest FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error verifying server ownership");
+            AppError::Db(e)
+        })?;
+    let Some(rec) = rec else {
+        return Err(AppError::NotFound);
+    };
+    let manifest: Option<serde_json::Value> = rec.try_get("manifest").ok();
+    match manifest {
+        Some(m) => Ok(Json(m)),
+        None => Err(AppError::NotFound),
+    }
+}
+
+/// Return a configuration snippet so agents can connect to this server easily.
+pub async fn client_config(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+) -> AppResult<Json<serde_json::Value>> {
+    let row = sqlx::query(
+        "SELECT api_key, manifest FROM mcp_servers WHERE id = $1 AND owner_id = $2",
+    )
+    .bind(id)
+    .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error fetching API key");
+            AppError::Db(e)
+        })?;
+    let Some(row) = row else {
+        return Err(AppError::NotFound);
+    };
+    let api_key: String = row.get("api_key");
+    let manifest: Option<serde_json::Value> = row.try_get("manifest").ok();
+
+    let domain_row = sqlx::query(
+        "SELECT domain FROM custom_domains WHERE server_id = $1 ORDER BY id LIMIT 1",
+    )
+    .bind(id)
+    .fetch_optional(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error fetching custom domain");
+        AppError::Db(e)
+    })?;
+    let invoke_url = if let Some(domain_row) = domain_row {
+        let domain: String = domain_row.get("domain");
+        format!("https://{}/invoke", domain)
+    } else {
+        format!("/api/servers/{id}/invoke")
+    };
+
+    let mut obj = serde_json::Map::new();
+    obj.insert("invoke_url".into(), serde_json::Value::String(invoke_url));
+    obj.insert("api_key".into(), serde_json::Value::String(api_key));
+    if let Some(m) = manifest {
+        obj.insert("manifest".into(), m);
+    }
+    Ok(Json(serde_json::Value::Object(obj)))
+}
+
+/// Internal helper used by workflows to invoke a server and parse JSON output.
+pub async fn invoke_server_internal(
+    pool: &PgPool,
+    user_id: i32,
+    id: i32,
+    payload: &serde_json::Value,
+) -> Result<serde_json::Value, (StatusCode, String)> {
+    let rec = sqlx::query("SELECT api_key FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(id)
+        .bind(user_id)
+        .fetch_optional(pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error verifying server ownership");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    let Some(rec) = rec else { return Err((StatusCode::NOT_FOUND, "Server not found".into())); };
+    let api_key: String = rec.get("api_key");
+    let client = reqwest::Client::new();
+    match client
+        .post(format!("http://mcp-server-{id}:8080/invoke"))
+        .header("Authorization", format!("Bearer {}", api_key))
+        .json(payload)
+        .send()
+        .await
+    {
+        Ok(resp) => match resp.json::<serde_json::Value>().await {
+            Ok(json) => Ok(json),
+            Err(_) => Err((StatusCode::BAD_GATEWAY, "Invalid response".into())),
+        },
+        Err(_) => Err((StatusCode::BAD_GATEWAY, "Container unreachable".into())),
+    }
+}
diff --git a/backend/src/services.rs b/backend/src/services.rs
new file mode 100644
index 0000000000000000000000000000000000000000..63b52f4ade688e48870dd2f4e21dbf09d437cf60
--- /dev/null
+++ b/backend/src/services.rs
@@ -0,0 +1,170 @@
+use crate::extractor::AuthUser;
+use axum::{
+    extract::{Extension, Path},
+    http::StatusCode,
+    Json,
+};
+use tracing::error;
+use serde::{Deserialize, Serialize};
+use sqlx::{PgPool, Row};
+
+#[derive(Serialize)]
+pub struct Service {
+    pub id: i32,
+    pub service_type: String,
+    pub config: Option<serde_json::Value>,
+    pub created_at: chrono::DateTime<chrono::Utc>,
+}
+
+#[derive(Deserialize)]
+pub struct CreateService {
+    pub service_type: String,
+    pub config: Option<serde_json::Value>,
+}
+
+#[derive(Deserialize)]
+pub struct UpdateService {
+    pub config: Option<serde_json::Value>,
+}
+
+pub async fn list_services(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(server_id): Path<i32>,
+) -> Result<Json<Vec<Service>>, (StatusCode, String)> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error while verifying server owner");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    if rec.is_none() {
+        return Err((StatusCode::NOT_FOUND, "Server not found".into()));
+    }
+    let rows = sqlx::query(
+        "SELECT id, service_type, config, created_at FROM service_integrations WHERE server_id = $1 ORDER BY id",
+    )
+    .bind(server_id)
+    .fetch_all(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error fetching services");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    let services = rows
+        .into_iter()
+        .map(|r| Service {
+            id: r.get("id"),
+            service_type: r.get("service_type"),
+            config: r.try_get("config").ok(),
+            created_at: r.get("created_at"),
+        })
+        .collect();
+    Ok(Json(services))
+}
+
+pub async fn create_service(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(server_id): Path<i32>,
+    Json(payload): Json<CreateService>,
+) -> Result<StatusCode, (StatusCode, String)> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error while verifying server owner");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    if rec.is_none() {
+        return Err((StatusCode::NOT_FOUND, "Server not found".into()));
+    }
+    sqlx::query(
+        "INSERT INTO service_integrations (server_id, service_type, config) VALUES ($1, $2, $3)",
+    )
+    .bind(server_id)
+    .bind(&payload.service_type)
+    .bind(&payload.config)
+    .execute(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error inserting service");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    Ok(StatusCode::CREATED)
+}
+
+pub async fn update_service(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path((server_id, service_id)): Path<(i32, i32)>,
+    Json(payload): Json<UpdateService>,
+) -> Result<StatusCode, (StatusCode, String)> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error while verifying server owner");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    if rec.is_none() {
+        return Err((StatusCode::NOT_FOUND, "Server not found".into()));
+    }
+    let result = sqlx::query(
+        "UPDATE service_integrations SET config = $1 WHERE id = $2 AND server_id = $3",
+    )
+    .bind(&payload.config)
+    .bind(service_id)
+    .bind(server_id)
+    .execute(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error updating service");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    if result.rows_affected() == 0 {
+        return Err((StatusCode::NOT_FOUND, "Service not found".into()));
+    }
+    Ok(StatusCode::NO_CONTENT)
+}
+
+pub async fn delete_service(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path((server_id, service_id)): Path<(i32, i32)>,
+) -> Result<StatusCode, (StatusCode, String)> {
+    let rec = sqlx::query("SELECT id FROM mcp_servers WHERE id = $1 AND owner_id = $2")
+        .bind(server_id)
+        .bind(user_id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error while verifying server owner");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    if rec.is_none() {
+        return Err((StatusCode::NOT_FOUND, "Server not found".into()));
+    }
+    let result = sqlx::query(
+        "DELETE FROM service_integrations WHERE id = $1 AND server_id = $2",
+    )
+    .bind(service_id)
+    .bind(server_id)
+    .execute(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error deleting service");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    if result.rows_affected() == 0 {
+        return Err((StatusCode::NOT_FOUND, "Service not found".into()));
+    }
+    Ok(StatusCode::NO_CONTENT)
+}
diff --git a/backend/src/vault.rs b/backend/src/vault.rs
new file mode 100644
index 0000000000000000000000000000000000000000..49222e929634952c54240d716e8e190229ee9c50
--- /dev/null
+++ b/backend/src/vault.rs
@@ -0,0 +1,74 @@
+use reqwest::Client;
+use std::time::Duration;
+use serde_json::Value;
+
+pub struct VaultClient {
+    base: String,
+    token: String,
+    client: Client,
+}
+
+impl VaultClient {
+    pub fn from_env() -> Option<Self> {
+        let base = std::env::var("VAULT_ADDR").ok()?;
+        let token = std::env::var("VAULT_TOKEN").ok()?;
+        Some(Self::new(base, token))
+    }
+
+    pub fn new(base: impl Into<String>, token: impl Into<String>) -> Self {
+        Self {
+            base: base.into().trim_end_matches('/').to_string(),
+            token: token.into(),
+            client: Client::builder()
+                .timeout(Duration::from_secs(10))
+                .build()
+                .expect("client build"),
+        }
+    }
+
+    async fn request(&self, method: reqwest::Method, path: &str, body: Option<Value>) -> Result<Value, reqwest::Error> {
+        let url = format!("{}/v1/{}", self.base, path);
+        let mut req = self
+            .client
+            .request(method, &url)
+            .header("X-Vault-Token", &self.token);
+        if let Some(b) = body {
+            req = req.json(&b);
+        }
+        let resp = req.send().await?.error_for_status()?;
+        if resp.status().is_success() && resp.content_length().unwrap_or(0) == 0 {
+            return Ok(Value::Null);
+        }
+        Ok(resp.json().await?)
+    }
+
+    pub async fn store_secret(&self, path: &str, value: &str) -> Result<(), reqwest::Error> {
+        self.request(
+            reqwest::Method::POST,
+            path,
+            Some(serde_json::json!({"data": {"value": value}})),
+        )
+        .await?
+        .clear();
+        Ok(())
+    }
+
+    pub async fn read_secret(&self, path: &str) -> Result<String, reqwest::Error> {
+        let val = self.request(reqwest::Method::GET, path, None).await?;
+        Ok(val["data"]["data"]["value"].as_str().unwrap_or("").to_string())
+    }
+
+    pub async fn delete_secret(&self, path: &str) -> Result<(), reqwest::Error> {
+        self.request(reqwest::Method::DELETE, path, None).await?;
+        Ok(())
+    }
+}
+
+trait Clear {
+    fn clear(self);
+}
+
+impl Clear for Value {
+    fn clear(self) {}
+}
+
diff --git a/backend/src/vector_dbs.rs b/backend/src/vector_dbs.rs
new file mode 100644
index 0000000000000000000000000000000000000000..b9bb39e3714fa6337fd9159358b2a3e919ce463f
--- /dev/null
+++ b/backend/src/vector_dbs.rs
@@ -0,0 +1,92 @@
+use crate::extractor::AuthUser;
+use crate::docker;
+use axum::{extract::{Extension, Path}, Json, http::StatusCode};
+use serde::{Serialize, Deserialize};
+use sqlx::{PgPool, Row};
+use tracing::error;
+
+#[derive(Serialize)]
+pub struct VectorDb {
+    pub id: i32,
+    pub name: String,
+    pub db_type: String,
+    pub url: Option<String>,
+    pub created_at: chrono::DateTime<chrono::Utc>,
+}
+
+#[derive(Deserialize)]
+pub struct CreateVectorDb {
+    pub name: String,
+    #[serde(default = "default_db_type")]
+    pub db_type: String,
+}
+
+fn default_db_type() -> String { "chroma".into() }
+
+pub async fn list_vector_dbs(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+) -> Result<Json<Vec<VectorDb>>, (StatusCode, String)> {
+    let rows = sqlx::query(
+        "SELECT id, name, db_type, url, created_at FROM vector_dbs WHERE owner_id = $1 ORDER BY id"
+    )
+    .bind(user_id)
+    .fetch_all(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error listing vector dbs");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    let list = rows.into_iter().map(|r| VectorDb{
+        id: r.get("id"),
+        name: r.get("name"),
+        db_type: r.get("db_type"),
+        url: r.try_get("url").ok(),
+        created_at: r.get("created_at"),
+    }).collect();
+    Ok(Json(list))
+}
+
+pub async fn create_vector_db(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Json(payload): Json<CreateVectorDb>,
+) -> Result<Json<VectorDb>, (StatusCode, String)> {
+    let rec = sqlx::query(
+        "INSERT INTO vector_dbs (owner_id, name, db_type) VALUES ($1,$2,$3) RETURNING id, created_at"
+    )
+    .bind(user_id)
+    .bind(&payload.name)
+    .bind(&payload.db_type)
+    .fetch_one(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error creating vector db");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    let id: i32 = rec.get("id");
+    let created_at: chrono::DateTime<chrono::Utc> = rec.get("created_at");
+    docker::spawn_vector_db_task(id, payload.db_type.clone(), pool.clone());
+    Ok(Json(VectorDb { id, name: payload.name, db_type: payload.db_type, url: None, created_at }))
+}
+
+pub async fn delete_vector_db(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+) -> Result<StatusCode, (StatusCode, String)> {
+    let rec = sqlx::query("SELECT owner_id FROM vector_dbs WHERE id = $1")
+        .bind(id)
+        .fetch_optional(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error fetching vector db");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    match rec {
+        Some(r) if r.get::<i32,_>("owner_id") == user_id => {},
+        _ => return Err((StatusCode::NOT_FOUND, "Vector DB not found".into())),
+    }
+    docker::delete_vector_db_task(id, pool.clone());
+    Ok(StatusCode::NO_CONTENT)
+}
diff --git a/backend/src/workflows.rs b/backend/src/workflows.rs
new file mode 100644
index 0000000000000000000000000000000000000000..26269ac0539429262bb5e5301dd9f5cb700246a7
--- /dev/null
+++ b/backend/src/workflows.rs
@@ -0,0 +1,148 @@
+use crate::extractor::AuthUser;
+use crate::servers::invoke_server_internal; // internal helper
+use axum::{
+    extract::{Extension, Path},
+    routing::{get, post, delete},
+    http::StatusCode,
+    Json, Router,
+};
+use serde::{Deserialize, Serialize};
+use sqlx::{PgPool, Row};
+use tracing::error;
+
+#[derive(Serialize)]
+pub struct Workflow {
+    pub id: i32,
+    pub name: String,
+    pub created_at: chrono::DateTime<chrono::Utc>,
+}
+
+#[derive(Deserialize)]
+pub struct CreateWorkflow {
+    pub name: String,
+    pub steps: Vec<i32>, // server ids
+}
+
+pub async fn list_workflows(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+) -> Result<Json<Vec<Workflow>>, (StatusCode, String)> {
+    let rows =
+        sqlx::query("SELECT id, name, created_at FROM workflows WHERE owner_id = $1 ORDER BY id")
+            .bind(user_id)
+            .fetch_all(&pool)
+            .await
+            .map_err(|e| {
+                error!(?e, "DB error listing workflows");
+                (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+            })?;
+    let wf = rows
+        .into_iter()
+        .map(|r| Workflow {
+            id: r.get("id"),
+            name: r.get("name"),
+            created_at: r.get("created_at"),
+        })
+        .collect();
+    Ok(Json(wf))
+}
+
+pub async fn create_workflow(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Json(payload): Json<CreateWorkflow>,
+) -> Result<Json<Workflow>, (StatusCode, String)> {
+    let rec = sqlx::query(
+        "INSERT INTO workflows (owner_id, name) VALUES ($1,$2) RETURNING id, created_at",
+    )
+    .bind(user_id)
+    .bind(&payload.name)
+    .fetch_one(&pool)
+    .await
+    .map_err(|e| {
+        error!(?e, "DB error creating workflow");
+        (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+    })?;
+    let wf_id: i32 = rec.get("id");
+    for (pos, sid) in payload.steps.iter().enumerate() {
+        if let Err(e) = sqlx::query(
+            "INSERT INTO workflow_steps (workflow_id, position, server_id) VALUES ($1,$2,$3)",
+        )
+        .bind(wf_id)
+        .bind((pos + 1) as i32)
+        .bind(*sid)
+        .execute(&pool)
+        .await
+        {
+            error!(?e, "DB error inserting step");
+            return Err((StatusCode::INTERNAL_SERVER_ERROR, "DB error".into()));
+        }
+    }
+    Ok(Json(Workflow {
+        id: wf_id,
+        name: payload.name,
+        created_at: rec.get("created_at"),
+    }))
+}
+
+pub async fn delete_workflow(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+) -> Result<StatusCode, (StatusCode, String)> {
+    let res = sqlx::query("DELETE FROM workflows WHERE id=$1 AND owner_id=$2")
+        .bind(id)
+        .bind(user_id)
+        .execute(&pool)
+        .await
+        .map_err(|e| {
+            error!(?e, "DB error deleting workflow");
+            (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+        })?;
+    if res.rows_affected() == 0 {
+        return Err((StatusCode::NOT_FOUND, "Workflow not found".into()));
+    }
+    Ok(StatusCode::NO_CONTENT)
+}
+
+#[derive(Deserialize)]
+pub struct InvokeInput {
+    pub input: serde_json::Value,
+}
+
+pub async fn invoke_workflow(
+    Extension(pool): Extension<PgPool>,
+    AuthUser { user_id, .. }: AuthUser,
+    Path(id): Path<i32>,
+    Json(payload): Json<InvokeInput>,
+) -> Result<Json<serde_json::Value>, (StatusCode, String)> {
+    let steps =
+        sqlx::query("SELECT server_id FROM workflow_steps WHERE workflow_id=$1 ORDER BY position")
+            .bind(id)
+            .fetch_all(&pool)
+            .await
+            .map_err(|e| {
+                error!(?e, "DB error fetching steps");
+                (StatusCode::INTERNAL_SERVER_ERROR, "DB error".into())
+            })?;
+    if steps.is_empty() {
+        return Err((StatusCode::BAD_REQUEST, "Workflow has no steps".into()));
+    }
+    let mut data = payload.input;
+    for row in steps {
+        let sid: i32 = row.get("server_id");
+        // call server internally; assumes same user ownership enforced in invoke_server_internal
+        match invoke_server_internal(&pool, user_id, sid, &data).await {
+            Ok(out) => data = out,
+            Err(e) => return Err(e),
+        }
+    }
+    Ok(Json(data))
+}
+
+pub fn routes() -> Router {
+    Router::new()
+        .route("/api/workflows", get(list_workflows).post(create_workflow))
+        .route("/api/workflows/:id", delete(delete_workflow))
+        .route("/api/workflows/:id/invoke", post(invoke_workflow))
+}
diff --git a/backend/tests/jwt_secret.rs b/backend/tests/jwt_secret.rs
new file mode 100644
index 0000000000000000000000000000000000000000..7a5190186b439c7115a4aa47dc8fe72df5b410e8
--- /dev/null
+++ b/backend/tests/jwt_secret.rs
@@ -0,0 +1,12 @@
+use std::process::Command;
+
+#[test]
+fn fails_without_jwt_secret() {
+    let exe = env!("CARGO_BIN_EXE_backend");
+    let output = Command::new(exe)
+        .env_remove("JWT_SECRET")
+        .output()
+        .expect("failed to run backend binary");
+    assert!(!output.status.success());
+}
+
diff --git a/backend/tests/metrics.rs b/backend/tests/metrics.rs
new file mode 100644
index 0000000000000000000000000000000000000000..370bc1d5dc675e79cd4a54b5021684b7981efa18
--- /dev/null
+++ b/backend/tests/metrics.rs
@@ -0,0 +1,18 @@
+use axum::{routing::get, Router};
+use axum::body::Body;
+use axum::http::{Request, StatusCode};
+use axum_prometheus::PrometheusMetricLayer;
+use tower::ServiceExt;
+
+#[tokio::test]
+async fn metrics_returns_ok() {
+    let (layer, handle) = PrometheusMetricLayer::pair();
+    let app = Router::new()
+        .route("/metrics", get(move || async move { handle.render() }))
+        .layer(layer);
+    let response = app
+        .oneshot(Request::builder().uri("/metrics").body(Body::empty()).unwrap())
+        .await
+        .unwrap();
+    assert_eq!(response.status(), StatusCode::OK);
+}
diff --git a/backend/tests/root.rs b/backend/tests/root.rs
new file mode 100644
index 0000000000000000000000000000000000000000..41f8de724aaf25143c85c421a9db061d665043ef
--- /dev/null
+++ b/backend/tests/root.rs
@@ -0,0 +1,18 @@
+use axum::{Router, routing::get};
+use axum::http::{Request, StatusCode};
+use axum::body::Body;
+use tower::ServiceExt; // for `oneshot`
+
+async fn root() -> &'static str { "MCP Host API" }
+
+#[tokio::test]
+async fn root_responds_ok() {
+    let app = Router::new().route("/", get(root));
+    let response = app
+        .oneshot(Request::builder().uri("/").body(Body::empty()).unwrap())
+        .await
+        .unwrap();
+    assert_eq!(response.status(), StatusCode::OK);
+    let body = hyper::body::to_bytes(response.into_body()).await.unwrap();
+    assert_eq!(body, "MCP Host API".as_bytes());
+}
diff --git a/cli/setup.py b/cli/setup.py
new file mode 100644
index 0000000000000000000000000000000000000000..92f5e0f88fc74e1357d65ed25d97161b4d4ddcf2
--- /dev/null
+++ b/cli/setup.py
@@ -0,0 +1,18 @@
+from pathlib import Path
+from setuptools import setup
+
+root = Path(__file__).resolve().parents[1]
+readme = (root / "README.md").read_text()
+
+setup(
+    name="mcp-host-cli",
+    version="0.1.0",
+    py_modules=["mcp_cli", "gen_python_sdk", "gen_ts_sdk", "get_config"],
+    package_dir={"": "../scripts"},
+    entry_points={"console_scripts": ["mcp-cli=mcp_cli:main"]},
+    description="CLI utilities for MCP Host",
+    long_description=readme,
+    long_description_content_type="text/markdown",
+    install_requires=["requests", "fastapi", "uvicorn"],
+    python_requires=">=3.8",
+)
diff --git a/design-vision.md b/design-vision.md
new file mode 100644
index 0000000000000000000000000000000000000000..76d8816096642ab8e6b10f979715a46e2d074319
--- /dev/null
+++ b/design-vision.md
@@ -0,0 +1,27 @@
+# Frontend Design Vision
+
+This document outlines the design direction for MCP Host. The goal is a modern, clean interface that showcases the platform's capabilities while remaining accessible.
+
+## Principles
+- **Clarity first** – pages should present a single clear action.
+- **Consistency** – use shared components and a cohesive color palette.
+- **Responsiveness** – design mobile‑first with Tailwind's utilities.
+- **Component driven** – build UI from reusable pieces inspired by shadcn/ui.
+
+## Visual Style
+- Base colors: slate background with indigo accents.
+- Typography: Geist Sans and Mono fonts.
+- Buttons and cards use subtle shadows and rounded corners.
+
+## Planned Components
+- `Card` – container with padding and border used for lists and feature highlights.
+- `Section` – page section with heading and optional description.
+- `Button` – primary and secondary variants with disabled state.
+
+## Pages
+1. **Landing** – hero banner, feature cards linking to Docs, Blog, and Marketplace.
+2. **Marketplace** – list of prebuilt MCP images pulled from `/api/marketplace` using the `Card` component.
+3. **Vector DBs** – manage managed vector databases using `/api/vector-dbs` endpoints.
+4. **Dashboard** – servers list, capabilities, logs, metrics, and evaluation results.
+
+This vision will guide iterative enhancements to deliver a polished, professional frontend.
diff --git a/frontend/.gitignore b/frontend/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..5ef6a520780202a1d6addd833d800ccb1ecac0bb
--- /dev/null
+++ b/frontend/.gitignore
@@ -0,0 +1,41 @@
+# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
+
+# dependencies
+/node_modules
+/.pnp
+.pnp.*
+.yarn/*
+!.yarn/patches
+!.yarn/plugins
+!.yarn/releases
+!.yarn/versions
+
+# testing
+/coverage
+
+# next.js
+/.next/
+/out/
+
+# production
+/build
+
+# misc
+.DS_Store
+*.pem
+
+# debug
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+.pnpm-debug.log*
+
+# env files (can opt-in for committing if needed)
+.env*
+
+# vercel
+.vercel
+
+# typescript
+*.tsbuildinfo
+next-env.d.ts
diff --git a/frontend/README.md b/frontend/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..e215bc4ccf138bbc38ad58ad57e92135484b3c0f
--- /dev/null
+++ b/frontend/README.md
@@ -0,0 +1,36 @@
+This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).
+
+## Getting Started
+
+First, run the development server:
+
+```bash
+npm run dev
+# or
+yarn dev
+# or
+pnpm dev
+# or
+bun dev
+```
+
+Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
+
+You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.
+
+This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.
+
+## Learn More
+
+To learn more about Next.js, take a look at the following resources:
+
+- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
+- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
+
+You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!
+
+## Deploy on Vercel
+
+The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.
+
+Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
diff --git a/frontend/app/blog/page.tsx b/frontend/app/blog/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..4d004f82fad4a6eb1c6cf4586de9c9ea534e06a4
--- /dev/null
+++ b/frontend/app/blog/page.tsx
@@ -0,0 +1,26 @@
+import Section from '../../components/Section';
+
+const posts = [
+  {
+    id: 1,
+    title: 'Introducing MCP Host',
+    excerpt: 'A new way to manage Model Context Providers with ease.'
+  },
+  {
+    id: 2,
+    title: 'Custom Images Explained',
+    excerpt: 'How to bring your own MCP image for maximum flexibility.'
+  }
+];
+
+export default function BlogPage() {
+  return (
+    <div className="space-y-8">
+      {posts.map(p => (
+        <Section key={p.id} title={p.title}>
+          <p>{p.excerpt}</p>
+        </Section>
+      ))}
+    </div>
+  );
+}
diff --git a/frontend/app/docs/page.tsx b/frontend/app/docs/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..e0570c2f26264fe6e973ea78dcc89eff32b4040e
--- /dev/null
+++ b/frontend/app/docs/page.tsx
@@ -0,0 +1,147 @@
+import Section from '../../components/Section';
+import Button from '../../components/Button';
+
+export default function DocsPage() {
+  return (
+    <div className="space-y-8">
+      <Section title="Getting Started">
+        <p>
+          MCP Host lets you deploy Model Context Providers on demand. Start by
+          creating an account and launching your first server.
+        </p>
+        <Button href="/servers/new">Create a server</Button>
+      </Section>
+      <Section title="Bring Your Own MCP">
+        <p>
+          Prefer a custom image? Select the <em>Custom (BYO image)</em> option
+          when creating a server and provide your Docker image name.
+        </p>
+        <p className="mt-2">
+          You can also pass configuration values as environment variables by
+          entering <code>KEY=value</code> pairs in the form. These are injected
+          into the container with a <code>CFG_</code> prefix.
+        </p>
+        <ul className="list-disc pl-6 mt-2 space-y-1">
+          <li>
+            Example: <code>API_TOKEN=my-secret</code> becomes{' '}
+            <code>CFG_API_TOKEN</code> inside your container.
+          </li>
+          <li>
+            Use any image from Docker Hub or a private registry, e.g.
+            <code>ghcr.io/you/custom-mcp:latest</code>.
+          </li>
+          <li>
+            If your image expects a custom entrypoint or command, bake it into
+            the image itself so MCP Host can run it with a simple{' '}
+            <code>docker run</code>.
+          </li>
+          <li>
+            Alternatively provide a git repository URL and MCP Host will clone
+            and build the Docker image automatically.
+          </li>
+          <li>
+            Specify a <code>branch</code> to build from if you don't want the
+            default <code>main</code> branch.
+          </li>
+          <li>
+            Trigger redeploys by calling the <code>/api/servers/&lt;id&gt;/webhook?secret=...</code>
+            endpoint from your CI or Git provider. The secret is returned when the server is created.
+          </li>
+          <li>
+            GitHub users can configure a push webhook pointing to
+            <code>/api/servers/&lt;id&gt;/github</code> with the same secret to
+            verify the payload.
+          </li>
+          <li>
+            The server status will show <em>cloning</em> and <em>building</em>
+          while the image is prepared, and progress logs appear on the Logs
+          tab.
+        </li>
+        <li>
+          Builds run in a temporary directory with <code>--pull</code> and
+          <code>--no-cache</code> flags for added security, so each build uses
+          fresh base images and no leftover layers.
+        </li>
+          <li>
+            MCP Host parses your Dockerfile for <code>EXPOSE</code> instructions
+            and warns if port <code>8080</code> is not exposed, which the reverse
+            proxy expects.
+          </li>
+          <li>
+            If no Dockerfile is present, MCP Host detects Node, Python, or Rust
+            projects and generates one automatically before building.
+          </li>
+          <li>
+            Set a <code>REGISTRY</code> environment variable and built images
+            will be pushed after the build completes.
+          </li>
+          <li>
+            Enable the <strong>GPU</strong> option when creating a server to run
+            the container with Nvidia GPUs if available.
+          </li>
+          <li>
+            MCP Host automatically restarts containers if they crash so your
+            deployments stay online.
+          </li>
+          <li>
+            Test your deployment by sending JSON to
+            <code>/api/servers/&lt;id&gt;/invoke</code> or using the Invoke page
+            from the dashboard.
+          </li>
+          <li>
+            After the container starts, MCP Host fetches
+            <code>/.well-known/mcp.json</code> and stores the manifest so agents
+            can plug in automatically.
+          </li>
+          <li>
+            Capabilities listed in the manifest are saved and available from
+            <code>/api/servers/&lt;id&gt;/capabilities</code> for easy agent
+            configuration.
+          </li>
+          <li>
+            Fetch <code>/api/servers/&lt;id&gt;/client-config</code> to receive
+            a ready-to-use configuration snippet with the invoke URL,
+            API key, and stored manifest.
+          </li>
+        </ul>
+      </Section>
+      <Section title="Streaming Metrics">
+        <p>
+          Servers publish real-time usage metrics via Server-Sent Events. Our
+          dashboard visualizes these with interactive charts so you can monitor
+          activity live.
+        </p>
+      </Section>
+      <Section title="Prebuilt Service Integrations">
+        <p>
+          Attach managed services like Redis or S3 to your MCP servers with a few clicks.
+          Provide any connection details as JSON when adding a service and MCP Host
+          injects the relevant environment variables (<code>REDIS_URL</code>, <code>S3_BUCKET</code>, etc.)
+          when the container starts.
+        </p>
+        <p className="mt-2">
+          You can edit or remove integrations later from the Services page.
+        </p>
+      </Section>
+      <Section title="Ingestion Pipelines">
+        <p>
+          Create recurring jobs that fetch data from an external URL and ingest
+          it into one of your managed vector databases. Use the
+          <code>/api/ingestion-jobs</code> endpoints to manage these jobs.
+        </p>
+      </Section>
+      <Section title="Workflows">
+        <p>
+          Combine multiple MCP servers into a pipeline. Use <code>/api/workflows</code> to create and invoke them.
+        </p>
+      </Section>
+      <Section title="Resource Limits">
+        <p>
+          Constrain server resource usage by including <code>cpu_limit</code> (number of cores)
+          and <code>memory_limit</code> (MB) in the server configuration JSON. Both Docker and
+          Kubernetes runtimes respect these limits when launching containers.
+        </p>
+      </Section>
+    </div>
+  );
+}
diff --git a/frontend/app/evaluations/page.tsx b/frontend/app/evaluations/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..bdf6094b18639fe62b1052f528845aaa0c4c3931
--- /dev/null
+++ b/frontend/app/evaluations/page.tsx
@@ -0,0 +1,45 @@
+'use client';
+import { useEffect, useState } from 'react';
+import Alert from '../../components/Alert';
+import Card from '../../components/Card';
+
+interface Row { server: string; average_score: number; runs: number; }
+
+export default function EvaluationsPage() {
+  const [rows, setRows] = useState<Row[]>([]);
+  const [error, setError] = useState('');
+
+  useEffect(() => {
+    fetch('/api/evaluations/summary', { credentials: 'include' })
+      .then(r => (r.ok ? r.json() : Promise.reject('failed')))
+      .then(setRows)
+      .catch(() => setError('Failed to load results'));
+  }, []);
+
+  return (
+    <div className="mt-6 space-y-4">
+      <h1 className="text-xl font-semibold">Server Evaluation Scores</h1>
+      {error && <Alert message={error} />}
+      <Card>
+        <table className="w-full text-left border-collapse">
+        <thead>
+          <tr className="border-b">
+            <th className="p-2">Server</th>
+            <th className="p-2">Average Score</th>
+            <th className="p-2">Runs</th>
+          </tr>
+        </thead>
+        <tbody>
+          {rows.map((r, i) => (
+            <tr key={i} className="border-b">
+              <td className="p-2">{r.server}</td>
+              <td className="p-2">{r.average_score.toFixed(2)}</td>
+              <td className="p-2">{r.runs}</td>
+            </tr>
+          ))}
+        </tbody>
+      </table>
+      </Card>
+    </div>
+  );
+}
diff --git a/frontend/app/favicon.ico b/frontend/app/favicon.ico
new file mode 100644
index 0000000000000000000000000000000000000000..718d6fea4835ec2d246af9800eddb7ffb276240c
GIT binary patch
literal 25931
zcmeHv30#a{`}aL_*G&7qml|y<+KVaDM2m#dVr!KsA!#An?kSQM(q<_dDNCpjEux83
zLb9Z^XxbDl(w>%i@8hT6>)&Gu{h#Oeyszu?xtw#Zb1mO<?sK2}EE5RAKnxHU7lft+
zNRAPL3?T?25I&drAjl1ssi=G|D?(7bFsgtO(2o>{pgX9699l+Qppw7jXaYf~-84xW
z)w4x8?=youko|}Vr~(D$UX<xm7|19n6Hxvd5m6xx<*9a4%RmR{en}E&p$X-wy5A}T
zU0^dwXVA>IbiXABHh`p1?nn8Po~fxRJv}|0e(BPs|G`(TT%kKVJAdg5*Z|x0leQq0
zkdUBvb#>9F()jo|T~kx@OM8$9wzs~t2l;K=woNssA3l6|sx2r3+kdfVW@e^8e*E}v
zA1y5{bRi+3Z`uD3{F7LgFJDdvm;nJilkzDku>BwXH(8ItVCXk*-lSJnR?-2UN%<G)
zWdETe=&R39RaKR)udn|#TOgZ!e!yM=<=+`Uz{l^5UtkZ2fHDQ;UwMB}v%l$A-`~F-
z{Qr^x^CSUf63Sry{6y#+`<sMA?dPFvg)$lC_RkFRKnCi7&P<a6>hJ){&rlvg`CDTj
z)Bzo!3v7Ou#83zEDEFcKt(f1E0~=rqeEbTnMvWR#{+9pg%7G8y>u1OVRUSoox-ovF
z2Ydma(;=YuBY(eI|04{hXzZD6_f(v~H;C~y5=DhAC{MMS>2fm~1H_t2$56pc$NH8(
z5bH|<)71dV-_oCHIrzrT`2s-5w_+2CM0$95I6X8p^r!gHp+j_gd;9O<1~CEQQGS8)
zS9Qh3#p&JM-G8rHekNmKVewU;pJRcTAog68KYo^dRo}(M<!8cv(gkb9@A>>36U4Us
zfgYWSiHZL3;lpWT=<n~R&zm>zNAW>Dh#mB!_@Lg%$ms8N-;aPqMn+C2HqZgz&9~Eu
z4|Kp<`$q)Uw1R?y(~S>ePdonHxpV1#eSP1B;Ogo+-Pk}6#0GsZZ5!||ev2MGdh}_m
z{DeR7?0-1^zVs&`AV6<!ZvGbtU{7FdY&`9DeD(=q|M30$GCs(E?S0J1$e@G0#Z=wz
zl)*a>Vt;r3`I`OI_wgs*w=eO%_#7Kepl{B<UyBc9U%rn&@xFZ-e{%i>@xiyCANc(l
zzIyd4y|c6PXWq9-|KM8(zIk8LPk(>a)zyFWjhT!$HJ$qX1vo@d25W<<x-(q{Yn-pG
zKTz?fwGmh&&2-F3f57**)?Xk#p#S9h^DhK{VVKE&0KR^-_MMD9nf@pDACnmVll!kp
z3?Tha?LWW70P;AL{}cP~sW|?W|MbA09{7Kt2f!i(y>fvZQ2zUz5WRc(UnFMKHwe1|
zWmlB1qdbiA(C0jmnV<}GfbKtmcu^2*P^O?<jWWPHxu*D53Uq)j1!ZtH3Vi&#Nd^rV
zj`B>MBLZKt|As~ge8&AAO~2K@zbXelK|4T<{|y4`raF{=72kC2Kn(L4YyenWgrPiv
z@^mr$t{#X5VuIMeL!7Ab6_kG$&#&5p*Z{+?5U|TZ`B!7llpVmp@skYz&n^8QfPJzL
z0G6K_OJM9x+Wu2gfN45phANGt{7=C>i34CV{Xqlx(fWpeAoj^N0Biu`w+MVcCUyU*
zDZuzO0>4Z6fbu^T_arWW5n!E45vX8N=bxTVeFoep_G#VmNlQzAI_KTIc{6>c+04vr
zx@W}zE5JNSU>!THJ{J=cqjz+4{L4A{Ob9$ZJ*S1?Ggg3klFp!+Y1@K+pK1DqI|_gq
z5ZDXVpge8-cs!o|;K73#YXZ3AShj50wBvuq3NTOZ`M&qtjj#GOFfgExjg8Gn8>Vq5
z`85n+9|!iLCZF5$HJ$Iu($dm?8~-ofu}tEc+-pyke=3!im#6pk_Wo8IA|fJwD&~~F
zc16osQ)EBo58U7XDuMexaPRjU@h8tXe%S{fA0NH3vGJFhuyyO!Uyl2^&EOpX{9As0
zWj+P>{@}jxH)8|r;2HdupP!vie{sJ28b&bo!8`D^x}TE$%zXNb^X1p@0PJ86`dZyj
z%ce7*{^oo+6%&~I!8hQy-vQ7E)0t0ybH4l%KltWOo~8cO`T=157JqL(oq_rC%ea&4
z2NcTJe-HgFjNg-gZ$6!Y`SMHrlj}Etf7<Kk?_r;;``Uc^3+u}-v3@Q8<@$Nr`<F?K
z-%F>?r!zQTPPSv}{so2e>Fjs1{<qUF=hGRSFDG$<z3x<+@%{Vd%a`e+qodRP&D<om
zAEn>gzk~LGeesX%r(Lh6rbhSo_n)@@G-FTQy93;l#E)hgP@d_SGvyCp0~o(Y;Ee8{
zdVUDbHm5`2taPUOY^MAGOw*<R_VaVlPH<<CgYr!E->>=s7=Gst=D+p+2yON!0%Hk`
zz5mAhyT4lS*T3LS^WSxUy86q&GnoHxzQ6vm8)VS}_zuqG?+3td68_x;etQAdu@sc6
zQJ&5|4(I?~3d-QOAODHpZ=hlSg(lBZ!JZWCtHHSj`0Wh93-Uk)_S%zsJ~aD>{`A0~
z9{AG(e|q3g5B%wYKRxiL2Y$8(4w<boVrLOyLG9R$m+7N>6bzchKuloQW#e&S3n+P-
z8!ds-%f;TJ1>)v)##>gd{PdS2Oc3VaR`fr=`O8QIO(6(N!A?pr5C#6fc~Ge@N%Vvu
zaoAX2&(a6eWy_q&UwOhU)|P3J0Qc%OdhzW=F4D|pt0E4osw;%<%Dn58hAWD^XnZD=
z>9~H(3bmLtxpF?a7su6J7M*x1By7YSUbxGi)Ot0P77`}P<HJ;%@cvfCkvm6xcMjdY
zed_u6xK)F%|1Hy`)`e~K(f*MqTJ?92I+4lga{A5`-U@Cab35G6unNk<*dpB|Rtkp;
z?32o^yBlJsuA-^abQ~7;%<oa^k<DbKc{lOW2!yM#nEALvv)IhY7b|Wfg(UhtiurTM
zY-B6L26$JQo&Kt3nh3JTJ)garEgw^{uEM3__%b$U5{~+aMO*k)6R#grkER2`U6KS-
z=j1=QhCkuy%iiHWrqH8CeGNw*C?epTpl2Bo@ugUPKRFeiVHOpL7PHu-SAgX@qmTGH
z_%ePz1`io8XDfwLmip;Rn;1yo+3>3{)&5Un{KD?`-e?r21!4vTTnN(4Y6Lin?UkSM
z`MXCTC1@4A4~mvz%Rh2&EwY))LeoT=*`tMoqcEXI>TZU9WTP#l?uFv+@Dn~b(>xh2
z;>B?;Tz2SR&KVb>vGiBSB`@U7VIWFSo=LDSb9F{GF^DbmWAfpms8Sx9OX4CnBJca3
zlj9(x!dIjN?OG1X4l*imJNvRCk}F%!?SOfiOq5y^mZW)jFL@<gIi}tCXee1<sGV$i
z4r_`X#mEQbiDh!Efji0GjM9z-0bF}p0(*s(OzMJ|;K&OJBar<ARLp}T>a|r-@d#f7
z2gmU8L3IZq0ynIws=}~m^#@&C%J6QFo~Mo4V`>v7MI-_!EBMMtb%_M&kvAaN)@ZVw
z+`toz&WG#HkWDjnZE!6nk{e-oFdL^$YnbOCN}JC&{$#$O27@|Tn-skXr)2ml2~O!5
zX+gYoxhoc7qoU?C^3~&!U?kRFtnSEecWuH0B0OvLodgUAi}8p1<ZO0#U-k07ifx!>
zrO6RSXHH}D<I*>Mc$&|?D004<Y&c6)m74d`LOLU@ruR+Um4>DiOVMHV8kXCP@7NKB
zgaZq^^O<7PoKEp72kby@W0Z!Y*A<g|TlOeriuPP`vK2IntATvs?Iv|J14j&;NFSFo
zyJ+sca?G+8C%!b{Sq=6cJJqS>y{&vfg#C&gG@YVR9g?FEocMUi1gSN$+V+ayF45{a
zuDZDT<?u;)RfLQwg>N}mS|;BO%gEf}pjBfN2-gIrU#G5~cucA;dokXW89%>AyXJJI
z9X4Ul<x{xc_m~`mWBP0<g-{#wm}Vv~Ef3pKWC&N_<~88zSbEk;;+{DnJ9-u&Zc74s
zJ6TCQyl_^|5cY;wmDdrU@LTL-3v0H#Ui?8ICQV{imof1MHuM$`e*ux>IWA|ZYHgbI
z5?oFk@A=Ik7lrEQPDH!H+b`7_Y~aDb_qa=B2^Y&Ow41cU=4WDd40dp5(QS-WMN-=Y
z9g;6_-JdNU;|6cPwf$ak*aJIcwL@1n$#l~zi{c{EW?T;DaW*E8DYq?Umtz{nJ&w-M
zEMyT<MDk{HKbd#ckg5-pS_?QUVhZv?&Q-ioBS}$nvBd)nE7YO0deN~G(#zCJAbY$E
z!)g3Ytl=_NDUV%pykcE+Q<{EoZ_4FR@&#d<hqs%N>DrC&9K$d|kZe2#ws6)L=7K+{
zQw{XnV6UC$6-rW0emqm8wJoeZK)wJIcV?dST}Z;G0Arq{dVDu0&4kd%N!3F1*;*pW
zR&qUiFzK=@44#QGw7k1`3t_d8&*kBV->O##t|tonFc2YWrL7_eqg+=+k;!F-`^b8>
z#KWCE8%u4k@EprxqiV$VmmtiWxDLgnGu$Vs<8rppV5E<MCr+anDo)-{XRlCJ;D#M(
zT=3WgR02;Nm!54biUb^FtzPh8iGrf412epnki-k+G4mdkzC|lJqaRMbb0~Jjp-{}I
z5Do5afZi>ajBXL4nyyZM$SWVm!wnCj-B!Wjqj5-5dNXukI2$$|Bu3Lrw}z65Lc=1G
z^-#WuQOj$hwNGG?*CM_TO8Bg-1+qc>J7k5c51U8g?ZU5n?HYor;~JIjoWH-G>AoUP
ztrWWLbRNqIjW#RT*WqZgPJXU7C)VaW5}MiijYbABmzoru6EmQ*N8cVK7a3|aOB#O&
zBl8JY2WKfmj;h#Q!pN%9o@VNLv{OUL?rixHwOZuvX7{IJ{(EdPpuVFoQqIOa7gi<U
zTpbX&UCeYeNu>LVkBOKL@^smUA!tZ1CKRK}#SSM)iQHk)*R~?M!qkCruaS!#oIL1c
z<cK@1=jX>?J<BS8bpdt^R+}%A_DEhF^%o}8e!!lc`Y!qU>;U~&FfH#*98^G?i}pA{
z9Jg36t4=%6mhY(quYq*vSxptes9qy|7xSlH?G=S@>u>Ebe;|LVhs~@+06N<4CViBk
zUiY$thvX;>Tby6z9Y1e<Q<iIG*|o$r?OTFp`s)@_nHs4LeWbGvg7^}NK)>dAMQaiH
zm^r3v#$Q#2T=X>bsY#D%s!bhs^M9PMAcHbCc0FMHV{u-dwlL;a1eJ63v5U*?Q_8JO
zT#50!RD619#j_Uf))0ooADz~*9&lN!bBDRUgE>Vud-i5ck%vT=r^yD*^?Mp@Q^v+V
zG#-?gKlr}Eeqifb{|So?HM&g91<J5P5=Ly{?(NNY{6`O~L5r@sJe3rNZn06%SLk);
z9?hvE^Hr{!*G$<_doyzGn#*z*#}?)8dH=eYTgvc)T~}Jw!kCv68<+KL5{5?EXtDAZ
zWeNqp8%KIuBi&icn5s815Vho<+99VW1~m@L8l0=$c`t-L{q))~<!p*~vCdUcBcPz`
zyUi}!-k_`G{>P8|av8hQoCmQXkd?7wIJw<dY^{|7OQJUHKB~nksN_|Xy;DL?xjxU^
zbMa`WdfTBnr<wTd$mY&SgJ4U|X``k`#`gN@M+0x2W{YgC3kbLk<uYFJWglkx_)2#b
ztRiuA!EK9o)f`I2k)l;Of%E`ff91WlZh8yfRi6#N-mC`Ma(yr~U82SyAhc9B+ur!f
zP-3igg*KeYs9mGOAw@OaXYy9DnGjn0<m`JH&Q^h}^!h+uS9Ct*o-oEy(?iT6Yco>b
z_^v8bbg`<ZOL)a;i=IdfK0Zvw4nXsoC?eTOMpY)_ptiORm%J(1CD3dE0Z%Vy<2iHp
zcp>SAn{I*4bH$u(RZ6*x<DqKJ+5;a6Jq~=Y8V&c?Vsyq88!2nD?H?Eww58Mqt$7R8
z5BMjmKx>UhuA~hc=8czK8SHEKTzSxgbwi~9(OqJB&gwb^l4+m`k*Q;_?>Y-APi1{k
zAHQ)P)G)f|AyjSgcCFps)Fh6Bca*Xznq3<?y%xNvu0N78_R?~<RDFQx0ynlRG(E|j
zvEGN3bF<E_9p-I!UwQXFqcSGV#e^98tgFqLp+z9eP}y!jNA{)r*a+%M-_20xg?94<
zzmM{}syi0cd&P)zywMdS&Y_9k5JDtOM!L)b^2WP!+fHYGv>6!pV6Az&m{O8$wGFD?
zY&O*3*J0;_EqM#jh6^gMQKpXV?#1?>$ml1xvh8nSN>-?H=V;nJIwB07YX$e6vLxH(
zqYwQ>qxwR(i4f)DLd)-$P>T-no_c!LsN@)8`e;W@)-Hj0>nJ-}Kla4-ZdPJzI&Mce
zv)V_j;(3ERN3_@I$N<^|4Lf`B;8n+bX@bHbcZTopEmDI*Jfl)-pFDvo6svPRoo@(x
z);_{lY<;);XzT`dBFpRmGrr}z5u1=p<K1~3>C^<jVp}L(pzgMB_Vs-O?{Z?y$8M;)
zi@7zwpzV9#m72%En~(9@E)GWV^(~J*@^*K*TE0mynAnGJ5YSLCEnC42H-`tr4L=oW
zI}N{xQ$HT8Q6CVHf%RY&xw7!Zj(0xmg(K#UQ4u!ej95z7V4phlcTJ2&AR}$)zV-s!
zO7bqY6(=?1t+JCOW_z%HRE>S-{ce6iXQlLGcItwJ^mZx{m$&DA_oEZ)B{_bYPq-HA
zcH8WGoBG(aBU_j)vEy+_71T34@4dmSg!|M8Vf92Zj6WH7Q7t#OHQqWgFE3ARt+%!T
z?oLovLVlnf?2c7pTc)~cc^($_8nyKwsN`RA-23ed3sdj(ys%pjjM+9JrctL;dy8a(
z@en&CQmnV(()bu|Y%G1-4a(6x{aLytn$T-;(&{QIJB9vMox11U-1HpD@d(QkaJdEb
zG{)+6Dos_L+O3NpWo^=gR?evp|CqEG?L&Ut#D*KLaRFOgOEK(Kq1@!EGcTfo+%A&I
z=dLbB+d$u{sh?u)xP{PF8L%;YPPW53+@{>5W=Jt#wQpN;0_HYdw1{ksf_XhO4#2F=
zyPx6Lx2<92L-;L5PD`zn6zwIH`Jk(<gsVPionpJ-imI56$j4P0!br@ny3=!{x2TY^
zCD=)8_PgmN)E!^nczcDGc9Wm7oo5O3@fh=k=kh8J?_3KqEp7JHdv8z_iZ5#KmbiPt
z2Bt8Ro^p$7pS!xL3mtj<iN3f}#r6_&$Es0PnJTE?c;0#$%cGdu`T%~`gW;c^VD-S=
zrAatMf^%Lzr*wQ4kHSOb?WOUuEsJQ3xr{Imf1t{~iNmRwb_SP9!?FFN=b-E){!8P2
ztWCT~262O8`%?3<W4Wg+ovWY<re)?^kZ|Yi>$?Qw({erA$^bC;q33hv!d!>%wRhj#
zal^hk+WGNg;rJtb-EB(?czvOM=H7dl=vblBwAv>}%1@{}mnpUznfq1cE^sgsL0*4I
zJ##!*B?=vI_OEVis5o+_IwMIRrpQyT_Sq~ZU%oY7c5JMIADzpD!Upz9h@iWg_>>~j
zOLS;wp^i$-E?4<_cp?RiS%Rd?i;f*mOz=~(&3lo<=@(nR!_Rqiprh@weZlL!t#NCc
zO!QTcInq|%#>OVgobj{~ixEUec`E25zJ~*DofsQdzIa@5^nOXj2T;8O`l--(QyU<o
zeu8G~Z>^$t?TGY^7#&FQ+2SS3B#qK*k3`ye?8jUYSajE5iBbJls75CCc(m3dk{t?-
zopcER9{Z?TC)mk~gpi^kbbu>b-+a{m#8-y2^p$ka4n60w;Sc2}HMf<8JUvh<G@KZw
z+<GL!lpeahq2+nO{>CL0B&Btk)T`ctE$*qNW8L$`7!r^9T+>=<=2qaq-;ll2{`{Rg
zc5a0ZUI$oG&j-qVOuKa=*v4aY#IsoM+1|c4Z)<}lEDvy;5huB@1RJPquU2U*U-;gu
z=En2m+qjBzR#DEJDO`WU)hdd{Vj%^0V*KoyZ|5lzV87&g_j~NCjwv0uQVqXOb*QrQ
zy|Qn`hxx(58c<SELWpDAg~83oY-J_WoDiI6d7>70$E;L(X0uZZ72M1!6oeg)(cdKO
ze0gDaTz+ohR-#d)NbAH4x{I(21yjwvBQfmpLu$)|m{XolbgF!pmsqJ#D}(ylp6uC>
z{bqtcI#hT#HW=wl7>p!38sKsJ`r8}lt-q%Keqy%u(xk=yiIJiUw6|5IvkS+#?JTBl
z8H5(Q?l#wzazujH!8o>1xtn8#_w+397*<wp?Ryt$UFh41$qd}LyNJ7Oao(Aw2g|wy
zH_nZ+R#~EUME^#j4$@^5&>_cy8!pQGP%K(Ga3pAjsaTbbXJlQF_+m+-UpUUent@xM
zg%jqLUExj~o^vQ3Gl*>wh=_gOr2*|U64_iXb+-111a<qXXnUI&{l`dM&{4Gw)jZn;
zlj{VxW@#OcVE1Y%J*u^Z@H+XSqL6SwA|^jv2RU_+d;O!mk)dw7-m9B4{6*G1zRdR6
zQ}6v&Xt7R2h3Xp}EQk4nF2TULG{Ri=D|JC<a+K7dldN1}CY_f!vK#u}K3`g#TpO&W
z;!;64`0$d9raD!VbYP`kuFUasaMh!;&81y}LHS(SuGRxwEn4LZb4DS1j9iAq$MXd@
z(Ebka7_Gc(ljGaJqtI-OzmA@c@sYB$)Vg!RP4~``vaVyRq$rJXRjIPwtepN;(B%wy
zmU>H}$TjeajM+I20xw(((>fej-@CIz4S1pi$(#}P7`4({6QS2CaQS4NPENDp>sAqD
z$bH4KGzXGffkJ7R>V>)>tC)uax{UsN*dbeNC*v}#8Y#OWYwL4t$ePR?VTyIs!wea+
z5Urmc)X|^`MG~*dS6pGSbU+gPJoq*^a=_>$n4|P^w$sMBBy@f*Z^Jg6?n5?oId6f{
z$LW4M|4m502z0t7g<#Bx%X;9<=)smFolV&(V^(7Cv2-sxbxopQ!)*#ZRhTBpx1)Fc
zNm1T%bONzv6@#|dz(w02AH8OXe>kQ#1FMCzO}2J_mST)+ExmBr9cva-@?;wnmWMOk
z{3_~EX_xadgJGv&H@zK_8{(x84`}+c?oSBX*Ge3VdfTt&F}yCpFP?CpW+BE^cWY0^
zb&uBN!Ja3UzYHK-CTyA5=L<c0d<h!DNBIa<xax8W3(Ru8L0cVXQ18|Y^|*S%)R96z
zBT$(=zQ}2vmt6LzN~Oyf_Y92%P@QOx{7~}5!UIqCdfu?VwC0Nb!2@iiit8-5zUWFG
z*G&+GLIU#J;}hvowNJWnglvb^<2q~lS#?ixVtYT@(O3{TC|4kFJYLB*jni-4YZi0>
zEMW{l3Usky#ly=7px648W31UNV@K)&Ub&zP1c7%)`{);I4b0Q<)B}3;NMG2JH=X$U
zfIW4)4n9ZM`-yRj67I)YSLDK)qfUJ_ij}a#aZN~9EXrh8eZY2&=uY%2N0UFF7<~%M
zsB8=erOWZ>Ct_#^tHZ|*q`H;A)5;ycw*I<Cd*bZlOJ9YmRUK2<qXkpRR3nr6r~%Jz
z*(8tA&DYO)etdgVmoonqD{*<5Fog4ClIs-~_uhjuZOI}#Wy+ce${%#oyHloXelqfz
z8)?D3Y_>cmVxi8_0Xk}aJA^ath+E;xg!x+As(M#0=)3!NJR6H&9+zd#iP(m0PIW8$
z1Y^VX`>jm`W!=WpF*{ioM?C9`yOR>@0q=u7o>BP-eSHqCgMDj!2anwH?s%i2p+Q7D
zzszIf5XJpE)IG4;d_(La-xenmF(tgAxK`Y4sQ}BSJEPs6N_U2vI{8=0C_F?@7<(G;
zo$~G=8p+076G;`}>{MQ>t>7cm=zGtfbdDXm6||jUU|?X?CaE?(<6bKDYKeHlz}DA8
zXT={X=yp_R;HfJ9h%?eWvQ!dRgz&Su*JfNt!Wu>|XfU<MM~gB&J0gc}IH}?|B4WRK
zWPL0FhctFGdMucOFdhrVunIe5)4K^H9IjB#eA)p5w?c#v7kp8jx^~bxxJB{;hPFL9
zkR9Dbpj+T5ZMgHQg|oj*DS;x&jK}1rn&}Shp9sgOI*7puQD-w?3H*cg72;5H(_zW*
zApJBIM-p2~F;qWDj!n|Kd=5|T8OPkQ_G;ujgvKybr5@~eci2{8WAz+%NUSp-&eoG!
zOGLNLJewWl&1*NT467W3god~fYgX?!f0?NCFnjD$qE-fyQ)|Q_DLc*{olmXSVl$g_
z$vj}o?RatMy(o*j8?q1Mgw{OUOgVR6_qvS<Co*&!cR`ROi|*I`ajyG5s@L8agnX2J
zF=DLkMG`z{RP&996y0yAtvJcb<cba?TV#j4VYFPC>&68iRikRrHRW|ZxzRR^`eIGt
zIeiDgVS>IeExKVRWW8-=<xUfo0v~z=RA=cFWKXgcMECd}xHp7iqkBanH}TZ0h0rA=
zqxUZ>A=<k-RjTtwbJkkep{8z*173wY^e%-U0{Ue!n@wbg^2q)Vx5c(_RfvuR4}XXn
z+JE>yA`}`)ZkWBrZD`hpWIxBGkh&f#ijr449~m`j6{4jiJ*C!oVA8ZC?$1RM#K(_b
zL9TW)kN*Y4%^-qPpMP7d4)o?Nk#>aoYHT(*g)qmRUb?**F@pnNiy6Fv9rEiUqD(^O
zzyS?nBrX63BTRYduaG(0VVG2yJRe%o&rVrLjbxTaAFTd8s;<<@Qs>u(<193R8>}2_
zuwp{7;H2a*X7_jryzriZXMg?bTuegABb^87@SsKkr2)0Gyiax8KQWstw^v<oS3Xw7
zu51m`3~hoyxErcHymdFTZd#AO59{EkuFTcpAR33(3xc{zRnn1~1Ei(i*^HdCvM~;;
za&}Uip|u>#ix45EVrcEhr>!NMhprl<CqZuKa#zuI&@zymVzIicetS0bq#u?m(r_@S
zJ79bl%4EyHCQ3fK@en+A1@)e}HWLP|gr_zuoA{}Z<(-*53Zu@k+=^%~5F(z$EFLI;
z-TQTS8$W|GRbZq93Ha1?lu+`O;rn>$InQMzjSFH54x5k9qHc`@9uKQzvL4ihcq{^B
zPrVR=o_ic%Y>6&rMN)hTZsI7I<3&`#(nl+3y3ys9A~<Ao%ZuW})CJ)6^(aRV(gGxR
z89#(FDW;GZEAf;rI$+PU)rEV|rASrwP0_mr^Ldv)IuUf1M>&^=4?PL&nd8)`OfG#n
zwAMN$1&>K++c{^|7<<q5KGu)u(OEfEJJw2aEi(;x-i=Y=j3ram9H2n-Fuqv0dVlXJ
z&WgG5X({!vJFDrEbm+CWDca^zIe2@s1@a;;Y3!U9Q)&P0UXFmCP51_!wvTfAIyR^M
z7^R*O@yz1b-s4VC>4P=2y(B{jJsQ0a#U;HTo4ZmWZYvI{+s;Td{Yzem%0*k#)vjpB
zia;J&>}ICate44SFYY3vEelqStQWFihx%^vQ@Do(sOy7yR2@WNv7Y9I^yL=nZr3mb
zXKV5t@=?-Sk|b{XMhA7ZGB@2hqsx}4xwCW!in#C<kr{U&JG{9FhoZ<aTve_lLz39>
zI@}sc<h3gsW}hp-`WUywKA>Zlr3-NFJ@NFaJlhyfcw{k^vvtGl`N9xSo**rDW4S}i
zM9{fMPWo%4wYDG~BZ18BD+}h|GQKc-g^{++3MY>}W_uq7jGHx{mwE9fZiPCoxN$+7
zrODGGJrOkcPQUB(FD5aoS4g~7#6NR^ma7-!>mHuJfY5kTe6PpNNKC9GGRiu^L31uG
z$7v`*JknQHsYB!Tm_W{a32TM099djW%5e+j0Ve_ct}IM>XLF1Ap+YvcrLV=|CKo6S
zb+<Td{{5RWR}u2f(q<b(D$9JsF0OOzJ*+z0P5kc1t}CXlYgua%x*2lSgp|*WS3H-#
zdYr7?GQOL18zUS<2|;+vi4|4sQBM2Gs&WVS!D`q5Lz;XR@5rEfa{uG-!q?R8Ncz%(
z5K6~LQ@d2wp#)5q4u<ENlFbS)U4o1t9{-d>9Nl3_YdKP6%Cxy@6TxZ>;4&nTneadr
z_ES90ydCev)LV!dN=#(*f}|ZORFdvkYBni^aLbUk>BajeWIOcmHP#8S)*2U~QKI%S
zyrLmtPqb&TphJ;>yAxri#;{uyk`JJqODDw%(Z=2<VfJZemI(PFAD{6Sm|uE%BTbkl
zROsg*MOh20YgGs3H7?@pmQ>`1uc}br^V%>j!gS)D*q*f_-qf8&D;W1dJgQMlaH5er
zN2U<%Smb7==vE}dDI8K7cKz!vs^73o9f>2sgiTzWcwY|BMYHH5%Vn7#kiw&eItCqa
zIkR2~Q}>X=Ar8W|^Ms41Fm8o6IB2_j60eOeBB1Br!boW7JnoeX6Gs)?7rW0^5psc-
zjS16yb>dFn>KPOF;imD}e!enuIniFzv}n$m2#gCCv4jM#ArwlzZ$7@9&XkFxZ4n!V
zj3dyiwW4Ki2QG{@i>yuZXQizw_OkZI^-3otXC{!(lUpJF33gI60ak;Uqitp74|B6I
zgg{b=Iz}WkhCGj1M<xTd?60J5qsr1Cg7F~~U2N!(@lC<>=hu4#Aw173YxIVbISaoc
z-nLZC*6Tgivd5V`K%GxhBsp@SUU60-rfc$=wb>zdJzXS&-5(NRRodFk;Kxk!S(<ov
z$YXcI9;^grAyiJ4dWTv3b}K~Ww09(;mLY4+kj|$A?IMr}`7q?mIS1>O(a0e7oY=E(
zAyS;Ow?6Q&XA+cnkCb{28_1N8H#?J!*$MmIwLq^*T_9-z^&UE@A(z9oGYtFy6EZef
LrJugUA?W`A8`#=m

literal 0
HcmV?d00001

diff --git a/frontend/app/globals.css b/frontend/app/globals.css
new file mode 100644
index 0000000000000000000000000000000000000000..82c6c16c1bbadf66763c8c8e2d8bca484217ea5a
--- /dev/null
+++ b/frontend/app/globals.css
@@ -0,0 +1,26 @@
+@import "tailwindcss";
+
+:root {
+  --background: #ffffff;
+  --foreground: #171717;
+}
+
+@theme inline {
+  --color-background: var(--background);
+  --color-foreground: var(--foreground);
+  --font-sans: var(--font-geist-sans);
+  --font-mono: var(--font-geist-mono);
+}
+
+@media (prefers-color-scheme: dark) {
+  :root {
+    --background: #0a0a0a;
+    --foreground: #ededed;
+  }
+}
+
+body {
+  background: var(--background);
+  color: var(--foreground);
+  font-family: var(--font-sans), sans-serif;
+}
diff --git a/frontend/app/ingestion/README.md b/frontend/app/ingestion/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..dd6a3891ad21f02b37d6294502f180382afa277b
--- /dev/null
+++ b/frontend/app/ingestion/README.md
@@ -0,0 +1,7 @@
+# Ingestion Jobs Page
+
+This page lists and manages data ingestion jobs that periodically fetch content
+from external sources and store it in managed vector databases.
+
+It demonstrates usage of `/api/ingestion-jobs` endpoints and integrates the
+vector DB list so users can link jobs to a target database.
diff --git a/frontend/app/ingestion/page.tsx b/frontend/app/ingestion/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..0d2f4890876f89e94983d110d477f4164655ff01
--- /dev/null
+++ b/frontend/app/ingestion/page.tsx
@@ -0,0 +1,85 @@
+'use client';
+
+/* musikconnect:
+   purpose: Manage ingestion jobs for synchronizing data to vector DBs
+   inputs: none (uses internal API calls)
+   outputs: Ingestion jobs listing with create/delete actions
+   status: experimental
+   depends_on: ../lib/api, ../components/Button, ../components/Alert
+   related_docs: ../../design-vision.md
+*/
+import { useState } from 'react';
+import { useApi } from '../../lib/api';
+import Button from '../../components/Button';
+import Alert from '../../components/Alert';
+
+interface Job {
+  id: number;
+  vector_db_id: number;
+  source_url: string;
+  schedule_minutes: number;
+  last_run?: string;
+}
+
+interface Db { id: number; name: string; }
+
+export default function IngestionPage() {
+  const { data: jobs, isLoading, mutate } = useApi<Job[]>('/api/ingestion-jobs');
+  const { data: dbs } = useApi<Db[]>('/api/vector-dbs');
+  const [source, setSource] = useState('');
+  const [dbId, setDbId] = useState<number>(0);
+  const [schedule, setSchedule] = useState(60);
+  const [error, setError] = useState('');
+
+  const create = async () => {
+    setError('');
+    const res = await fetch('/api/ingestion-jobs', {
+      method: 'POST',
+      credentials: 'include',
+      headers: { 'Content-Type': 'application/json' },
+      body: JSON.stringify({ vector_db_id: dbId, source_url: source, schedule_minutes: schedule })
+    });
+    if (res.ok) {
+      setSource('');
+      setSchedule(60);
+      mutate();
+    } else {
+      setError('Failed to create job');
+    }
+  };
+
+  const del = async (id: number) => {
+    await fetch(`/api/ingestion-jobs/${id}`, { method: 'DELETE', credentials: 'include' });
+    mutate();
+  };
+
+  return (
+    <div className="space-y-4 mt-6">
+      <div className="flex gap-2 flex-wrap items-end">
+        <select value={dbId} onChange={e => setDbId(Number(e.target.value))} className="border p-2">
+          <option value={0}>Select DB</option>
+          {dbs?.map(db => (
+            <option key={db.id} value={db.id}>{db.name}</option>
+          ))}
+        </select>
+        <input className="border p-2 flex-grow" placeholder="Source URL" value={source} onChange={e => setSource(e.target.value)} />
+        <input className="border p-2 w-28" type="number" min="1" value={schedule} onChange={e => setSchedule(Number(e.target.value))} />
+        <Button onClick={create}>Add Job</Button>
+      </div>
+      {error && <Alert message={error} />}
+      {isLoading ? (<div>Loading...</div>) : (
+        <ul className="space-y-2">
+          {jobs?.map(job => (
+            <li key={job.id} className="border p-2 rounded flex justify-between items-center">
+              <div>
+                <div className="font-medium">DB {job.vector_db_id} - {job.source_url}</div>
+                <div className="text-sm text-gray-400">every {job.schedule_minutes}m{job.last_run && ` last run ${job.last_run}`}</div>
+              </div>
+              <Button variant="secondary" onClick={() => del(job.id)}>Delete</Button>
+            </li>
+          ))}
+        </ul>
+      )}
+    </div>
+  );
+}
diff --git a/frontend/app/layout.tsx b/frontend/app/layout.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..d85f03336b2ac3e9ccaee20c1e9c76c61d1253c4
--- /dev/null
+++ b/frontend/app/layout.tsx
@@ -0,0 +1,40 @@
+import type { Metadata } from "next";
+import { Geist, Geist_Mono } from "next/font/google";
+import "./globals.css";
+import { SessionProvider } from "../lib/session";
+import Nav from "../components/Nav";
+import Footer from "../components/Footer";
+
+const geistSans = Geist({
+  variable: "--font-geist-sans",
+  subsets: ["latin"],
+});
+
+const geistMono = Geist_Mono({
+  variable: "--font-geist-mono",
+  subsets: ["latin"],
+});
+
+export const metadata: Metadata = {
+  title: "Create Next App",
+  description: "Generated by create next app",
+};
+
+export default function RootLayout({
+  children,
+}: Readonly<{
+  children: React.ReactNode;
+}>) {
+
+  return (
+    <html lang="en">
+      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
+        <SessionProvider>
+          <Nav />
+          <main className="p-4 max-w-3xl mx-auto">{children}</main>
+          <Footer />
+        </SessionProvider>
+      </body>
+    </html>
+  );
+}
diff --git a/frontend/app/login/page.tsx b/frontend/app/login/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..45a9383ab31f2313c56b2571482106ed0e34e7e8
--- /dev/null
+++ b/frontend/app/login/page.tsx
@@ -0,0 +1,54 @@
+'use client';
+import { useState } from 'react';
+import Spinner from '../../components/Spinner';
+import Alert from '../../components/Alert';
+import Input from '../../components/Input';
+import { useRouter } from 'next/navigation';
+
+export default function Login() {
+  const [email, setEmail] = useState('');
+  const [password, setPassword] = useState('');
+  const [error, setError] = useState<string | null>(null);
+  const [loading, setLoading] = useState(false);
+  const router = useRouter();
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    setLoading(true);
+    const res = await fetch('/api/login', {
+      method: 'POST',
+      headers: { 'Content-Type': 'application/json' },
+      body: JSON.stringify({ email, password }),
+      credentials: 'include',
+    });
+    setLoading(false);
+    if (res.ok) {
+      router.push('/servers');
+    } else {
+      const text = await res.text();
+      setError(text);
+    }
+  };
+  return (
+    <form onSubmit={handleSubmit} className="flex flex-col gap-4 max-w-sm mx-auto mt-20 bg-white p-6 rounded shadow">
+      <h1 className="text-xl font-semibold mb-2 text-center">Login</h1>
+      <Input
+        type="email"
+        value={email}
+        onChange={e => setEmail(e.target.value)}
+        label="Email"
+        required
+      />
+      <Input
+        type="password"
+        value={password}
+        onChange={e => setPassword(e.target.value)}
+        label="Password"
+        required
+      />
+      {error && <Alert message={error} />}
+      <button className="bg-blue-600 text-white p-2 flex items-center justify-center" type="submit" disabled={loading}>
+        {loading ? <Spinner /> : 'Login'}
+      </button>
+    </form>
+  );
+}
diff --git a/frontend/app/marketplace/page.tsx b/frontend/app/marketplace/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..ff2e28bfbaa04c4d01c68bf97aff3d27b1fcf7b6
--- /dev/null
+++ b/frontend/app/marketplace/page.tsx
@@ -0,0 +1,26 @@
+'use client';
+import Card from '../../components/Card';
+import { useApi } from '../../lib/api';
+import Button from '../../components/Button';
+
+interface Item {
+  server_type: string;
+  description: string;
+}
+
+export default function MarketplacePage() {
+  const { data, isLoading } = useApi<Item[]>('/api/marketplace');
+
+  return (
+    <div className="grid md:grid-cols-2 gap-4 mt-6">
+      {isLoading && <div>Loading...</div>}
+      {data?.map((item) => (
+        <Card key={item.server_type}>
+          <h3 className="font-semibold text-lg">{item.server_type}</h3>
+          <p className="text-sm mt-1 mb-2">{item.description}</p>
+          <Button href={`/servers/new?type=${encodeURIComponent(item.server_type)}`}>Deploy</Button>
+        </Card>
+      ))}
+    </div>
+  );
+}
diff --git a/frontend/app/orgs/page.tsx b/frontend/app/orgs/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..51a930ff97c5c7feb2f46a235ef300389b5b0a69
--- /dev/null
+++ b/frontend/app/orgs/page.tsx
@@ -0,0 +1,51 @@
+'use client'
+import { useState } from 'react';
+import { useApi } from '../../lib/api';
+import Card from '../../components/Card';
+import Button from '../../components/Button';
+import Alert from '../../components/Alert';
+
+interface Org { id: number; name: string; }
+
+export default function OrgsPage() {
+  const { data, isLoading, mutate } = useApi<Org[]>('/api/orgs');
+  const [name, setName] = useState('');
+  const [error, setError] = useState('');
+
+  const create = async () => {
+    setError('');
+    const res = await fetch('/api/orgs', {
+      method: 'POST',
+      headers: { 'Content-Type': 'application/json' },
+      credentials: 'include',
+      body: JSON.stringify({ name }),
+    });
+    if (res.ok) {
+      setName('');
+      mutate();
+    } else {
+      setError('Failed to create');
+    }
+  };
+
+  return (
+    <div className="space-y-4 mt-6">
+      <div className="flex gap-2">
+        <input
+          value={name}
+          onChange={e => setName(e.target.value)}
+          className="border p-2 flex-grow"
+          placeholder="Organization name"
+        />
+        <Button onClick={create}>Create</Button>
+      </div>
+      {error && <Alert message={error} />}
+      {isLoading && <div>Loading...</div>}
+      <div className="grid md:grid-cols-2 gap-4">
+        {data?.map(org => (
+          <Card key={org.id}>{org.name}</Card>
+        ))}
+      </div>
+    </div>
+  );
+}
diff --git a/frontend/app/page.tsx b/frontend/app/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..4d612c928cfd40b02e685dffd079acfbf48371e3
--- /dev/null
+++ b/frontend/app/page.tsx
@@ -0,0 +1,47 @@
+import Hero from '../components/Hero';
+import Section from '../components/Section';
+import Button from '../components/Button';
+import FeatureCard from '../components/FeatureCard';
+
+export default function Home() {
+  return (
+    <div>
+      <Hero />
+      <Section title="Features">
+        <div className="grid md:grid-cols-3 gap-4">
+          <FeatureCard
+            href="/marketplace"
+            title="Marketplace"
+            description="Deploy official MCP images in one click"
+            icon="/globe.svg"
+          />
+          <FeatureCard
+            href="/vector-dbs"
+            title="Vector DBs"
+            description="Create managed embeddings stores"
+            icon="/file.svg"
+          />
+          <FeatureCard
+            href="/workflows"
+            title="Workflows"
+            description="Chain MCPs together for complex pipelines"
+            icon="/window.svg"
+          />
+        </div>
+      </Section>
+      <Section title="Why MCP Host?">
+        <p>
+          Deploy scalable Model Context Providers backed by Docker with a few
+          clicks. Monitor metrics in real time and customize each server to your
+          needs.
+        </p>
+        <div className="mt-4 flex gap-3">
+          <Button href="/docs">Read the docs</Button>
+          <Button href="/blog" variant="secondary">
+            Visit the blog
+          </Button>
+        </div>
+      </Section>
+    </div>
+  );
+}
diff --git a/frontend/app/profile/page.tsx b/frontend/app/profile/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..55246f47ee61e84269d388e00ff8224a53e096d8
--- /dev/null
+++ b/frontend/app/profile/page.tsx
@@ -0,0 +1,36 @@
+'use client';
+import { useEffect, useState } from 'react';
+import Alert from '../../components/Alert';
+
+interface UserInfo { id: number; email: string; role: string; server_quota: number; }
+interface Server { id: number; name: string; }
+
+export default function ProfilePage() {
+  const [user, setUser] = useState<UserInfo | null>(null);
+  const [servers, setServers] = useState<Server[]>([]);
+  const [error, setError] = useState('');
+
+  useEffect(() => {
+    fetch('/api/me', { credentials: 'include' })
+      .then(r => (r.ok ? r.json() : Promise.reject('failed')))
+      .then(setUser)
+      .catch(() => setError('Failed to load user'));
+    fetch('/api/servers', { credentials: 'include' })
+      .then(r => (r.ok ? r.json() : Promise.reject('failed')))
+      .then(setServers)
+      .catch(() => setError('Failed to load servers'));
+  }, []);
+
+  if (error) return <Alert message={error} />;
+  if (!user) return <p>Loading...</p>;
+  return (
+    <div className="space-y-4">
+      <h1 className="text-xl font-semibold">Profile</h1>
+      <p>Email: {user.email}</p>
+      <p>Role: {user.role}</p>
+      <p>
+        Servers used: {servers.length} / {user.server_quota}
+      </p>
+    </div>
+  );
+}
diff --git a/frontend/app/register/page.tsx b/frontend/app/register/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..328ad52be8193a979b89499473d69cc218291de2
--- /dev/null
+++ b/frontend/app/register/page.tsx
@@ -0,0 +1,54 @@
+'use client';
+import { useState } from 'react';
+import Spinner from '../../components/Spinner';
+import Alert from '../../components/Alert';
+import Input from '../../components/Input';
+import { useRouter } from 'next/navigation';
+
+export default function Register() {
+  const [email, setEmail] = useState('');
+  const [password, setPassword] = useState('');
+  const [error, setError] = useState<string | null>(null);
+  const [loading, setLoading] = useState(false);
+  const router = useRouter();
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    setLoading(true);
+    const res = await fetch('/api/register', {
+      method: 'POST',
+      headers: { 'Content-Type': 'application/json' },
+      body: JSON.stringify({ email, password }),
+      credentials: 'include',
+    });
+    setLoading(false);
+    if (res.ok) {
+      router.push('/login');
+    } else {
+      const text = await res.text();
+      setError(text);
+    }
+  };
+  return (
+    <form onSubmit={handleSubmit} className="flex flex-col gap-4 max-w-sm mx-auto mt-20 bg-white p-6 rounded shadow">
+      <h1 className="text-xl font-semibold mb-2 text-center">Register</h1>
+      <Input
+        type="email"
+        value={email}
+        onChange={e => setEmail(e.target.value)}
+        label="Email"
+        required
+      />
+      <Input
+        type="password"
+        value={password}
+        onChange={e => setPassword(e.target.value)}
+        label="Password"
+        required
+      />
+      {error && <Alert message={error} />}
+      <button className="bg-green-600 text-white p-2 flex items-center justify-center" type="submit" disabled={loading}>
+        {loading ? <Spinner /> : 'Register'}
+      </button>
+    </form>
+  );
+}
diff --git a/frontend/app/servers/[id]/capabilities/page.tsx b/frontend/app/servers/[id]/capabilities/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..e0c268e9e094f1985b0d9a070d079c5a5da0495c
--- /dev/null
+++ b/frontend/app/servers/[id]/capabilities/page.tsx
@@ -0,0 +1,38 @@
+"use client";
+import { useEffect, useState } from 'react';
+import Spinner from '../../../../components/Spinner';
+
+export default function CapabilitiesPage({ params }: any) {
+  const id = params.id;
+  const [caps, setCaps] = useState<any[]>([]);
+  const [loading, setLoading] = useState(true);
+
+  useEffect(() => {
+    fetch(`/api/servers/${id}/capabilities`, { credentials: 'include' })
+      .then((res) => {
+        if (!res.ok) throw new Error('failed');
+        return res.json();
+      })
+      .then(setCaps)
+      .catch(() => setCaps([]))
+      .finally(() => setLoading(false));
+  }, [id]);
+
+  return (
+    <div className="space-y-4">
+      {loading ? (
+        <Spinner />
+      ) : caps.length > 0 ? (
+        <ul className="list-disc pl-6 space-y-1">
+          {caps.map((c) => (
+            <li key={c.id}>
+              <span className="font-semibold">{c.name}:</span> {c.description || ''}
+            </li>
+          ))}
+        </ul>
+      ) : (
+        <p>No capabilities found.</p>
+      )}
+    </div>
+  );
+}
diff --git a/frontend/app/servers/[id]/domains/page.tsx b/frontend/app/servers/[id]/domains/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..2b3c40cebd44c4fe94e18f4cd87a9239498d1aab
--- /dev/null
+++ b/frontend/app/servers/[id]/domains/page.tsx
@@ -0,0 +1,78 @@
+'use client';
+import { useState, useEffect } from 'react';
+import Spinner from '../../../../components/Spinner';
+import Alert from '../../../../components/Alert';
+
+export default function DomainsPage({ params }: any) {
+  const id = params.id;
+  const [domains, setDomains] = useState<any[]>([]);
+  const [domain, setDomain] = useState('');
+  const [loading, setLoading] = useState(false);
+  const [error, setError] = useState<string | null>(null);
+
+  const fetchDomains = () => {
+    fetch(`/api/servers/${id}/domains`, { credentials: 'include' })
+      .then(res => res.json())
+      .then(setDomains)
+      .catch(() => setError('Failed to load domains'));
+  };
+
+  useEffect(() => {
+    fetchDomains();
+  }, []);
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    setLoading(true);
+    setError(null);
+    const res = await fetch(`/api/servers/${id}/domains`, {
+      method: 'POST',
+      headers: { 'Content-Type': 'application/json' },
+      credentials: 'include',
+      body: JSON.stringify({ domain })
+    });
+    setLoading(false);
+    if (res.ok) {
+      setDomain('');
+      fetchDomains();
+    } else {
+      setError(await res.text());
+    }
+  };
+
+  const remove = async (domId: number) => {
+    setLoading(true);
+    setError(null);
+    const res = await fetch(`/api/servers/${id}/domains/${domId}`, {
+      method: 'DELETE',
+      credentials: 'include'
+    });
+    setLoading(false);
+    if (res.ok) {
+      fetchDomains();
+    } else {
+      setError(await res.text());
+    }
+  };
+
+  return (
+    <div className="p-4 max-w-md mx-auto space-y-4">
+      <h1 className="text-xl font-semibold">Custom Domains</h1>
+      {error && <Alert message={error} />}
+      <ul className="space-y-2">
+        {domains.map(d => (
+          <li key={d.id} className="border p-2 rounded flex justify-between items-center">
+            <span>{d.domain}</span>
+            <button className="px-2 py-1 bg-red-600 text-white rounded" onClick={() => remove(d.id)}>Delete</button>
+          </li>
+        ))}
+      </ul>
+      <form onSubmit={handleSubmit} className="space-y-2">
+        <input value={domain} onChange={e => setDomain(e.target.value)} placeholder="example.com" className="border p-2 w-full" />
+        <button type="submit" disabled={loading} className="bg-blue-600 text-white p-2 w-full flex justify-center">
+          {loading ? <Spinner /> : 'Add Domain'}
+        </button>
+      </form>
+    </div>
+  );
+}
diff --git a/frontend/app/servers/[id]/eval/page.tsx b/frontend/app/servers/[id]/eval/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..aec75c7031d3557f6d767df40a33af6bd2cf247f
--- /dev/null
+++ b/frontend/app/servers/[id]/eval/page.tsx
@@ -0,0 +1,94 @@
+"use client";
+import { useEffect, useState } from 'react';
+import Spinner from '../../../../components/Spinner';
+import Button from '../../../../components/Button';
+import Alert from '../../../../components/Alert';
+
+interface Test { id: number; question: string; expected_answer: string; created_at: string; }
+interface Result { id: number; test_id: number; response: string; score: number; created_at: string; }
+
+export default function EvaluationPage({ params }: any) {
+  const id = params.id;
+  const [tests, setTests] = useState<Test[]>([]);
+  const [results, setResults] = useState<Result[]>([]);
+  const [question, setQuestion] = useState('');
+  const [expected, setExpected] = useState('');
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState<string>('');
+  const [running, setRunning] = useState(false);
+
+  const fetchData = () => {
+    setLoading(true);
+    Promise.all([
+      fetch(`/api/servers/${id}/eval/tests`, { credentials: 'include' }).then(r => r.ok ? r.json() : []),
+      fetch(`/api/servers/${id}/eval/results`, { credentials: 'include' }).then(r => r.ok ? r.json() : [])
+    ])
+      .then(([t, r]) => { setTests(t); setResults(r); })
+      .finally(() => setLoading(false));
+  };
+
+  useEffect(fetchData, [id]);
+
+  const addTest = () => {
+    setError('');
+    fetch(`/api/servers/${id}/eval/tests`, {
+      method: 'POST',
+      headers: { 'Content-Type': 'application/json' },
+      credentials: 'include',
+      body: JSON.stringify({ question, expected_answer: expected })
+    })
+      .then(r => { if (!r.ok) throw new Error('failed'); return r.json(); })
+      .then(() => { setQuestion(''); setExpected(''); fetchData(); })
+      .catch(() => setError('Failed to add test'));
+  };
+
+  const run = () => {
+    setRunning(true);
+    setError('');
+    fetch(`/api/servers/${id}/eval/run`, { method: 'POST', credentials: 'include' })
+      .then(r => { if (!r.ok) throw new Error('failed'); })
+      .then(fetchData)
+      .catch(() => setError('Failed to run tests'))
+      .finally(() => setRunning(false));
+  };
+
+  return (
+    <div className="space-y-4">
+      {error && <Alert message={error} />}
+      {loading ? (
+        <Spinner />
+      ) : (
+        <>
+          <h2 className="text-lg font-semibold">Tests</h2>
+          <ul className="space-y-2 mb-4">
+            {tests.map(t => (
+              <li key={t.id} className="border p-2 rounded">
+                <div className="text-sm text-gray-400">{t.created_at}</div>
+                <div className="font-medium">Q: {t.question}</div>
+                <div className="text-sm">Expected: {t.expected_answer}</div>
+              </li>
+            ))}
+          </ul>
+          <div className="space-y-2">
+            <input value={question} onChange={e => setQuestion(e.target.value)} placeholder="question" className="w-full px-2 py-1 bg-gray-900 rounded" />
+            <input value={expected} onChange={e => setExpected(e.target.value)} placeholder="expected answer" className="w-full px-2 py-1 bg-gray-900 rounded" />
+            <Button onClick={addTest}>Add Test</Button>
+          </div>
+          <Button onClick={run} disabled={running} className="mt-4">
+            {running ? 'Running...' : 'Run Tests'}
+          </Button>
+          <h2 className="text-lg font-semibold mt-6">Results</h2>
+          <ul className="space-y-2">
+            {results.map(r => (
+              <li key={r.id} className="border p-2 rounded">
+                <div className="text-sm text-gray-400">{r.created_at}</div>
+                <div className="font-medium">Test {r.test_id} Score: {r.score.toFixed(2)}</div>
+                <pre className="whitespace-pre-wrap text-sm mt-1">{r.response}</pre>
+              </li>
+            ))}
+          </ul>
+        </>
+      )}
+    </div>
+  );
+}
diff --git a/frontend/app/servers/[id]/files/page.tsx b/frontend/app/servers/[id]/files/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..c01ab366528f06c7a17db308875b2e55b92ce645
--- /dev/null
+++ b/frontend/app/servers/[id]/files/page.tsx
@@ -0,0 +1,84 @@
+'use client';
+import { useState, useEffect } from 'react';
+import Spinner from '../../../../components/Spinner';
+import Alert from '../../../../components/Alert';
+
+export default function FilesPage({ params }: any) {
+  const id = params.id;
+  const [files, setFiles] = useState<any[]>([]);
+  const [file, setFile] = useState<File | null>(null);
+  const [loading, setLoading] = useState(false);
+  const [error, setError] = useState<string | null>(null);
+
+  const fetchFiles = () => {
+    fetch(`/api/servers/${id}/files`, { credentials: 'include' })
+      .then(res => res.json())
+      .then(setFiles)
+      .catch(() => setError('Failed to load files'));
+  };
+
+  useEffect(() => {
+    fetchFiles();
+  }, []);
+
+  const upload = async (e: React.FormEvent) => {
+    e.preventDefault();
+    if (!file) return;
+    setLoading(true);
+    setError(null);
+    const form = new FormData();
+    form.append('file', file);
+    const res = await fetch(`/api/servers/${id}/files`, {
+      method: 'POST',
+      credentials: 'include',
+      body: form,
+    });
+    setLoading(false);
+    if (res.ok) {
+      setFile(null);
+      fetchFiles();
+    } else {
+      setError(await res.text());
+    }
+  };
+
+  const remove = async (fid: number) => {
+    setLoading(true);
+    setError(null);
+    const res = await fetch(`/api/servers/${id}/files/${fid}`, {
+      method: 'DELETE',
+      credentials: 'include',
+    });
+    setLoading(false);
+    if (res.ok) {
+      fetchFiles();
+    } else {
+      setError(await res.text());
+    }
+  };
+
+  return (
+    <div className="p-4 max-w-md mx-auto space-y-4">
+      <h1 className="text-xl font-semibold">Files</h1>
+      {error && <Alert message={error} />}
+      <ul className="space-y-2">
+        {files.map(f => (
+          <li key={f.id} className="border p-2 rounded flex justify-between items-center">
+            <a href={`/api/servers/${id}/files/${f.id}`} className="underline">
+              {f.name}
+            </a>
+            <button className="px-2 py-1 bg-red-600 text-white rounded" onClick={() => remove(f.id)}>
+              Delete
+            </button>
+          </li>
+        ))}
+      </ul>
+      <form onSubmit={upload} className="space-y-2">
+        <input type="file" onChange={e => setFile(e.target.files?.[0] || null)} className="border p-2 w-full" />
+        <button type="submit" disabled={loading} className="bg-blue-600 text-white p-2 w-full flex justify-center">
+          {loading ? <Spinner /> : 'Upload'}
+        </button>
+      </form>
+    </div>
+  );
+}
diff --git a/frontend/app/servers/[id]/invocations/page.tsx b/frontend/app/servers/[id]/invocations/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..075a9a02dd1d8f21093da6c7fc29447e12e76a41
--- /dev/null
+++ b/frontend/app/servers/[id]/invocations/page.tsx
@@ -0,0 +1,41 @@
+"use client";
+import { useEffect, useState } from 'react';
+import Spinner from '../../../../components/Spinner';
+
+interface Trace { id: number; input_json: any; output_text?: string; created_at: string; }
+
+export default function InvocationsPage({ params }: any) {
+  const id = params.id;
+  const [traces, setTraces] = useState<Trace[]>([]);
+  const [loading, setLoading] = useState(true);
+
+  useEffect(() => {
+    fetch(`/api/servers/${id}/invocations`, { credentials: 'include' })
+      .then((res) => { if (!res.ok) throw new Error('failed'); return res.json(); })
+      .then(setTraces)
+      .catch(() => setTraces([]))
+      .finally(() => setLoading(false));
+  }, [id]);
+
+  return (
+    <div className="space-y-4">
+      {loading ? (
+        <Spinner />
+      ) : traces.length > 0 ? (
+        <ul className="space-y-2">
+          {traces.map((t) => (
+            <li key={t.id} className="bg-gray-900 p-2 rounded">
+              <div className="text-xs text-gray-400">{t.created_at}</div>
+              <pre className="whitespace-pre-wrap text-green-300">{JSON.stringify(t.input_json)}</pre>
+              {t.output_text && (
+                <pre className="whitespace-pre-wrap mt-1 text-blue-200">{t.output_text}</pre>
+              )}
+            </li>
+          ))}
+        </ul>
+      ) : (
+        <p>No invocations recorded.</p>
+      )}
+    </div>
+  );
+}
diff --git a/frontend/app/servers/[id]/invoke/page.tsx b/frontend/app/servers/[id]/invoke/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..cffb162ec3cdc8a21d8397f094aee0162292b82f
--- /dev/null
+++ b/frontend/app/servers/[id]/invoke/page.tsx
@@ -0,0 +1,56 @@
+'use client';
+import { useState } from 'react';
+import Spinner from '../../../../components/Spinner';
+import Alert from '../../../../components/Alert';
+
+export default function InvokePage({ params }: any) {
+  const id = params.id;
+  const [payload, setPayload] = useState('{\n  "input": "hello"\n}');
+  const [response, setResponse] = useState('');
+  const [loading, setLoading] = useState(false);
+  const [error, setError] = useState<string | null>(null);
+
+  const invoke = async (e: React.FormEvent) => {
+    e.preventDefault();
+    setLoading(true);
+    setError(null);
+    const res = await fetch(`/api/servers/${id}/invoke`, {
+      method: 'POST',
+      credentials: 'include',
+      headers: { 'Content-Type': 'application/json' },
+      body: payload,
+    });
+    setLoading(false);
+    if (res.ok) {
+      setResponse(await res.text());
+    } else {
+      setError(await res.text());
+    }
+  };
+
+  return (
+    <div className="p-4 max-w-xl mx-auto space-y-4">
+      <h1 className="text-xl font-semibold">Invoke Server</h1>
+      {error && <Alert message={error} />}
+      <form onSubmit={invoke} className="space-y-2">
+        <textarea
+          className="border w-full p-2 h-32"
+          value={payload}
+          onChange={e => setPayload(e.target.value)}
+        />
+        <button
+          type="submit"
+          disabled={loading}
+          className="bg-blue-600 text-white p-2 w-full flex justify-center"
+        >
+          {loading ? <Spinner /> : 'Send'}
+        </button>
+      </form>
+      {response && (
+        <pre className="bg-black text-green-300 p-2 rounded whitespace-pre-wrap">
+          {response}
+        </pre>
+      )}
+    </div>
+  );
+}
diff --git a/frontend/app/servers/[id]/manifest/page.tsx b/frontend/app/servers/[id]/manifest/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..e8b90d83ba9ca1e3ec77767705de18ac2fe667ce
--- /dev/null
+++ b/frontend/app/servers/[id]/manifest/page.tsx
@@ -0,0 +1,39 @@
+"use client";
+import { useEffect, useState } from 'react';
+import { useRouter } from 'next/navigation';
+import Spinner from '../../../../components/Spinner';
+
+export default function ManifestPage({ params }: any) {
+  const id = params.id;
+  const [manifest, setManifest] = useState<any>(null);
+  const [loading, setLoading] = useState(true);
+  const router = useRouter();
+
+  useEffect(() => {
+    fetch(`/api/servers/${id}/manifest`, { credentials: 'include' })
+      .then((res) => {
+        if (!res.ok) throw new Error('failed');
+        return res.json();
+      })
+      .then((data) => setManifest(data))
+      .catch(() => setManifest(null))
+      .finally(() => setLoading(false));
+  }, [id]);
+
+  return (
+    <div className="space-y-4">
+      <button className="px-2 py-1 bg-gray-600 text-white rounded" onClick={() => router.back()}>
+        Back
+      </button>
+      {loading ? (
+        <Spinner />
+      ) : manifest ? (
+        <pre className="whitespace-pre-wrap bg-gray-900 text-green-300 p-2 rounded">
+          {JSON.stringify(manifest, null, 2)}
+        </pre>
+      ) : (
+        <p>No manifest found.</p>
+      )}
+    </div>
+  );
+}
diff --git a/frontend/app/servers/[id]/services/page.tsx b/frontend/app/servers/[id]/services/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..e78d4f3a7eefb66f5277bb04f57684d423a6657f
--- /dev/null
+++ b/frontend/app/servers/[id]/services/page.tsx
@@ -0,0 +1,140 @@
+'use client';
+import { useState } from 'react';
+import Spinner from '../../../../components/Spinner';
+import Alert from '../../../../components/Alert';
+import { useApi } from '../../../../lib/api';
+
+export default function ServicesPage({ params }: any) {
+  const id = params.id;
+  const { data: services, error: fetchError, isLoading, mutate } = useApi<any[]>(`/api/servers/${id}/services`);
+  const [serviceType, setServiceType] = useState('Redis');
+  const [config, setConfig] = useState('');
+  const [loading, setLoading] = useState(false);
+  const [error, setError] = useState<string | null>(null);
+  const [editing, setEditing] = useState<number | null>(null);
+  const [editConfig, setEditConfig] = useState('');
+
+  const fetchServices = () => mutate();
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    setLoading(true);
+    setError(null);
+    let cfg: any = {};
+    if (config.trim()) {
+      try {
+        cfg = JSON.parse(config);
+      } catch (e) {
+        setLoading(false);
+        setError('Invalid JSON');
+        return;
+      }
+    }
+    const res = await fetch(`/api/servers/${id}/services`, {
+      method: 'POST',
+      headers: { 'Content-Type': 'application/json' },
+      credentials: 'include',
+      body: JSON.stringify({ service_type: serviceType, config: cfg })
+    });
+    setLoading(false);
+    if (res.ok) {
+      setConfig('');
+      fetchServices();
+    } else {
+      setError(await res.text());
+    }
+  };
+
+  const startEdit = (svc: any) => {
+    setEditing(svc.id);
+    setEditConfig(JSON.stringify(svc.config ?? {}, null, 2));
+  };
+
+  const cancelEdit = () => {
+    setEditing(null);
+    setEditConfig('');
+  };
+
+  const saveEdit = async (svcId: number) => {
+    setLoading(true);
+    setError(null);
+    let cfg: any = {};
+    if (editConfig.trim()) {
+      try {
+        cfg = JSON.parse(editConfig);
+      } catch (e) {
+        setLoading(false);
+        setError('Invalid JSON');
+        return;
+      }
+    }
+    const res = await fetch(`/api/servers/${id}/services/${svcId}`, {
+      method: 'PATCH',
+      headers: { 'Content-Type': 'application/json' },
+      credentials: 'include',
+      body: JSON.stringify({ config: cfg })
+    });
+    setLoading(false);
+    if (res.ok) {
+      cancelEdit();
+      fetchServices();
+    } else {
+      setError(await res.text());
+    }
+  };
+
+  const remove = async (svcId: number) => {
+    setLoading(true);
+    setError(null);
+    const res = await fetch(`/api/servers/${id}/services/${svcId}`, {
+      method: 'DELETE',
+      credentials: 'include'
+    });
+    setLoading(false);
+    if (res.ok) {
+      fetchServices();
+    } else {
+      setError(await res.text());
+    }
+  };
+
+  return (
+    <div className="p-4 max-w-md mx-auto space-y-4">
+      <h1 className="text-xl font-semibold">Service Integrations</h1>
+      {(error || fetchError) && <Alert message={(error || fetchError.message) as string} />}
+      {isLoading && <Spinner />}
+      <ul className="space-y-2">
+        {services?.map(s => (
+          <li key={s.id} className="border p-2 rounded">
+            <div className="flex justify-between items-center">
+              <span className="font-semibold">{s.service_type}</span>
+              <div className="space-x-2 text-sm">
+                <button className="px-2 py-1 bg-gray-600 text-white rounded" onClick={() => startEdit(s)}>Edit</button>
+                <button className="px-2 py-1 bg-red-600 text-white rounded" onClick={() => remove(s.id)}>Delete</button>
+              </div>
+            </div>
+            {editing === s.id && (
+              <div className="mt-2 space-y-2">
+                <textarea value={editConfig} onChange={e => setEditConfig(e.target.value)} className="border p-2 w-full h-24" />
+                <div className="flex space-x-2">
+                  <button className="flex-1 bg-blue-600 text-white p-1" onClick={() => saveEdit(s.id)} disabled={loading}>{loading ? <Spinner /> : 'Save'}</button>
+                  <button className="flex-1 bg-gray-500 text-white p-1" onClick={cancelEdit}>Cancel</button>
+                </div>
+              </div>
+            )}
+          </li>
+        ))}
+      </ul>
+      <form onSubmit={handleSubmit} className="space-y-2">
+        <select value={serviceType} onChange={e => setServiceType(e.target.value)} className="border p-2 w-full">
+          <option value="Redis">Redis</option>
+          <option value="S3">S3</option>
+        </select>
+        <textarea value={config} onChange={e => setConfig(e.target.value)} placeholder="Service config JSON" className="border p-2 w-full h-24" />
+        <button type="submit" disabled={loading} className="bg-blue-600 text-white p-2 w-full flex justify-center">
+          {loading ? <Spinner /> : 'Add Service'}
+        </button>
+      </form>
+    </div>
+  );
+}
diff --git a/frontend/app/servers/new/page.tsx b/frontend/app/servers/new/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..19e674b62e7261087929904820b26295ff202fcf
--- /dev/null
+++ b/frontend/app/servers/new/page.tsx
@@ -0,0 +1,119 @@
+'use client';
+import { useState, useEffect } from 'react';
+import Spinner from '../../../components/Spinner';
+import Alert from '../../../components/Alert';
+import Input from '../../../components/Input';
+import Textarea from '../../../components/Textarea';
+import { useRouter } from 'next/navigation';
+
+export default function NewServer() {
+  const [name, setName] = useState('');
+  const [serverType, setServerType] = useState('PostgreSQL');
+  const [customImage, setCustomImage] = useState('');
+  const [repoUrl, setRepoUrl] = useState('');
+  const [branch, setBranch] = useState('main');
+  const [envText, setEnvText] = useState('');
+  const [useGpu, setUseGpu] = useState(false);
+  const [market, setMarket] = useState<{server_type:string}[]>([]);
+  const [error, setError] = useState<string | null>(null);
+  const [loading, setLoading] = useState(false);
+  const router = useRouter();
+
+  useEffect(() => {
+    fetch('/api/marketplace', { credentials: 'include' })
+      .then(r => r.ok ? r.json() : [])
+      .then(setMarket)
+      .catch(() => {});
+  }, []);
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    setLoading(true);
+    const body: any = { name, server_type: serverType, use_gpu: useGpu };
+    if (serverType === 'Custom') {
+      if (customImage) {
+        body.config = { image: customImage };
+      }
+      if (repoUrl) {
+        body.config = { ...(body.config || {}), repo_url: repoUrl };
+        if (branch) {
+          body.config.branch = branch;
+        }
+      }
+    }
+    if (envText.trim()) {
+      const env: Record<string, string> = {};
+      envText.split('\n').forEach(line => {
+        const [k, ...rest] = line.split('=');
+        if (k && rest.length > 0) {
+          env[k.trim()] = rest.join('=').trim();
+        }
+      });
+      body.config = { ...(body.config || {}), ...env };
+    }
+    const res = await fetch('/api/servers', {
+      method: 'POST',
+      headers: { 'Content-Type': 'application/json' },
+      body: JSON.stringify(body),
+      credentials: 'include',
+    });
+    setLoading(false);
+    if (res.ok) {
+      router.push('/servers');
+    } else {
+      const text = await res.text();
+      setError(text);
+    }
+  };
+
+  return (
+    <form onSubmit={handleSubmit} className="flex flex-col gap-4 max-w-sm mx-auto mt-20 bg-white p-6 rounded shadow">
+      <h1 className="text-xl font-semibold mb-2 text-center">New Server</h1>
+      <Input
+        value={name}
+        onChange={e => setName(e.target.value)}
+        label="Server name"
+        required
+      />
+      <select value={serverType} onChange={e => setServerType(e.target.value)} className="border p-2">
+        {market.map(m => (
+          <option key={m.server_type} value={m.server_type}>{m.server_type}</option>
+        ))}
+        <option value="Custom">Custom (BYO image)</option>
+      </select>
+      {serverType === 'Custom' && (
+        <>
+          <Input
+            value={customImage}
+            onChange={e => setCustomImage(e.target.value)}
+            label="Docker image"
+          />
+          <Input
+            value={repoUrl}
+            onChange={e => setRepoUrl(e.target.value)}
+            label="Git repo URL"
+          />
+          <Input
+            value={branch}
+            onChange={e => setBranch(e.target.value)}
+            label="Branch (default main)"
+          />
+        </>
+      )}
+      <label className="flex items-center gap-2">
+        <input type="checkbox" checked={useGpu} onChange={e => setUseGpu(e.target.checked)} />
+        Use GPU
+      </label>
+      <Textarea
+        value={envText}
+        onChange={e => setEnvText(e.target.value)}
+        label="ENV_VAR=value per line"
+        className="h-24"
+      />
+      {error && <Alert message={error} />}
+      <button type="submit" className="bg-blue-600 text-white p-2 flex items-center justify-center" disabled={loading}>
+        {loading ? <Spinner /> : 'Create'}
+      </button>
+    </form>
+  );
+}
diff --git a/frontend/app/servers/page.tsx b/frontend/app/servers/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..45eb446d9ceac15849402d58b5ab2ae8d07562f4
--- /dev/null
+++ b/frontend/app/servers/page.tsx
@@ -0,0 +1,174 @@
+'use client';
+import { useEffect, useState } from 'react';
+import Spinner from '../../components/Spinner';
+import Alert from '../../components/Alert';
+import MetricsChart from '../../components/MetricsChart';
+import ServerCard from '../../components/ServerCard';
+import { useServerStore, Server } from '../../lib/store';
+
+interface LogData {
+  id: number;
+  entries: { id: number; collected_at: string; log_text: string }[];
+}
+
+interface MetricsData {
+  id: number;
+  events: { id: number; timestamp: string; event_type: string; details?: any }[];
+}
+
+export default function Servers() {
+  const { servers, fetchServers, updateStatus, loading, error: storeError } = useServerStore();
+  const [error, setError] = useState<string | null>(null);
+  const [logs, setLogs] = useState<LogData | null>(null);
+  const [source, setSource] = useState<EventSource | null>(null);
+  const [metricsSource, setMetricsSource] = useState<EventSource | null>(null);
+  const [actionId, setActionId] = useState<number | null>(null);
+  const [metrics, setMetrics] = useState<MetricsData | null>(null);
+
+
+  const closeLogs = () => {
+    if (source) {
+      source.close();
+      setSource(null);
+    }
+    if (metricsSource) {
+      metricsSource.close();
+      setMetricsSource(null);
+    }
+    setLogs(null);
+    setMetrics(null);
+    setError(null);
+  };
+
+  useEffect(() => {
+    fetchServers();
+    const es = new EventSource('/api/servers/stream');
+    es.onmessage = (e) => {
+      const upd = JSON.parse(e.data) as { id: number; status: string };
+      updateStatus(upd.id, upd.status);
+    };
+    return () => {
+      es.close();
+      if (source) source.close();
+      if (metricsSource) metricsSource.close();
+    };
+  }, []);
+
+  const start = async (id: number) => {
+    setActionId(id);
+    setError(null);
+    const res = await fetch(`/api/servers/${id}/start`, { method: 'POST', credentials: 'include' });
+    setActionId(null);
+    if (!res.ok) {
+      setError(await res.text());
+    }
+  };
+
+  const stop = async (id: number) => {
+    setActionId(id);
+    setError(null);
+    const res = await fetch(`/api/servers/${id}/stop`, { method: 'POST', credentials: 'include' });
+    setActionId(null);
+    if (!res.ok) {
+      setError(await res.text());
+    }
+  };
+
+  const del = async (id: number) => {
+    setActionId(id);
+    setError(null);
+    const res = await fetch(`/api/servers/${id}`, { method: 'DELETE', credentials: 'include' });
+    setActionId(null);
+    if (!res.ok) {
+      setError(await res.text());
+    }
+    fetchServers();
+  };
+
+  const redeploy = async (id: number) => {
+    setActionId(id);
+    setError(null);
+    const res = await fetch(`/api/servers/${id}/redeploy`, { method: 'POST', credentials: 'include' });
+    setActionId(null);
+    if (!res.ok) {
+      setError(await res.text());
+    }
+  };
+
+  const viewMetrics = async (id: number) => {
+    const res = await fetch(`/api/servers/${id}/metrics`, {
+      credentials: 'include',
+    });
+    if (res.ok) {
+      const events = await res.json();
+      setMetrics({ id, events });
+    }
+    if (metricsSource) metricsSource.close();
+    const es = new EventSource(`/api/servers/${id}/metrics/stream`);
+    es.onmessage = (e) => {
+      const event = JSON.parse(e.data);
+      setMetrics(prev =>
+        prev && prev.id === id
+          ? { ...prev, events: [event, ...prev.events] }
+          : prev
+      );
+    };
+    setMetricsSource(es);
+  };
+
+  const viewLogs = async (id: number) => {
+    const res = await fetch(`/api/servers/${id}/logs/history`, {
+      credentials: 'include',
+    });
+    if (res.ok) {
+      const entries = await res.json();
+      setLogs({ id, entries });
+    }
+    if (source) source.close();
+    const es = new EventSource(`/api/servers/${id}/logs/stream`);
+    es.onmessage = (e) => {
+      setLogs(prev =>
+        prev && prev.id === id
+          ? { ...prev, entries: [{ id: Date.now(), collected_at: new Date().toISOString(), log_text: e.data }, ...prev.entries] }
+          : prev
+      );
+    };
+    setSource(es);
+  };
+
+  return (
+    <div className="p-4">
+      <h1 className="text-2xl mb-4">Your Servers</h1>
+      {(error || storeError) && <Alert message={(error || storeError) as string} />}
+      {loading && <Spinner />}
+      <ul className="grid gap-4 md:grid-cols-2">
+        {servers.map((s) => (
+          <ServerCard
+            key={s.id}
+            server={s}
+            actionId={actionId}
+            start={start}
+            stop={stop}
+            del={del}
+            redeploy={redeploy}
+            viewLogs={viewLogs}
+            viewMetrics={viewMetrics}
+            closeLogs={closeLogs}
+            logs={logs?.id === s.id}
+            metrics={metrics?.id === s.id}
+          />
+        ))}
+      </ul>
+      {logs && (
+        <pre className="mt-2 whitespace-pre-wrap bg-black text-green-300 p-2 rounded overflow-auto max-h-60 text-sm">
+          {logs.entries.map((e) => `${e.collected_at}: ${e.log_text}\n`).join('')}
+        </pre>
+      )}
+      {metrics && (
+        <div className="mt-2 bg-gray-900 p-2 rounded">
+          <MetricsChart events={metrics.events.slice().reverse()} />
+        </div>
+      )}
+    </div>
+  );
+}
diff --git a/frontend/app/vector-dbs/page.tsx b/frontend/app/vector-dbs/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..809603b2383e78aa0b882afc43c69d002073e40f
--- /dev/null
+++ b/frontend/app/vector-dbs/page.tsx
@@ -0,0 +1,62 @@
+'use client';
+import { useState } from 'react';
+import { useApi } from '../../lib/api';
+import Card from '../../components/Card';
+import Button from '../../components/Button';
+import Alert from '../../components/Alert';
+
+interface Db {
+  id: number;
+  name: string;
+  db_type: string;
+  url?: string;
+}
+
+export default function VectorDbPage() {
+  const { data, isLoading, mutate } = useApi<Db[]>('/api/vector-dbs');
+  const [name, setName] = useState('');
+  const [error, setError] = useState('');
+
+  const create = async () => {
+    setError('');
+    const res = await fetch('/api/vector-dbs', {
+      method: 'POST',
+      credentials: 'include',
+      headers: { 'Content-Type': 'application/json' },
+      body: JSON.stringify({ name }),
+    });
+    if (res.ok) {
+      setName('');
+      mutate();
+    } else {
+      setError('Failed to create');
+    }
+  };
+
+  const del = async (id: number) => {
+    await fetch(`/api/vector-dbs/${id}`, { method: 'DELETE', credentials: 'include' });
+    mutate();
+  };
+
+  return (
+    <div className="space-y-4 mt-6">
+      <div className="flex gap-2">
+        <input value={name} onChange={e => setName(e.target.value)} className="border p-2 flex-grow" placeholder="Name" />
+        <Button onClick={create}>Create</Button>
+      </div>
+      {error && <Alert message={error} />}
+      {isLoading && <div>Loading...</div>}
+      <div className="grid md:grid-cols-2 gap-4">
+        {data?.map(db => (
+          <Card key={db.id} className="flex justify-between items-center">
+            <div>
+              <div className="font-semibold">{db.name}</div>
+              <div className="text-sm text-gray-400">{db.db_type}</div>
+            </div>
+            <Button onClick={() => del(db.id)} variant="secondary">Delete</Button>
+          </Card>
+        ))}
+      </div>
+    </div>
+  );
+}
diff --git a/frontend/app/workflows/page.tsx b/frontend/app/workflows/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..045c0525668f823bcfff7e1a70080d7889bcd562
--- /dev/null
+++ b/frontend/app/workflows/page.tsx
@@ -0,0 +1,91 @@
+'use client';
+import { useState } from 'react';
+import { useApi } from '../../lib/api';
+import Card from '../../components/Card';
+import Button from '../../components/Button';
+import Alert from '../../components/Alert';
+
+interface Workflow { id:number; name:string; created_at:string; }
+interface Server { id:number; name:string; }
+
+export default function WorkflowsPage() {
+  const { data: workflows, isLoading, mutate } = useApi<Workflow[]>('/api/workflows');
+  const { data: servers } = useApi<Server[]>('/api/servers');
+  const [name, setName] = useState('');
+  const [selected, setSelected] = useState<number[]>([]);
+  const [input, setInput] = useState('{}');
+  const [error, setError] = useState('');
+
+  const toggle = (id:number) => {
+    setSelected(prev => prev.includes(id) ? prev.filter(x=>x!==id) : [...prev, id]);
+  };
+
+  const create = async () => {
+    setError('');
+    const res = await fetch('/api/workflows', {
+      method: 'POST',
+      credentials: 'include',
+      headers: { 'Content-Type': 'application/json' },
+      body: JSON.stringify({ name, steps: selected }),
+    });
+    if (res.ok) {
+      setName('');
+      setSelected([]);
+      mutate();
+    } else {
+      setError('Failed to create');
+    }
+  };
+
+  const del = async (id:number) => {
+    await fetch(`/api/workflows/${id}`, { method: 'DELETE', credentials:'include' });
+    mutate();
+  };
+
+  const invoke = async (id:number) => {
+    let parsed: any;
+    try { parsed = JSON.parse(input); } catch { setError('Invalid JSON'); return; }
+    const res = await fetch(`/api/workflows/${id}/invoke`, {
+      method:'POST', credentials:'include', headers:{'Content-Type':'application/json'},
+      body: JSON.stringify({ input: parsed })
+    });
+    if(res.ok){
+      const out = await res.json();
+      alert(JSON.stringify(out));
+    } else {
+      setError('Failed to invoke');
+    }
+  };
+
+  return (
+    <div className="space-y-4 mt-6">
+      <div className="flex gap-2 items-start flex-wrap">
+        <input value={name} onChange={e=>setName(e.target.value)} className="border p-2" placeholder="Workflow name" />
+        <div className="flex flex-wrap gap-2">
+          {servers?.map(s => (
+            <label key={s.id} className="text-sm flex items-center gap-1">
+              <input type="checkbox" checked={selected.includes(s.id)} onChange={()=>toggle(s.id)} />
+              {s.name}
+            </label>
+          ))}
+        </div>
+        <Button onClick={create}>Create</Button>
+      </div>
+      <textarea value={input} onChange={e=>setInput(e.target.value)} className="border p-2 w-full h-24" placeholder="Invoke input as JSON" />
+      {error && <Alert message={error} />}
+      {isLoading && <div>Loading...</div>}
+      <div className="grid md:grid-cols-2 gap-4">
+        {workflows?.map(w => (
+          <Card key={w.id} className="space-y-2">
+            <div className="font-semibold">{w.name}</div>
+            <div className="text-xs text-gray-500">{new Date(w.created_at).toLocaleString()}</div>
+            <div className="flex gap-2">
+              <Button onClick={()=>invoke(w.id)}>Run</Button>
+              <Button onClick={()=>del(w.id)} variant="secondary">Delete</Button>
+            </div>
+          </Card>
+        ))}
+      </div>
+    </div>
+  );
+}
diff --git a/frontend/components/Alert.tsx b/frontend/components/Alert.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..6117b3358e8fc478e3a494d18481ec70fe284ff5
--- /dev/null
+++ b/frontend/components/Alert.tsx
@@ -0,0 +1,8 @@
+'use client';
+
+export default function Alert({ message, type = 'error' }: { message: string; type?: 'error' | 'success' }) {
+  const color = type === 'error' ? 'bg-red-100 text-red-800 border-red-300' : 'bg-green-100 text-green-800 border-green-300';
+  return (
+    <div className={`border ${color} p-2 rounded`}>{message}</div>
+  );
+}
diff --git a/frontend/components/Button.tsx b/frontend/components/Button.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..bfc6529ac6aaa9de98177e529ee56d6aee5fe9cd
--- /dev/null
+++ b/frontend/components/Button.tsx
@@ -0,0 +1,41 @@
+'use client';
+
+/* musikconnect:
+   purpose: Reusable button or link styled with Tailwind variants
+   inputs: href optional, onClick callback, variant, disabled flag, className
+   outputs: button or Link element
+   status: stable
+   depends_on: clsx, next/link
+   related_docs: ../../design-vision.md
+*/
+import clsx from 'clsx';
+import Link from 'next/link';
+
+interface ButtonProps {
+  href?: string;
+  onClick?: () => void;
+  children: React.ReactNode;
+  variant?: 'primary' | 'secondary';
+  disabled?: boolean;
+  className?: string;
+}
+
+export default function Button({ href, onClick, children, variant = 'primary', disabled = false, className }: ButtonProps) {
+  const base = 'inline-block px-5 py-2 rounded font-medium transition-colors';
+  const styles = {
+    primary: 'bg-blue-600 hover:bg-blue-700 text-white',
+    secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-900',
+  };
+  if (href) {
+    return (
+      <Link href={href} className={clsx(base, styles[variant], className)}>
+        {children}
+      </Link>
+    );
+  }
+  return (
+    <button onClick={onClick} disabled={disabled} className={clsx(base, styles[variant], className, disabled && 'opacity-50 cursor-not-allowed')}> 
+      {children}
+    </button>
+  );
+}
diff --git a/frontend/components/Card.tsx b/frontend/components/Card.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..a623a40aa3bc7cea26daa235037c0833913a569d
--- /dev/null
+++ b/frontend/components/Card.tsx
@@ -0,0 +1,19 @@
+import { ReactNode } from 'react';
+import clsx from 'clsx';
+
+/* musikconnect:
+   purpose: Generic card container for lists and feature highlights
+   inputs: children nodes, optional className
+   outputs: styled div wrapper
+   status: stable
+   depends_on: clsx
+   related_docs: ../../design-vision.md
+*/
+
+export default function Card({ className, children }: { className?: string; children: ReactNode }) {
+  return (
+    <div className={clsx('rounded border border-gray-700 p-4 shadow-sm bg-gray-800', className)}>
+      {children}
+    </div>
+  );
+}
diff --git a/frontend/components/FeatureCard.tsx b/frontend/components/FeatureCard.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..5024f6ce522c77d67bbcfe286ab3689620ab7ff1
--- /dev/null
+++ b/frontend/components/FeatureCard.tsx
@@ -0,0 +1,19 @@
+import Image from 'next/image';
+import Link from 'next/link';
+
+interface FeatureCardProps {
+  href: string;
+  title: string;
+  description: string;
+  icon: string;
+}
+
+export default function FeatureCard({ href, title, description, icon }: FeatureCardProps) {
+  return (
+    <Link href={href} className="flex flex-col items-center gap-3 p-4 border rounded hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
+      <Image src={icon} alt="" width={48} height={48} />
+      <h3 className="font-semibold text-lg">{title}</h3>
+      <p className="text-sm text-center text-gray-600 dark:text-gray-400">{description}</p>
+    </Link>
+  );
+}
diff --git a/frontend/components/Footer.tsx b/frontend/components/Footer.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..2652c63d9b60a1ff98529edfb25733fa52e49d56
--- /dev/null
+++ b/frontend/components/Footer.tsx
@@ -0,0 +1,14 @@
+import Link from 'next/link';
+
+export default function Footer() {
+  return (
+    <footer className="py-8 text-center text-sm text-gray-500 border-t mt-16">
+      <p className="mb-2">© 2025 MCP Host</p>
+      <nav className="flex justify-center gap-4">
+        <Link href="/docs" className="hover:underline">Docs</Link>
+        <Link href="/blog" className="hover:underline">Blog</Link>
+        <Link href="/marketplace" className="hover:underline">Marketplace</Link>
+      </nav>
+    </footer>
+  );
+}
diff --git a/frontend/components/Hero.tsx b/frontend/components/Hero.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..25609721a981363977c15d1506fef1fa162b71fa
--- /dev/null
+++ b/frontend/components/Hero.tsx
@@ -0,0 +1,8 @@
+export default function Hero() {
+  return (
+    <section className="text-center py-24 flex flex-col gap-6 bg-gradient-to-b from-indigo-700 to-slate-800 text-white rounded">
+      <h1 className="text-4xl font-bold">MCP Host</h1>
+      <p className="text-lg">Spin up your own Model Context Provider in seconds.</p>
+    </section>
+  );
+}
diff --git a/frontend/components/Input.tsx b/frontend/components/Input.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..9be0065a7368d649633fccb81438a68f20434089
--- /dev/null
+++ b/frontend/components/Input.tsx
@@ -0,0 +1,30 @@
+'use client';
+import clsx from 'clsx';
+
+/* musikconnect:
+   purpose: Reusable text input with optional label and focus styles
+   inputs: React.InputHTMLAttributes extended with 'label'
+   outputs: styled input element wrapped in a label
+   status: stable
+   depends_on: clsx
+   related_docs: ../../design-vision.md
+*/
+
+interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
+  label?: string;
+}
+
+export default function Input({ label, className, ...props }: InputProps) {
+  return (
+    <label className="flex flex-col gap-1">
+      {label && <span className="text-sm font-medium text-gray-700">{label}</span>}
+      <input
+        className={clsx(
+          'border rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500',
+          className,
+        )}
+        {...props}
+      />
+    </label>
+  );
+}
diff --git a/frontend/components/MetricsChart.tsx b/frontend/components/MetricsChart.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..c7f09b476b41cb52faa54421dd674f430f56bba3
--- /dev/null
+++ b/frontend/components/MetricsChart.tsx
@@ -0,0 +1,120 @@
+import { Line } from 'react-chartjs-2';
+import {
+  Chart as ChartJS,
+  CategoryScale,
+  LinearScale,
+  PointElement,
+  LineElement,
+  Title,
+  Tooltip,
+  Legend,
+} from 'chart.js';
+import { useMemo, useState, useEffect } from 'react';
+
+ChartJS.register(
+  CategoryScale,
+  LinearScale,
+  PointElement,
+  LineElement,
+  Title,
+  Tooltip,
+  Legend
+);
+
+interface MetricEvent {
+  id: number;
+  timestamp: string;
+  event_type: string;
+  details?: any;
+}
+
+export default function MetricsChart({ events }: { events: MetricEvent[] }) {
+  const eventTypes = useMemo(
+    () => Array.from(new Set(events.map((e) => e.event_type))),
+    [events]
+  );
+  const [selected, setSelected] = useState<string[]>(eventTypes);
+
+  // update selected types when events change
+  useEffect(() => {
+    setSelected((sel) => sel.filter((t) => eventTypes.includes(t)));
+  }, [eventTypes]);
+
+  const colors = ['#60a5fa', '#10b981', '#f97316', '#e11d48', '#a855f7'];
+
+  const data = useMemo(() => {
+    const labels = events
+      .map((e) => new Date(e.timestamp).toLocaleTimeString())
+      .reverse();
+
+    const datasets = eventTypes
+      .filter((t) => selected.includes(t))
+      .map((type, idx) => {
+        const cumulative: number[] = [];
+        let count = 0;
+        events
+          .slice()
+          .reverse()
+          .forEach((e) => {
+            if (e.event_type === type) count += 1;
+            cumulative.push(count);
+          });
+        cumulative.reverse();
+        const color = colors[idx % colors.length];
+        return {
+          label: type,
+          data: cumulative,
+          borderColor: color,
+          backgroundColor: `${color}33`,
+        };
+      });
+
+    return { labels, datasets };
+  }, [events, eventTypes, selected]);
+
+  const options = useMemo(
+    () => ({
+      responsive: true,
+      plugins: {
+        legend: {
+          position: 'bottom' as const,
+          labels: { color: '#fff' },
+        },
+      },
+      scales: {
+        x: {
+          ticks: { color: '#fff' },
+          grid: { color: '#444' },
+        },
+        y: {
+          beginAtZero: true,
+          ticks: { stepSize: 1, color: '#fff' },
+          grid: { color: '#444' },
+        },
+      },
+    }),
+    []
+  );
+
+  return (
+    <div>
+      <div className="flex space-x-3 mb-2 text-sm text-white">
+        {eventTypes.map((t) => (
+          <label key={t} className="flex items-center space-x-1">
+            <input
+              type="checkbox"
+              checked={selected.includes(t)}
+              onChange={() =>
+                setSelected((sel) =>
+                  sel.includes(t) ? sel.filter((x) => x !== t) : [...sel, t]
+                )
+              }
+            />
+            <span>{t}</span>
+          </label>
+        ))}
+      </div>
+      <Line options={options} data={data} />
+    </div>
+  );
+}
diff --git a/frontend/components/Nav.tsx b/frontend/components/Nav.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..c5542bcd2156d1c0b33df2d761b758f49e7e681e
--- /dev/null
+++ b/frontend/components/Nav.tsx
@@ -0,0 +1,35 @@
+'use client';
+import Link from 'next/link';
+import { useSession } from '../lib/session';
+
+export default function Nav() {
+  const user = useSession();
+  return (
+    <nav className="p-4 bg-slate-800 text-white flex gap-4">
+      <Link href="/">Home</Link>
+      <Link href="/docs">Docs</Link>
+      <Link href="/blog">Blog</Link>
+      <Link href="/marketplace">Marketplace</Link>
+      <Link href="/vector-dbs">Vector DBs</Link>
+      <Link href="/ingestion">Ingestion</Link>
+      <Link href="/workflows">Workflows</Link>
+      <Link href="/evaluations">Evaluations</Link>
+      <Link href="/orgs">Orgs</Link>
+      <Link href="/servers">Servers</Link>
+      <Link href="/servers/new">New Server</Link>
+      {user ? (
+        <>
+          <Link href="/profile">Profile</Link>
+          <form action="/api/logout" method="post">
+            <button className="ml-4 underline" type="submit">Logout ({user.email})</button>
+          </form>
+        </>
+      ) : (
+        <>
+          <Link href="/login">Login</Link>
+          <Link href="/register">Register</Link>
+        </>
+      )}
+    </nav>
+  );
+}
diff --git a/frontend/components/README.md b/frontend/components/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..8ab02e4971b4809491da827df7f9316d29af83fc
--- /dev/null
+++ b/frontend/components/README.md
@@ -0,0 +1,16 @@
+# Frontend Components
+
+This directory contains reusable UI components used across the MCP Host frontend.
+
+- **Button** – styled button or link with primary and secondary variants
+- **Input** – text input with optional label
+- **Textarea** – textarea input with optional label
+- **Card** – generic container for lists and highlights
+- **ServerCard** – dashboard item showing an MCP server with action buttons
+- **FeatureCard** – card used on the home page to showcase features
+- **MetricsChart** – chart.js wrapper for server metrics
+- **Spinner** – small loading indicator
+- **Alert** – error message display
+
+These components follow the design principles in `../../design-vision.md` and
+include musikconnect tags for tooling.
diff --git a/frontend/components/Section.tsx b/frontend/components/Section.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..3d48d146a6879fd23df26c98ac40b49fc6cc6373
--- /dev/null
+++ b/frontend/components/Section.tsx
@@ -0,0 +1,15 @@
+interface SectionProps {
+  title: string;
+  children: React.ReactNode;
+}
+
+export default function Section({ title, children }: SectionProps) {
+  return (
+    <section className="my-12 max-w-3xl mx-auto px-4">
+      <h2 className="text-2xl font-semibold mb-4 border-b pb-2">{title}</h2>
+      <div className="text-gray-700 dark:text-gray-200 leading-relaxed space-y-4">
+        {children}
+      </div>
+    </section>
+  );
+}
diff --git a/frontend/components/ServerCard.tsx b/frontend/components/ServerCard.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..7e2b4b90658f3c65aef45aa9711c69411da78b87
--- /dev/null
+++ b/frontend/components/ServerCard.tsx
@@ -0,0 +1,135 @@
+'use client';
+import Spinner from './Spinner';
+import Link from 'next/link';
+import { Server } from '../lib/store';
+
+/* musikconnect:
+   purpose: Display and control a single MCP server with actions
+   inputs: server data, callbacks for start/stop/delete/redeploy and toggles
+   outputs: list item containing controls and optional logs/metrics
+   status: stable
+   depends_on: Spinner, Next.js Link
+   related_docs: ../../design-vision.md
+*/
+
+interface Props {
+  server: Server;
+  actionId: number | null;
+  start: (id: number) => Promise<void>;
+  stop: (id: number) => Promise<void>;
+  del: (id: number) => Promise<void>;
+  redeploy: (id: number) => Promise<void>;
+  viewLogs: (id: number) => Promise<void>;
+  viewMetrics: (id: number) => Promise<void>;
+  closeLogs: () => void;
+  logs: boolean;
+  metrics: boolean;
+}
+
+export default function ServerCard({
+  server,
+  actionId,
+  start,
+  stop,
+  del,
+  redeploy,
+  viewLogs,
+  viewMetrics,
+  closeLogs,
+  logs,
+  metrics,
+}: Props) {
+  return (
+    <li className="border rounded p-4 space-y-2">
+      <div className="flex justify-between items-center">
+        <div>
+          <span className="font-semibold">{server.name}</span>{' '}
+          <span className="text-sm text-gray-500">({server.server_type})</span>
+          {server.use_gpu && (
+            <span className="ml-2 text-xs text-purple-600">GPU</span>
+          )}
+        </div>
+        <span className="capitalize text-sm">{server.status}</span>
+      </div>
+      <div className="space-x-2 flex flex-wrap">
+        {server.status === 'stopped' && (
+          <button
+            className="px-2 py-1 bg-green-600 text-white flex items-center justify-center rounded"
+            onClick={() => start(server.id)}
+            disabled={actionId === server.id}
+          >
+            {actionId === server.id ? <Spinner /> : 'Start'}
+          </button>
+        )}
+        {server.status === 'running' && (
+          <button
+            className="px-2 py-1 bg-yellow-600 text-white flex items-center justify-center rounded"
+            onClick={() => stop(server.id)}
+            disabled={actionId === server.id}
+          >
+            {actionId === server.id ? <Spinner /> : 'Stop'}
+          </button>
+        )}
+        <button
+          className="px-2 py-1 bg-red-600 text-white flex items-center justify-center rounded"
+          onClick={() => del(server.id)}
+          disabled={actionId === server.id}
+        >
+          {actionId === server.id ? <Spinner /> : 'Delete'}
+        </button>
+        <button
+          className="px-2 py-1 bg-blue-600 text-white flex items-center justify-center rounded"
+          onClick={() => redeploy(server.id)}
+          disabled={actionId === server.id}
+        >
+          {actionId === server.id ? <Spinner /> : 'Redeploy'}
+        </button>
+        <button className="px-2 py-1 bg-gray-600 text-white rounded" onClick={() => viewLogs(server.id)}>
+          Logs
+        </button>
+        <button className="px-2 py-1 bg-gray-600 text-white rounded" onClick={() => viewMetrics(server.id)}>
+          Metrics
+        </button>
+        <Link href={`/servers/${server.id}/services`} className="px-2 py-1 bg-gray-600 text-white rounded">
+          Services
+        </Link>
+        <Link href={`/servers/${server.id}/domains`} className="px-2 py-1 bg-gray-600 text-white rounded">
+          Domains
+        </Link>
+        <Link href={`/servers/${server.id}/files`} className="px-2 py-1 bg-gray-600 text-white rounded">
+          Files
+        </Link>
+        <Link href={`/servers/${server.id}/invoke`} className="px-2 py-1 bg-gray-600 text-white rounded">
+          Invoke
+        </Link>
+        <Link href={`/servers/${server.id}/manifest`} className="px-2 py-1 bg-gray-600 text-white rounded">
+          Manifest
+        </Link>
+        <Link href={`/servers/${server.id}/capabilities`} className="px-2 py-1 bg-gray-600 text-white rounded">
+          Capabilities
+        </Link>
+        <Link href={`/servers/${server.id}/invocations`} className="px-2 py-1 bg-gray-600 text-white rounded">
+          Invocations
+        </Link>
+        <Link href={`/servers/${server.id}/eval`} className="px-2 py-1 bg-gray-600 text-white rounded">
+          Evaluation
+        </Link>
+        {logs && (
+          <button className="px-2 py-1 bg-gray-600 text-white rounded" onClick={closeLogs}>
+            Close
+          </button>
+        )}
+      </div>
+      {logs && (
+        <pre className="mt-2 whitespace-pre-wrap bg-black text-green-300 p-2 rounded overflow-auto max-h-60 text-sm">
+          {/* logs inserted by parent */}
+        </pre>
+      )}
+      {metrics && (
+        <div className="mt-2 bg-gray-900 p-2 rounded">
+          {/* metrics chart inserted by parent */}
+        </div>
+      )}
+    </li>
+  );
+}
diff --git a/frontend/components/Spinner.tsx b/frontend/components/Spinner.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..8e1b159dac31f53688605691d3a87a9f092f63d5
--- /dev/null
+++ b/frontend/components/Spinner.tsx
@@ -0,0 +1,16 @@
+'use client';
+
+/* musikconnect:
+   purpose: Simple spinning loader for async actions
+   inputs: none
+   outputs: SVG spinner element
+   status: stable
+*/
+
+export default function Spinner() {
+  return (
+    <div className="flex items-center justify-center">
+      <div className="h-5 w-5 border-2 border-current border-t-transparent rounded-full animate-spin" />
+    </div>
+  );
+}
diff --git a/frontend/components/Textarea.tsx b/frontend/components/Textarea.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..51db5b4ee091a44ce18d18cfc89b7d05cdd6a919
--- /dev/null
+++ b/frontend/components/Textarea.tsx
@@ -0,0 +1,27 @@
+'use client';
+import clsx from 'clsx';
+
+/* musikconnect:
+   purpose: Reusable textarea with label and Tailwind focus styles
+   inputs: React.TextareaHTMLAttributes extended with 'label'
+   outputs: styled textarea element wrapped in a label
+   status: stable
+   depends_on: clsx
+   related_docs: ../../design-vision.md
+*/
+
+interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
+  label?: string;
+}
+
+export default function Textarea({ label, className, ...props }: TextareaProps) {
+  return (
+    <label className="flex flex-col gap-1">
+      {label && <span className="text-sm font-medium text-gray-700">{label}</span>}
+      <textarea
+        className={clsx('border rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500', className)}
+        {...props}
+      />
+    </label>
+  );
+}
diff --git a/frontend/e2e/home.spec.ts b/frontend/e2e/home.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..22c718e818a57a7a22cd9b399bc67e4f89b89287
--- /dev/null
+++ b/frontend/e2e/home.spec.ts
@@ -0,0 +1,6 @@
+import { test, expect } from '@playwright/test';
+
+test('index page loads', async ({ page }) => {
+  await page.goto('/');
+  await expect(page.getByRole('heading', { name: 'MCP Host' })).toBeVisible();
+});
diff --git a/frontend/jest.setup.ts b/frontend/jest.setup.ts
new file mode 100644
index 0000000000000000000000000000000000000000..42bbb4f209acbeb887996a11331a78b5a07a03b5
--- /dev/null
+++ b/frontend/jest.setup.ts
@@ -0,0 +1,7 @@
+import '@testing-library/jest-dom';
+// Simplistic mock for Next.js Link component
+jest.mock('next/link', () => {
+  return ({ href, children }: { href: string; children: React.ReactNode }) => {
+    return React.createElement('a', { href }, children);
+  };
+});
diff --git a/frontend/lib/api.ts b/frontend/lib/api.ts
new file mode 100644
index 0000000000000000000000000000000000000000..cffc4b158f82a3fa6182897f61aad31dbbfc0325
--- /dev/null
+++ b/frontend/lib/api.ts
@@ -0,0 +1,12 @@
+import useSWR from 'swr';
+
+const fetcher = (url: string) => fetch(url, { credentials: 'include' })
+  .then(res => {
+    if (!res.ok) throw new Error(res.statusText);
+    return res.json();
+  });
+
+export function useApi<T>(url: string) {
+  const { data, error, isLoading, mutate } = useSWR<T>(url, fetcher);
+  return { data, error, isLoading, mutate };
+}
diff --git a/frontend/lib/session.tsx b/frontend/lib/session.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..ef57fadc1040e978190ccc9bbb9ebc6d44ea1dd0
--- /dev/null
+++ b/frontend/lib/session.tsx
@@ -0,0 +1,27 @@
+'use client';
+import { createContext, useContext, useEffect, useState } from 'react';
+
+export interface User {
+  id: number;
+  email: string;
+}
+
+const SessionContext = createContext<User | null>(null);
+
+export function SessionProvider({ children }: { children: React.ReactNode }) {
+  const [user, setUser] = useState<User | null>(null);
+
+  useEffect(() => {
+    fetch('/api/me')
+      .then(res => (res.ok ? res.json() : null))
+      .then(data => {
+        if (data) setUser(data);
+      });
+  }, []);
+
+  return <SessionContext.Provider value={user}>{children}</SessionContext.Provider>;
+}
+
+export function useSession() {
+  return useContext(SessionContext);
+}
diff --git a/frontend/lib/store.test.ts b/frontend/lib/store.test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..9cbbe3bfbbd7fff2573822d47b27c3ab1ba25807
--- /dev/null
+++ b/frontend/lib/store.test.ts
@@ -0,0 +1,16 @@
+import { act } from '@testing-library/react';
+import { useServerStore } from './store';
+
+// Zustand persists across tests, reset
+beforeEach(() => {
+  const { servers } = useServerStore.getState();
+  useServerStore.setState({ servers: [] });
+});
+
+test('updateStatus updates server status', () => {
+  useServerStore.setState({ servers: [{ id: 1, name: 's', server_type: 't', status: 'starting', use_gpu: false }] });
+  act(() => {
+    useServerStore.getState().updateStatus(1, 'running');
+  });
+  expect(useServerStore.getState().servers[0].status).toBe('running');
+});
diff --git a/frontend/lib/store.ts b/frontend/lib/store.ts
new file mode 100644
index 0000000000000000000000000000000000000000..09fe7c3ca27fca68d8fa005722edf575ed434ca9
--- /dev/null
+++ b/frontend/lib/store.ts
@@ -0,0 +1,39 @@
+import { create } from 'zustand';
+
+export interface Server {
+  id: number;
+  name: string;
+  server_type: string;
+  status: string;
+  use_gpu: boolean;
+}
+
+interface ServerState {
+  servers: Server[];
+  loading: boolean;
+  error: string | null;
+  fetchServers: () => Promise<void>;
+  updateStatus: (id: number, status: string) => void;
+}
+
+export const useServerStore = create<ServerState>((set) => ({
+  servers: [],
+  loading: false,
+  error: null,
+  fetchServers: async () => {
+    set({ loading: true, error: null });
+    try {
+      const res = await fetch('/api/servers', { credentials: 'include' });
+      const data: Server[] = await res.json();
+      set({ servers: data, loading: false });
+    } catch {
+      set({ error: 'Failed to load servers', loading: false });
+    }
+  },
+  updateStatus: (id, status) =>
+    set((state) => ({
+      servers: state.servers.map((s) =>
+        s.id === id ? { ...s, status } : s
+      ),
+    })),
+}));
diff --git a/frontend/lib/sum.test.ts b/frontend/lib/sum.test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..c595b4362a8c6fca6457db4bd5cc16d53e9de067
--- /dev/null
+++ b/frontend/lib/sum.test.ts
@@ -0,0 +1,5 @@
+import { sum } from './sum';
+
+test('adds numbers', () => {
+  expect(sum(2, 3)).toBe(5);
+});
diff --git a/frontend/lib/sum.ts b/frontend/lib/sum.ts
new file mode 100644
index 0000000000000000000000000000000000000000..7372ed029df70ef0c77d20dbe602c68b8832baa9
--- /dev/null
+++ b/frontend/lib/sum.ts
@@ -0,0 +1,3 @@
+export function sum(a: number, b: number): number {
+  return a + b;
+}
diff --git a/frontend/next.config.ts b/frontend/next.config.ts
new file mode 100644
index 0000000000000000000000000000000000000000..e9ffa3083ad279ecf95fd8eae59cb253e9a539c4
--- /dev/null
+++ b/frontend/next.config.ts
@@ -0,0 +1,7 @@
+import type { NextConfig } from "next";
+
+const nextConfig: NextConfig = {
+  /* config options here */
+};
+
+export default nextConfig;
diff --git a/frontend/package-lock.json b/frontend/package-lock.json
new file mode 100644
index 0000000000000000000000000000000000000000..e1383caf7c9c56586ec9f14d3e0fbc4eea822832
--- /dev/null
+++ b/frontend/package-lock.json
@@ -0,0 +1,8475 @@
+{
+  "name": "frontend",
+  "version": "0.1.0",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "frontend",
+      "version": "0.1.0",
+      "dependencies": {
+        "chart.js": "^4.4.0",
+        "clsx": "^2.1.1",
+        "next": "15.3.4",
+        "react": "^19.0.0",
+        "react-chartjs-2": "^5.2.0",
+        "react-dom": "^19.0.0",
+        "swr": "^2.2.0",
+        "zustand": "^4.4.1"
+      },
+      "devDependencies": {
+        "@playwright/test": "^1.41.2",
+        "@tailwindcss/postcss": "^4",
+        "@testing-library/jest-dom": "^6.1.5",
+        "@testing-library/react": "^14.1.2",
+        "@types/node": "^20",
+        "@types/react": "^19",
+        "@types/react-dom": "^19",
+        "jest": "^29.7.0",
+        "jest-environment-jsdom": "^30.0.4",
+        "react-test-renderer": "^19.0.0",
+        "tailwindcss": "^4",
+        "ts-jest": "^29.1.1",
+        "typescript": "^5"
+      }
+    },
+    "node_modules/@adobe/css-tools": {
+      "version": "4.4.3",
+      "resolved": "https://registry.npmjs.org/@adobe/css-tools/-/css-tools-4.4.3.tgz",
+      "integrity": "sha512-VQKMkwriZbaOgVCby1UDY/LDk5fIjhQicCvVPFqfe+69fWaPWydbWJ3wRt59/YzIwda1I81loas3oCoHxnqvdA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@alloc/quick-lru": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
+      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@ampproject/remapping": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
+      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@jridgewell/gen-mapping": "^0.3.5",
+        "@jridgewell/trace-mapping": "^0.3.24"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@asamuzakjp/css-color": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/@asamuzakjp/css-color/-/css-color-3.2.0.tgz",
+      "integrity": "sha512-K1A6z8tS3XsmCMM86xoWdn7Fkdn9m6RSVtocUrJYIwZnFVkng/PvkEoWtOWmP+Scc6saYWHWZYbndEEXxl24jw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@csstools/css-calc": "^2.1.3",
+        "@csstools/css-color-parser": "^3.0.9",
+        "@csstools/css-parser-algorithms": "^3.0.4",
+        "@csstools/css-tokenizer": "^3.0.3",
+        "lru-cache": "^10.4.3"
+      }
+    },
+    "node_modules/@asamuzakjp/css-color/node_modules/lru-cache": {
+      "version": "10.4.3",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
+      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/@babel/code-frame": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
+      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-validator-identifier": "^7.27.1",
+        "js-tokens": "^4.0.0",
+        "picocolors": "^1.1.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/compat-data": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
+      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/core": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
+      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@ampproject/remapping": "^2.2.0",
+        "@babel/code-frame": "^7.27.1",
+        "@babel/generator": "^7.28.0",
+        "@babel/helper-compilation-targets": "^7.27.2",
+        "@babel/helper-module-transforms": "^7.27.3",
+        "@babel/helpers": "^7.27.6",
+        "@babel/parser": "^7.28.0",
+        "@babel/template": "^7.27.2",
+        "@babel/traverse": "^7.28.0",
+        "@babel/types": "^7.28.0",
+        "convert-source-map": "^2.0.0",
+        "debug": "^4.1.0",
+        "gensync": "^1.0.0-beta.2",
+        "json5": "^2.2.3",
+        "semver": "^6.3.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/babel"
+      }
+    },
+    "node_modules/@babel/core/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/@babel/generator": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
+      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/parser": "^7.28.0",
+        "@babel/types": "^7.28.0",
+        "@jridgewell/gen-mapping": "^0.3.12",
+        "@jridgewell/trace-mapping": "^0.3.28",
+        "jsesc": "^3.0.2"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-compilation-targets": {
+      "version": "7.27.2",
+      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
+      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/compat-data": "^7.27.2",
+        "@babel/helper-validator-option": "^7.27.1",
+        "browserslist": "^4.24.0",
+        "lru-cache": "^5.1.1",
+        "semver": "^6.3.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/@babel/helper-globals": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
+      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-module-imports": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
+      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/traverse": "^7.27.1",
+        "@babel/types": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-module-transforms": {
+      "version": "7.27.3",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
+      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-module-imports": "^7.27.1",
+        "@babel/helper-validator-identifier": "^7.27.1",
+        "@babel/traverse": "^7.27.3"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0"
+      }
+    },
+    "node_modules/@babel/helper-plugin-utils": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
+      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-string-parser": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
+      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-validator-identifier": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
+      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-validator-option": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
+      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helpers": {
+      "version": "7.27.6",
+      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.6.tgz",
+      "integrity": "sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/template": "^7.27.2",
+        "@babel/types": "^7.27.6"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/parser": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
+      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/types": "^7.28.0"
+      },
+      "bin": {
+        "parser": "bin/babel-parser.js"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-async-generators": {
+      "version": "7.8.4",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
+      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.8.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-bigint": {
+      "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
+      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.8.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-class-properties": {
+      "version": "7.12.13",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
+      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.12.13"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-class-static-block": {
+      "version": "7.14.5",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-static-block/-/plugin-syntax-class-static-block-7.14.5.tgz",
+      "integrity": "sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.14.5"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-import-attributes": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.27.1.tgz",
+      "integrity": "sha512-oFT0FrKHgF53f4vOsZGi2Hh3I35PfSmVs4IBFLFj4dnafP+hIWDLg3VyKmUHfLoLHlyxY4C7DGtmHuJgn+IGww==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-import-meta": {
+      "version": "7.10.4",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
+      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.10.4"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-json-strings": {
+      "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
+      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.8.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-jsx": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.27.1.tgz",
+      "integrity": "sha512-y8YTNIeKoyhGd9O0Jiyzyyqk8gdjnumGTQPsz0xOZOQ2RmkVJeZ1vmmfIvFEKqucBG6axJGBZDE/7iI5suUI/w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
+      "version": "7.10.4",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
+      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.10.4"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
+      "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
+      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.8.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-numeric-separator": {
+      "version": "7.10.4",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
+      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.10.4"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-object-rest-spread": {
+      "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
+      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.8.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
+      "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
+      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.8.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-optional-chaining": {
+      "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
+      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.8.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-private-property-in-object": {
+      "version": "7.14.5",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-private-property-in-object/-/plugin-syntax-private-property-in-object-7.14.5.tgz",
+      "integrity": "sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.14.5"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-top-level-await": {
+      "version": "7.14.5",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
+      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.14.5"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-typescript": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.27.1.tgz",
+      "integrity": "sha512-xfYCBMxveHrRMnAWl1ZlPXOZjzkN82THFvLhQhFXFt81Z5HnN+EtUkZhv/zcKpmT3fzmWZB0ywiBrbC3vogbwQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/runtime": {
+      "version": "7.27.6",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.27.6.tgz",
+      "integrity": "sha512-vbavdySgbTTrmFE+EsiqUTzlOr5bzlnJtUv9PynGCAKvfQqjIXbvFdumPM/GxMDfyuGMJaJAU6TO4zc1Jf1i8Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/template": {
+      "version": "7.27.2",
+      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
+      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.27.1",
+        "@babel/parser": "^7.27.2",
+        "@babel/types": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/traverse": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
+      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.27.1",
+        "@babel/generator": "^7.28.0",
+        "@babel/helper-globals": "^7.28.0",
+        "@babel/parser": "^7.28.0",
+        "@babel/template": "^7.27.2",
+        "@babel/types": "^7.28.0",
+        "debug": "^4.3.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/types": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.0.tgz",
+      "integrity": "sha512-jYnje+JyZG5YThjHiF28oT4SIZLnYOcSBb6+SDaFIyzDVSkXQmQQYclJ2R+YxcdmK0AX6x1E5OQNtuh3jHDrUg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-string-parser": "^7.27.1",
+        "@babel/helper-validator-identifier": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@bcoe/v8-coverage": {
+      "version": "0.2.3",
+      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
+      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@csstools/color-helpers": {
+      "version": "5.0.2",
+      "resolved": "https://registry.npmjs.org/@csstools/color-helpers/-/color-helpers-5.0.2.tgz",
+      "integrity": "sha512-JqWH1vsgdGcw2RR6VliXXdA0/59LttzlU8UlRT/iUUsEeWfYq8I+K0yhihEUTTHLRm1EXvpsCx3083EU15ecsA==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/csstools"
+        },
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/csstools"
+        }
+      ],
+      "license": "MIT-0",
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@csstools/css-calc": {
+      "version": "2.1.4",
+      "resolved": "https://registry.npmjs.org/@csstools/css-calc/-/css-calc-2.1.4.tgz",
+      "integrity": "sha512-3N8oaj+0juUw/1H3YwmDDJXCgTB1gKU6Hc/bB502u9zR0q2vd786XJH9QfrKIEgFlZmhZiq6epXl4rHqhzsIgQ==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/csstools"
+        },
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/csstools"
+        }
+      ],
+      "license": "MIT",
+      "engines": {
+        "node": ">=18"
+      },
+      "peerDependencies": {
+        "@csstools/css-parser-algorithms": "^3.0.5",
+        "@csstools/css-tokenizer": "^3.0.4"
+      }
+    },
+    "node_modules/@csstools/css-color-parser": {
+      "version": "3.0.10",
+      "resolved": "https://registry.npmjs.org/@csstools/css-color-parser/-/css-color-parser-3.0.10.tgz",
+      "integrity": "sha512-TiJ5Ajr6WRd1r8HSiwJvZBiJOqtH86aHpUjq5aEKWHiII2Qfjqd/HCWKPOW8EP4vcspXbHnXrwIDlu5savQipg==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/csstools"
+        },
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/csstools"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "@csstools/color-helpers": "^5.0.2",
+        "@csstools/css-calc": "^2.1.4"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "peerDependencies": {
+        "@csstools/css-parser-algorithms": "^3.0.5",
+        "@csstools/css-tokenizer": "^3.0.4"
+      }
+    },
+    "node_modules/@csstools/css-parser-algorithms": {
+      "version": "3.0.5",
+      "resolved": "https://registry.npmjs.org/@csstools/css-parser-algorithms/-/css-parser-algorithms-3.0.5.tgz",
+      "integrity": "sha512-DaDeUkXZKjdGhgYaHNJTV9pV7Y9B3b644jCLs9Upc3VeNGg6LWARAT6O+Q+/COo+2gg/bM5rhpMAtf70WqfBdQ==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/csstools"
+        },
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/csstools"
+        }
+      ],
+      "license": "MIT",
+      "engines": {
+        "node": ">=18"
+      },
+      "peerDependencies": {
+        "@csstools/css-tokenizer": "^3.0.4"
+      }
+    },
+    "node_modules/@csstools/css-tokenizer": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/@csstools/css-tokenizer/-/css-tokenizer-3.0.4.tgz",
+      "integrity": "sha512-Vd/9EVDiu6PPJt9yAh6roZP6El1xHrdvIVGjyBsHR0RYwNHgL7FJPyIIW4fANJNG6FtyZfvlRPpFI4ZM/lubvw==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/csstools"
+        },
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/csstools"
+        }
+      ],
+      "license": "MIT",
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@emnapi/runtime": {
+      "version": "1.4.3",
+      "resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.3.tgz",
+      "integrity": "sha512-pBPWdu6MLKROBX05wSNKcNb++m5Er+KQ9QkB+WVM+pW2Kx9hoSrVTnu3BdkI5eBLZoKu/J6mW/B6i6bJB2ytXQ==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@img/sharp-darwin-arm64": {
+      "version": "0.34.2",
+      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.34.2.tgz",
+      "integrity": "sha512-OfXHZPppddivUJnqyKoi5YVeHRkkNE2zUFT2gbpKxp/JZCFYEYubnMg+gOp6lWfasPrTS+KPosKqdI+ELYVDtg==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-darwin-arm64": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-darwin-x64": {
+      "version": "0.34.2",
+      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.34.2.tgz",
+      "integrity": "sha512-dYvWqmjU9VxqXmjEtjmvHnGqF8GrVjM2Epj9rJ6BUIXvk8slvNDJbhGFvIoXzkDhrJC2jUxNLz/GUjjvSzfw+g==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-darwin-x64": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-libvips-darwin-arm64": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.1.0.tgz",
+      "integrity": "sha512-HZ/JUmPwrJSoM4DIQPv/BfNh9yrOA8tlBbqbLz4JZ5uew2+o22Ik+tHQJcih7QJuSa0zo5coHTfD5J8inqj9DA==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-darwin-x64": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.1.0.tgz",
+      "integrity": "sha512-Xzc2ToEmHN+hfvsl9wja0RlnXEgpKNmftriQp6XzY/RaSfwD9th+MSh0WQKzUreLKKINb3afirxW7A0fz2YWuQ==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-arm": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.1.0.tgz",
+      "integrity": "sha512-s8BAd0lwUIvYCJyRdFqvsj+BJIpDBSxs6ivrOPm/R7piTs5UIwY5OjXrP2bqXC9/moGsyRa37eYWYCOGVXxVrA==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-arm64": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.1.0.tgz",
+      "integrity": "sha512-IVfGJa7gjChDET1dK9SekxFFdflarnUB8PwW8aGwEoF3oAsSDuNUTYS+SKDOyOJxQyDC1aPFMuRYLoDInyV9Ew==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-ppc64": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-ppc64/-/sharp-libvips-linux-ppc64-1.1.0.tgz",
+      "integrity": "sha512-tiXxFZFbhnkWE2LA8oQj7KYR+bWBkiV2nilRldT7bqoEZ4HiDOcePr9wVDAZPi/Id5fT1oY9iGnDq20cwUz8lQ==",
+      "cpu": [
+        "ppc64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-s390x": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.1.0.tgz",
+      "integrity": "sha512-xukSwvhguw7COyzvmjydRb3x/09+21HykyapcZchiCUkTThEQEOMtBj9UhkaBRLuBrgLFzQ2wbxdeCCJW/jgJA==",
+      "cpu": [
+        "s390x"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-x64": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.1.0.tgz",
+      "integrity": "sha512-yRj2+reB8iMg9W5sULM3S74jVS7zqSzHG3Ol/twnAAkAhnGQnpjj6e4ayUz7V+FpKypwgs82xbRdYtchTTUB+Q==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linuxmusl-arm64": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.1.0.tgz",
+      "integrity": "sha512-jYZdG+whg0MDK+q2COKbYidaqW/WTz0cc1E+tMAusiDygrM4ypmSCjOJPmFTvHHJ8j/6cAGyeDWZOsK06tP33w==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linuxmusl-x64": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.1.0.tgz",
+      "integrity": "sha512-wK7SBdwrAiycjXdkPnGCPLjYb9lD4l6Ze2gSdAGVZrEL05AOUJESWU2lhlC+Ffn5/G+VKuSm6zzbQSzFX/P65A==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-linux-arm": {
+      "version": "0.34.2",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.34.2.tgz",
+      "integrity": "sha512-0DZzkvuEOqQUP9mo2kjjKNok5AmnOr1jB2XYjkaoNRwpAYMDzRmAqUIa1nRi58S2WswqSfPOWLNOr0FDT3H5RQ==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-arm": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-linux-arm64": {
+      "version": "0.34.2",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.34.2.tgz",
+      "integrity": "sha512-D8n8wgWmPDakc83LORcfJepdOSN6MvWNzzz2ux0MnIbOqdieRZwVYY32zxVx+IFUT8er5KPcyU3XXsn+GzG/0Q==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-arm64": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-linux-s390x": {
+      "version": "0.34.2",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.34.2.tgz",
+      "integrity": "sha512-EGZ1xwhBI7dNISwxjChqBGELCWMGDvmxZXKjQRuqMrakhO8QoMgqCrdjnAqJq/CScxfRn+Bb7suXBElKQpPDiw==",
+      "cpu": [
+        "s390x"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-s390x": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-linux-x64": {
+      "version": "0.34.2",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.34.2.tgz",
+      "integrity": "sha512-sD7J+h5nFLMMmOXYH4DD9UtSNBD05tWSSdWAcEyzqW8Cn5UxXvsHAxmxSesYUsTOBmUnjtxghKDl15EvfqLFbQ==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-x64": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-linuxmusl-arm64": {
+      "version": "0.34.2",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.34.2.tgz",
+      "integrity": "sha512-NEE2vQ6wcxYav1/A22OOxoSOGiKnNmDzCYFOZ949xFmrWZOVII1Bp3NqVVpvj+3UeHMFyN5eP/V5hzViQ5CZNA==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linuxmusl-arm64": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-linuxmusl-x64": {
+      "version": "0.34.2",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.34.2.tgz",
+      "integrity": "sha512-DOYMrDm5E6/8bm/yQLCWyuDJwUnlevR8xtF8bs+gjZ7cyUNYXiSf/E8Kp0Ss5xasIaXSHzb888V1BE4i1hFhAA==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linuxmusl-x64": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-wasm32": {
+      "version": "0.34.2",
+      "resolved": "https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.34.2.tgz",
+      "integrity": "sha512-/VI4mdlJ9zkaq53MbIG6rZY+QRN3MLbR6usYlgITEzi4Rpx5S6LFKsycOQjkOGmqTNmkIdLjEvooFKwww6OpdQ==",
+      "cpu": [
+        "wasm32"
+      ],
+      "license": "Apache-2.0 AND LGPL-3.0-or-later AND MIT",
+      "optional": true,
+      "dependencies": {
+        "@emnapi/runtime": "^1.4.3"
+      },
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-win32-arm64": {
+      "version": "0.34.2",
+      "resolved": "https://registry.npmjs.org/@img/sharp-win32-arm64/-/sharp-win32-arm64-0.34.2.tgz",
+      "integrity": "sha512-cfP/r9FdS63VA5k0xiqaNaEoGxBg9k7uE+RQGzuK9fHt7jib4zAVVseR9LsE4gJcNWgT6APKMNnCcnyOtmSEUQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "Apache-2.0 AND LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-win32-ia32": {
+      "version": "0.34.2",
+      "resolved": "https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.34.2.tgz",
+      "integrity": "sha512-QLjGGvAbj0X/FXl8n1WbtQ6iVBpWU7JO94u/P2M4a8CFYsvQi4GW2mRy/JqkRx0qpBzaOdKJKw8uc930EX2AHw==",
+      "cpu": [
+        "ia32"
+      ],
+      "license": "Apache-2.0 AND LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-win32-x64": {
+      "version": "0.34.2",
+      "resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.34.2.tgz",
+      "integrity": "sha512-aUdT6zEYtDKCaxkofmmJDJYGCf0+pJg3eU9/oBuqvEeoB9dKI6ZLc/1iLJCTuJQDO4ptntAlkUmHgGjyuobZbw==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0 AND LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@isaacs/fs-minipass": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/@isaacs/fs-minipass/-/fs-minipass-4.0.1.tgz",
+      "integrity": "sha512-wgm9Ehl2jpeqP3zw/7mo3kRHFp5MEDhqAdwy1fTGkHAwnkGOVsgpvQhL8B5n1qlb01jV3n/bI0ZfZp5lWA1k4w==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^7.0.4"
+      },
+      "engines": {
+        "node": ">=18.0.0"
+      }
+    },
+    "node_modules/@istanbuljs/load-nyc-config": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
+      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "camelcase": "^5.3.1",
+        "find-up": "^4.1.0",
+        "get-package-type": "^0.1.0",
+        "js-yaml": "^3.13.1",
+        "resolve-from": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@istanbuljs/schema": {
+      "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
+      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@jest/console": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.7.0.tgz",
+      "integrity": "sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "jest-message-util": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "slash": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/console/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/@jest/core": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.7.0.tgz",
+      "integrity": "sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/console": "^29.7.0",
+        "@jest/reporters": "^29.7.0",
+        "@jest/test-result": "^29.7.0",
+        "@jest/transform": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "ansi-escapes": "^4.2.1",
+        "chalk": "^4.0.0",
+        "ci-info": "^3.2.0",
+        "exit": "^0.1.2",
+        "graceful-fs": "^4.2.9",
+        "jest-changed-files": "^29.7.0",
+        "jest-config": "^29.7.0",
+        "jest-haste-map": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-regex-util": "^29.6.3",
+        "jest-resolve": "^29.7.0",
+        "jest-resolve-dependencies": "^29.7.0",
+        "jest-runner": "^29.7.0",
+        "jest-runtime": "^29.7.0",
+        "jest-snapshot": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "jest-validate": "^29.7.0",
+        "jest-watcher": "^29.7.0",
+        "micromatch": "^4.0.4",
+        "pretty-format": "^29.7.0",
+        "slash": "^3.0.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
+      },
+      "peerDependenciesMeta": {
+        "node-notifier": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@jest/core/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/@jest/core/node_modules/pretty-format": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
+      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "ansi-styles": "^5.0.0",
+        "react-is": "^18.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/core/node_modules/pretty-format/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/@jest/core/node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@jest/environment": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.7.0.tgz",
+      "integrity": "sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/fake-timers": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "jest-mock": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract": {
+      "version": "30.0.4",
+      "resolved": "https://registry.npmjs.org/@jest/environment-jsdom-abstract/-/environment-jsdom-abstract-30.0.4.tgz",
+      "integrity": "sha512-pUKfqgr5Nki9kZ/3iV+ubDsvtPq0a0oNL6zqkKLM1tPQI8FBJeuWskvW1kzc5pOvqlgpzumYZveJ4bxhANY0hg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/environment": "30.0.4",
+        "@jest/fake-timers": "30.0.4",
+        "@jest/types": "30.0.1",
+        "@types/jsdom": "^21.1.7",
+        "@types/node": "*",
+        "jest-mock": "30.0.2",
+        "jest-util": "30.0.2"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      },
+      "peerDependencies": {
+        "canvas": "^3.0.0",
+        "jsdom": "*"
+      },
+      "peerDependenciesMeta": {
+        "canvas": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/environment": {
+      "version": "30.0.4",
+      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-30.0.4.tgz",
+      "integrity": "sha512-5NT+sr7ZOb8wW7C4r7wOKnRQ8zmRWQT2gW4j73IXAKp5/PX1Z8MCStBLQDYfIG3n1Sw0NRfYGdp0iIPVooBAFQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/fake-timers": "30.0.4",
+        "@jest/types": "30.0.1",
+        "@types/node": "*",
+        "jest-mock": "30.0.2"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers": {
+      "version": "30.0.4",
+      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-30.0.4.tgz",
+      "integrity": "sha512-qZ7nxOcL5+gwBO6LErvwVy5k06VsX/deqo2XnVUSTV0TNC9lrg8FC3dARbi+5lmrr5VyX5drragK+xLcOjvjYw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "30.0.1",
+        "@sinonjs/fake-timers": "^13.0.0",
+        "@types/node": "*",
+        "jest-message-util": "30.0.2",
+        "jest-mock": "30.0.2",
+        "jest-util": "30.0.2"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/schemas": {
+      "version": "30.0.1",
+      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-30.0.1.tgz",
+      "integrity": "sha512-+g/1TKjFuGrf1Hh0QPCv0gISwBxJ+MQSNXmG9zjHy7BmFhtoJ9fdNhWJp3qUKRi93AOZHXtdxZgJ1vAtz6z65w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@sinclair/typebox": "^0.34.0"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/types": {
+      "version": "30.0.1",
+      "resolved": "https://registry.npmjs.org/@jest/types/-/types-30.0.1.tgz",
+      "integrity": "sha512-HGwoYRVF0QSKJu1ZQX0o5ZrUrrhj0aOOFA8hXrumD7SIzjouevhawbTjmXdwOmURdGluU9DM/XvGm3NyFoiQjw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/pattern": "30.0.1",
+        "@jest/schemas": "30.0.1",
+        "@types/istanbul-lib-coverage": "^2.0.6",
+        "@types/istanbul-reports": "^3.0.4",
+        "@types/node": "*",
+        "@types/yargs": "^17.0.33",
+        "chalk": "^4.1.2"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/@sinclair/typebox": {
+      "version": "0.34.37",
+      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.34.37.tgz",
+      "integrity": "sha512-2TRuQVgQYfy+EzHRTIvkhv2ADEouJ2xNS/Vq+W5EuuewBdOrvATvljZTxHWZSTYr2sTjTHpGvucaGAt67S2akw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/@sinonjs/fake-timers": {
+      "version": "13.0.5",
+      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-13.0.5.tgz",
+      "integrity": "sha512-36/hTbH2uaWuGVERyC6da9YwGWnzUZXuPro/F2LfsdOsLnCojz/iSH8MxUt/FD2S5XBSVPhmArFUXcpCQ2Hkiw==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@sinonjs/commons": "^3.0.1"
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/ci-info": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-4.2.0.tgz",
+      "integrity": "sha512-cYY9mypksY8NRqgDB1XD1RiJL338v/551niynFTGkZOO2LHuB2OmOYxDIe/ttN9AHwrqdum1360G3ald0W9kCg==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/sibiraj-s"
+        }
+      ],
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/jest-message-util": {
+      "version": "30.0.2",
+      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-30.0.2.tgz",
+      "integrity": "sha512-vXywcxmr0SsKXF/bAD7t7nMamRvPuJkras00gqYeB1V0WllxZrbZ0paRr3XqpFU2sYYjD0qAaG2fRyn/CGZ0aw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.27.1",
+        "@jest/types": "30.0.1",
+        "@types/stack-utils": "^2.0.3",
+        "chalk": "^4.1.2",
+        "graceful-fs": "^4.2.11",
+        "micromatch": "^4.0.8",
+        "pretty-format": "30.0.2",
+        "slash": "^3.0.0",
+        "stack-utils": "^2.0.6"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/jest-mock": {
+      "version": "30.0.2",
+      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-30.0.2.tgz",
+      "integrity": "sha512-PnZOHmqup/9cT/y+pXIVbbi8ID6U1XHRmbvR7MvUy4SLqhCbwpkmXhLbsWbGewHrV5x/1bF7YDjs+x24/QSvFA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "30.0.1",
+        "@types/node": "*",
+        "jest-util": "30.0.2"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/jest-util": {
+      "version": "30.0.2",
+      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-30.0.2.tgz",
+      "integrity": "sha512-8IyqfKS4MqprBuUpZNlFB5l+WFehc8bfCe1HSZFHzft2mOuND8Cvi9r1musli+u6F3TqanCZ/Ik4H4pXUolZIg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "30.0.1",
+        "@types/node": "*",
+        "chalk": "^4.1.2",
+        "ci-info": "^4.2.0",
+        "graceful-fs": "^4.2.11",
+        "picomatch": "^4.0.2"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/picomatch": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
+      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/pretty-format": {
+      "version": "30.0.2",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-30.0.2.tgz",
+      "integrity": "sha512-yC5/EBSOrTtqhCKfLHqoUIAXVRZnukHPwWBJWR7h84Q3Be1DRQZLncwcfLoPA5RPQ65qfiCMqgYwdUuQ//eVpg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "30.0.1",
+        "ansi-styles": "^5.2.0",
+        "react-is": "^18.3.1"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/pretty-format/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/@jest/environment-jsdom-abstract/node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@jest/expect": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.7.0.tgz",
+      "integrity": "sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "expect": "^29.7.0",
+        "jest-snapshot": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/expect-utils": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.7.0.tgz",
+      "integrity": "sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "jest-get-type": "^29.6.3"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/fake-timers": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.7.0.tgz",
+      "integrity": "sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "@sinonjs/fake-timers": "^10.0.2",
+        "@types/node": "*",
+        "jest-message-util": "^29.7.0",
+        "jest-mock": "^29.7.0",
+        "jest-util": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/globals": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.7.0.tgz",
+      "integrity": "sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/environment": "^29.7.0",
+        "@jest/expect": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "jest-mock": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/pattern": {
+      "version": "30.0.1",
+      "resolved": "https://registry.npmjs.org/@jest/pattern/-/pattern-30.0.1.tgz",
+      "integrity": "sha512-gWp7NfQW27LaBQz3TITS8L7ZCQ0TLvtmI//4OwlQRx4rnWxcPNIYjxZpDcN4+UlGxgm3jS5QPz8IPTCkb59wZA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*",
+        "jest-regex-util": "30.0.1"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/@jest/pattern/node_modules/jest-regex-util": {
+      "version": "30.0.1",
+      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-30.0.1.tgz",
+      "integrity": "sha512-jHEQgBXAgc+Gh4g0p3bCevgRCVRkB4VB70zhoAE48gxeSr1hfUOsM/C2WoJgVL7Eyg//hudYENbm3Ne+/dRVVA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/@jest/reporters": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.7.0.tgz",
+      "integrity": "sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@bcoe/v8-coverage": "^0.2.3",
+        "@jest/console": "^29.7.0",
+        "@jest/test-result": "^29.7.0",
+        "@jest/transform": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@jridgewell/trace-mapping": "^0.3.18",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "collect-v8-coverage": "^1.0.0",
+        "exit": "^0.1.2",
+        "glob": "^7.1.3",
+        "graceful-fs": "^4.2.9",
+        "istanbul-lib-coverage": "^3.0.0",
+        "istanbul-lib-instrument": "^6.0.0",
+        "istanbul-lib-report": "^3.0.0",
+        "istanbul-lib-source-maps": "^4.0.0",
+        "istanbul-reports": "^3.1.3",
+        "jest-message-util": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "jest-worker": "^29.7.0",
+        "slash": "^3.0.0",
+        "string-length": "^4.0.1",
+        "strip-ansi": "^6.0.0",
+        "v8-to-istanbul": "^9.0.1"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
+      },
+      "peerDependenciesMeta": {
+        "node-notifier": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@jest/reporters/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/@jest/schemas": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.3.tgz",
+      "integrity": "sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@sinclair/typebox": "^0.27.8"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/source-map": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.3.tgz",
+      "integrity": "sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/trace-mapping": "^0.3.18",
+        "callsites": "^3.0.0",
+        "graceful-fs": "^4.2.9"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/test-result": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.7.0.tgz",
+      "integrity": "sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/console": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/istanbul-lib-coverage": "^2.0.0",
+        "collect-v8-coverage": "^1.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/test-sequencer": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.7.0.tgz",
+      "integrity": "sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/test-result": "^29.7.0",
+        "graceful-fs": "^4.2.9",
+        "jest-haste-map": "^29.7.0",
+        "slash": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/transform": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.7.0.tgz",
+      "integrity": "sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/core": "^7.11.6",
+        "@jest/types": "^29.6.3",
+        "@jridgewell/trace-mapping": "^0.3.18",
+        "babel-plugin-istanbul": "^6.1.1",
+        "chalk": "^4.0.0",
+        "convert-source-map": "^2.0.0",
+        "fast-json-stable-stringify": "^2.1.0",
+        "graceful-fs": "^4.2.9",
+        "jest-haste-map": "^29.7.0",
+        "jest-regex-util": "^29.6.3",
+        "jest-util": "^29.7.0",
+        "micromatch": "^4.0.4",
+        "pirates": "^4.0.4",
+        "slash": "^3.0.0",
+        "write-file-atomic": "^4.0.2"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/transform/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/@jest/types": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.3.tgz",
+      "integrity": "sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "@types/istanbul-lib-coverage": "^2.0.0",
+        "@types/istanbul-reports": "^3.0.0",
+        "@types/node": "*",
+        "@types/yargs": "^17.0.8",
+        "chalk": "^4.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/types/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/@jridgewell/gen-mapping": {
+      "version": "0.3.12",
+      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
+      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/sourcemap-codec": "^1.5.0",
+        "@jridgewell/trace-mapping": "^0.3.24"
+      }
+    },
+    "node_modules/@jridgewell/resolve-uri": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
+      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/sourcemap-codec": {
+      "version": "1.5.4",
+      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
+      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@jridgewell/trace-mapping": {
+      "version": "0.3.29",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
+      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/resolve-uri": "^3.1.0",
+        "@jridgewell/sourcemap-codec": "^1.4.14"
+      }
+    },
+    "node_modules/@kurkle/color": {
+      "version": "0.3.4",
+      "resolved": "https://registry.npmjs.org/@kurkle/color/-/color-0.3.4.tgz",
+      "integrity": "sha512-M5UknZPHRu3DEDWoipU6sE8PdkZ6Z/S+v4dD+Ke8IaNlpdSQah50lz1KtcFBa2vsdOnwbbnxJwVM4wty6udA5w==",
+      "license": "MIT"
+    },
+    "node_modules/@next/env": {
+      "version": "15.3.4",
+      "resolved": "https://registry.npmjs.org/@next/env/-/env-15.3.4.tgz",
+      "integrity": "sha512-ZkdYzBseS6UjYzz6ylVKPOK+//zLWvD6Ta+vpoye8cW11AjiQjGYVibF0xuvT4L0iJfAPfZLFidaEzAOywyOAQ==",
+      "license": "MIT"
+    },
+    "node_modules/@next/swc-darwin-arm64": {
+      "version": "15.3.4",
+      "resolved": "https://registry.npmjs.org/@next/swc-darwin-arm64/-/swc-darwin-arm64-15.3.4.tgz",
+      "integrity": "sha512-z0qIYTONmPRbwHWvpyrFXJd5F9YWLCsw3Sjrzj2ZvMYy9NPQMPZ1NjOJh4ojr4oQzcGYwgJKfidzehaNa1BpEg==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-darwin-x64": {
+      "version": "15.3.4",
+      "resolved": "https://registry.npmjs.org/@next/swc-darwin-x64/-/swc-darwin-x64-15.3.4.tgz",
+      "integrity": "sha512-Z0FYJM8lritw5Wq+vpHYuCIzIlEMjewG2aRkc3Hi2rcbULknYL/xqfpBL23jQnCSrDUGAo/AEv0Z+s2bff9Zkw==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-linux-arm64-gnu": {
+      "version": "15.3.4",
+      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-gnu/-/swc-linux-arm64-gnu-15.3.4.tgz",
+      "integrity": "sha512-l8ZQOCCg7adwmsnFm8m5q9eIPAHdaB2F3cxhufYtVo84pymwKuWfpYTKcUiFcutJdp9xGHC+F1Uq3xnFU1B/7g==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-linux-arm64-musl": {
+      "version": "15.3.4",
+      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-musl/-/swc-linux-arm64-musl-15.3.4.tgz",
+      "integrity": "sha512-wFyZ7X470YJQtpKot4xCY3gpdn8lE9nTlldG07/kJYexCUpX1piX+MBfZdvulo+t1yADFVEuzFfVHfklfEx8kw==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-linux-x64-gnu": {
+      "version": "15.3.4",
+      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-gnu/-/swc-linux-x64-gnu-15.3.4.tgz",
+      "integrity": "sha512-gEbH9rv9o7I12qPyvZNVTyP/PWKqOp8clvnoYZQiX800KkqsaJZuOXkWgMa7ANCCh/oEN2ZQheh3yH8/kWPSEg==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-linux-x64-musl": {
+      "version": "15.3.4",
+      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-musl/-/swc-linux-x64-musl-15.3.4.tgz",
+      "integrity": "sha512-Cf8sr0ufuC/nu/yQ76AnarbSAXcwG/wj+1xFPNbyNo8ltA6kw5d5YqO8kQuwVIxk13SBdtgXrNyom3ZosHAy4A==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-win32-arm64-msvc": {
+      "version": "15.3.4",
+      "resolved": "https://registry.npmjs.org/@next/swc-win32-arm64-msvc/-/swc-win32-arm64-msvc-15.3.4.tgz",
+      "integrity": "sha512-ay5+qADDN3rwRbRpEhTOreOn1OyJIXS60tg9WMYTWCy3fB6rGoyjLVxc4dR9PYjEdR2iDYsaF5h03NA+XuYPQQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-win32-x64-msvc": {
+      "version": "15.3.4",
+      "resolved": "https://registry.npmjs.org/@next/swc-win32-x64-msvc/-/swc-win32-x64-msvc-15.3.4.tgz",
+      "integrity": "sha512-4kDt31Bc9DGyYs41FTL1/kNpDeHyha2TC0j5sRRoKCyrhNcfZ/nRQkAUlF27mETwm8QyHqIjHJitfcza2Iykfg==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@playwright/test": {
+      "version": "1.53.2",
+      "resolved": "https://registry.npmjs.org/@playwright/test/-/test-1.53.2.tgz",
+      "integrity": "sha512-tEB2U5z74ebBeyfGNZ3Jfg29AnW+5HlWhvHtb/Mqco9pFdZU1ZLNdVb2UtB5CvmiilNr2ZfVH/qMmAROG/XTzw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "playwright": "1.53.2"
+      },
+      "bin": {
+        "playwright": "cli.js"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@sinclair/typebox": {
+      "version": "0.27.8",
+      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
+      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@sinonjs/commons": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.1.tgz",
+      "integrity": "sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "type-detect": "4.0.8"
+      }
+    },
+    "node_modules/@sinonjs/fake-timers": {
+      "version": "10.3.0",
+      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
+      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@sinonjs/commons": "^3.0.0"
+      }
+    },
+    "node_modules/@swc/counter": {
+      "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/@swc/counter/-/counter-0.1.3.tgz",
+      "integrity": "sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==",
+      "license": "Apache-2.0"
+    },
+    "node_modules/@swc/helpers": {
+      "version": "0.5.15",
+      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.5.15.tgz",
+      "integrity": "sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "tslib": "^2.8.0"
+      }
+    },
+    "node_modules/@tailwindcss/node": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/node/-/node-4.1.11.tgz",
+      "integrity": "sha512-yzhzuGRmv5QyU9qLNg4GTlYI6STedBWRE7NjxP45CsFYYq9taI0zJXZBMqIC/c8fViNLhmrbpSFS57EoxUmD6Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@ampproject/remapping": "^2.3.0",
+        "enhanced-resolve": "^5.18.1",
+        "jiti": "^2.4.2",
+        "lightningcss": "1.30.1",
+        "magic-string": "^0.30.17",
+        "source-map-js": "^1.2.1",
+        "tailwindcss": "4.1.11"
+      }
+    },
+    "node_modules/@tailwindcss/oxide": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide/-/oxide-4.1.11.tgz",
+      "integrity": "sha512-Q69XzrtAhuyfHo+5/HMgr1lAiPP/G40OMFAnws7xcFEYqcypZmdW8eGXaOUIeOl1dzPJBPENXgbjsOyhg2nkrg==",
+      "dev": true,
+      "hasInstallScript": true,
+      "license": "MIT",
+      "dependencies": {
+        "detect-libc": "^2.0.4",
+        "tar": "^7.4.3"
+      },
+      "engines": {
+        "node": ">= 10"
+      },
+      "optionalDependencies": {
+        "@tailwindcss/oxide-android-arm64": "4.1.11",
+        "@tailwindcss/oxide-darwin-arm64": "4.1.11",
+        "@tailwindcss/oxide-darwin-x64": "4.1.11",
+        "@tailwindcss/oxide-freebsd-x64": "4.1.11",
+        "@tailwindcss/oxide-linux-arm-gnueabihf": "4.1.11",
+        "@tailwindcss/oxide-linux-arm64-gnu": "4.1.11",
+        "@tailwindcss/oxide-linux-arm64-musl": "4.1.11",
+        "@tailwindcss/oxide-linux-x64-gnu": "4.1.11",
+        "@tailwindcss/oxide-linux-x64-musl": "4.1.11",
+        "@tailwindcss/oxide-wasm32-wasi": "4.1.11",
+        "@tailwindcss/oxide-win32-arm64-msvc": "4.1.11",
+        "@tailwindcss/oxide-win32-x64-msvc": "4.1.11"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-android-arm64": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-android-arm64/-/oxide-android-arm64-4.1.11.tgz",
+      "integrity": "sha512-3IfFuATVRUMZZprEIx9OGDjG3Ou3jG4xQzNTvjDoKmU9JdmoCohQJ83MYd0GPnQIu89YoJqvMM0G3uqLRFtetg==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-darwin-arm64": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-darwin-arm64/-/oxide-darwin-arm64-4.1.11.tgz",
+      "integrity": "sha512-ESgStEOEsyg8J5YcMb1xl8WFOXfeBmrhAwGsFxxB2CxY9evy63+AtpbDLAyRkJnxLy2WsD1qF13E97uQyP1lfQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-darwin-x64": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-darwin-x64/-/oxide-darwin-x64-4.1.11.tgz",
+      "integrity": "sha512-EgnK8kRchgmgzG6jE10UQNaH9Mwi2n+yw1jWmof9Vyg2lpKNX2ioe7CJdf9M5f8V9uaQxInenZkOxnTVL3fhAw==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-freebsd-x64": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-freebsd-x64/-/oxide-freebsd-x64-4.1.11.tgz",
+      "integrity": "sha512-xdqKtbpHs7pQhIKmqVpxStnY1skuNh4CtbcyOHeX1YBE0hArj2romsFGb6yUmzkq/6M24nkxDqU8GYrKrz+UcA==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-linux-arm-gnueabihf": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm-gnueabihf/-/oxide-linux-arm-gnueabihf-4.1.11.tgz",
+      "integrity": "sha512-ryHQK2eyDYYMwB5wZL46uoxz2zzDZsFBwfjssgB7pzytAeCCa6glsiJGjhTEddq/4OsIjsLNMAiMlHNYnkEEeg==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-linux-arm64-gnu": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm64-gnu/-/oxide-linux-arm64-gnu-4.1.11.tgz",
+      "integrity": "sha512-mYwqheq4BXF83j/w75ewkPJmPZIqqP1nhoghS9D57CLjsh3Nfq0m4ftTotRYtGnZd3eCztgbSPJ9QhfC91gDZQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-linux-arm64-musl": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm64-musl/-/oxide-linux-arm64-musl-4.1.11.tgz",
+      "integrity": "sha512-m/NVRFNGlEHJrNVk3O6I9ggVuNjXHIPoD6bqay/pubtYC9QIdAMpS+cswZQPBLvVvEF6GtSNONbDkZrjWZXYNQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-linux-x64-gnu": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-x64-gnu/-/oxide-linux-x64-gnu-4.1.11.tgz",
+      "integrity": "sha512-YW6sblI7xukSD2TdbbaeQVDysIm/UPJtObHJHKxDEcW2exAtY47j52f8jZXkqE1krdnkhCMGqP3dbniu1Te2Fg==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-linux-x64-musl": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-x64-musl/-/oxide-linux-x64-musl-4.1.11.tgz",
+      "integrity": "sha512-e3C/RRhGunWYNC3aSF7exsQkdXzQ/M+aYuZHKnw4U7KQwTJotnWsGOIVih0s2qQzmEzOFIJ3+xt7iq67K/p56Q==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-wasm32-wasi": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-wasm32-wasi/-/oxide-wasm32-wasi-4.1.11.tgz",
+      "integrity": "sha512-Xo1+/GU0JEN/C/dvcammKHzeM6NqKovG+6921MR6oadee5XPBaKOumrJCXvopJ/Qb5TH7LX/UAywbqrP4lax0g==",
+      "bundleDependencies": [
+        "@napi-rs/wasm-runtime",
+        "@emnapi/core",
+        "@emnapi/runtime",
+        "@tybys/wasm-util",
+        "@emnapi/wasi-threads",
+        "tslib"
+      ],
+      "cpu": [
+        "wasm32"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "@emnapi/core": "^1.4.3",
+        "@emnapi/runtime": "^1.4.3",
+        "@emnapi/wasi-threads": "^1.0.2",
+        "@napi-rs/wasm-runtime": "^0.2.11",
+        "@tybys/wasm-util": "^0.9.0",
+        "tslib": "^2.8.0"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-win32-arm64-msvc": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-arm64-msvc/-/oxide-win32-arm64-msvc-4.1.11.tgz",
+      "integrity": "sha512-UgKYx5PwEKrac3GPNPf6HVMNhUIGuUh4wlDFR2jYYdkX6pL/rn73zTq/4pzUm8fOjAn5L8zDeHp9iXmUGOXZ+w==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-win32-x64-msvc": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-x64-msvc/-/oxide-win32-x64-msvc-4.1.11.tgz",
+      "integrity": "sha512-YfHoggn1j0LK7wR82TOucWc5LDCguHnoS879idHekmmiR7g9HUtMw9MI0NHatS28u/Xlkfi9w5RJWgz2Dl+5Qg==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/postcss": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/postcss/-/postcss-4.1.11.tgz",
+      "integrity": "sha512-q/EAIIpF6WpLhKEuQSEVMZNMIY8KhWoAemZ9eylNAih9jxMGAYPPWBn3I9QL/2jZ+e7OEz/tZkX5HwbBR4HohA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@alloc/quick-lru": "^5.2.0",
+        "@tailwindcss/node": "4.1.11",
+        "@tailwindcss/oxide": "4.1.11",
+        "postcss": "^8.4.41",
+        "tailwindcss": "4.1.11"
+      }
+    },
+    "node_modules/@testing-library/dom": {
+      "version": "9.3.4",
+      "resolved": "https://registry.npmjs.org/@testing-library/dom/-/dom-9.3.4.tgz",
+      "integrity": "sha512-FlS4ZWlp97iiNWig0Muq8p+3rVDjRiYE+YKGbAqXOu9nwJFFOdL00kFpz42M+4huzYi86vAK1sOOfyOG45muIQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.10.4",
+        "@babel/runtime": "^7.12.5",
+        "@types/aria-query": "^5.0.1",
+        "aria-query": "5.1.3",
+        "chalk": "^4.1.0",
+        "dom-accessibility-api": "^0.5.9",
+        "lz-string": "^1.5.0",
+        "pretty-format": "^27.0.2"
+      },
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/@testing-library/dom/node_modules/aria-query": {
+      "version": "5.1.3",
+      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.1.3.tgz",
+      "integrity": "sha512-R5iJ5lkuHybztUfuOAznmboyjWq8O6sqNqtK7CLOqdydi54VNbORp49mb14KbWgG1QD3JFO9hJdZ+y4KutfdOQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "deep-equal": "^2.0.5"
+      }
+    },
+    "node_modules/@testing-library/dom/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/@testing-library/dom/node_modules/dom-accessibility-api": {
+      "version": "0.5.16",
+      "resolved": "https://registry.npmjs.org/dom-accessibility-api/-/dom-accessibility-api-0.5.16.tgz",
+      "integrity": "sha512-X7BJ2yElsnOJ30pZF4uIIDfBEVgF4XEBxL9Bxhy6dnrm5hkzqmsWHGTiHqRiITNhMyFLyAiWndIJP7Z1NTteDg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@testing-library/jest-dom": {
+      "version": "6.6.3",
+      "resolved": "https://registry.npmjs.org/@testing-library/jest-dom/-/jest-dom-6.6.3.tgz",
+      "integrity": "sha512-IteBhl4XqYNkM54f4ejhLRJiZNqcSCoXUOG2CPK7qbD322KjQozM4kHQOfkG2oln9b9HTYqs+Sae8vBATubxxA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@adobe/css-tools": "^4.4.0",
+        "aria-query": "^5.0.0",
+        "chalk": "^3.0.0",
+        "css.escape": "^1.5.1",
+        "dom-accessibility-api": "^0.6.3",
+        "lodash": "^4.17.21",
+        "redent": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=14",
+        "npm": ">=6",
+        "yarn": ">=1"
+      }
+    },
+    "node_modules/@testing-library/react": {
+      "version": "14.3.1",
+      "resolved": "https://registry.npmjs.org/@testing-library/react/-/react-14.3.1.tgz",
+      "integrity": "sha512-H99XjUhWQw0lTgyMN05W3xQG1Nh4lq574D8keFf1dDoNTJgp66VbJozRaczoF+wsiaPJNt/TcnfpLGufGxSrZQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/runtime": "^7.12.5",
+        "@testing-library/dom": "^9.0.0",
+        "@types/react-dom": "^18.0.0"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "peerDependencies": {
+        "react": "^18.0.0",
+        "react-dom": "^18.0.0"
+      }
+    },
+    "node_modules/@testing-library/react/node_modules/@types/react-dom": {
+      "version": "18.3.7",
+      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.7.tgz",
+      "integrity": "sha512-MEe3UeoENYVFXzoXEWsvcpg6ZvlrFNlOQ7EOsvhI3CfAXwzPfO8Qwuxd40nepsYKqyyVQnTdEfv68q91yLcKrQ==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "^18.0.0"
+      }
+    },
+    "node_modules/@types/aria-query": {
+      "version": "5.0.4",
+      "resolved": "https://registry.npmjs.org/@types/aria-query/-/aria-query-5.0.4.tgz",
+      "integrity": "sha512-rfT93uj5s0PRL7EzccGMs3brplhcrghnDoV26NqKhCAS1hVo+WdNsPvE/yb6ilfr5hi2MEk6d5EWJTKdxg8jVw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/babel__core": {
+      "version": "7.20.5",
+      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
+      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/parser": "^7.20.7",
+        "@babel/types": "^7.20.7",
+        "@types/babel__generator": "*",
+        "@types/babel__template": "*",
+        "@types/babel__traverse": "*"
+      }
+    },
+    "node_modules/@types/babel__generator": {
+      "version": "7.27.0",
+      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
+      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/types": "^7.0.0"
+      }
+    },
+    "node_modules/@types/babel__template": {
+      "version": "7.4.4",
+      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
+      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/parser": "^7.1.0",
+        "@babel/types": "^7.0.0"
+      }
+    },
+    "node_modules/@types/babel__traverse": {
+      "version": "7.20.7",
+      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
+      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/types": "^7.20.7"
+      }
+    },
+    "node_modules/@types/graceful-fs": {
+      "version": "4.1.9",
+      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.9.tgz",
+      "integrity": "sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/@types/istanbul-lib-coverage": {
+      "version": "2.0.6",
+      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
+      "integrity": "sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/istanbul-lib-report": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.3.tgz",
+      "integrity": "sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/istanbul-lib-coverage": "*"
+      }
+    },
+    "node_modules/@types/istanbul-reports": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.4.tgz",
+      "integrity": "sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/istanbul-lib-report": "*"
+      }
+    },
+    "node_modules/@types/jsdom": {
+      "version": "21.1.7",
+      "resolved": "https://registry.npmjs.org/@types/jsdom/-/jsdom-21.1.7.tgz",
+      "integrity": "sha512-yOriVnggzrnQ3a9OKOCxaVuSug3w3/SbOj5i7VwXWZEyUNl3bLF9V3MfxGbZKuwqJOQyRfqXyROBB1CoZLFWzA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*",
+        "@types/tough-cookie": "*",
+        "parse5": "^7.0.0"
+      }
+    },
+    "node_modules/@types/node": {
+      "version": "20.19.4",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.4.tgz",
+      "integrity": "sha512-OP+We5WV8Xnbuvw0zC2m4qfB/BJvjyCwtNjhHdJxV1639SGSKrLmJkc3fMnp2Qy8nJyHp8RO6umxELN/dS1/EA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "undici-types": "~6.21.0"
+      }
+    },
+    "node_modules/@types/react": {
+      "version": "19.1.8",
+      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.8.tgz",
+      "integrity": "sha512-AwAfQ2Wa5bCx9WP8nZL2uMZWod7J7/JSplxbTmBQ5ms6QpqNYm672H0Vu9ZVKVngQ+ii4R/byguVEUZQyeg44g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "csstype": "^3.0.2"
+      }
+    },
+    "node_modules/@types/react-dom": {
+      "version": "19.1.6",
+      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.6.tgz",
+      "integrity": "sha512-4hOiT/dwO8Ko0gV1m/TJZYk3y0KBnY9vzDh7W+DH17b2HFSOGgdj33dhihPeuy3l0q23+4e+hoXHV6hCC4dCXw==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "^19.0.0"
+      }
+    },
+    "node_modules/@types/stack-utils": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz",
+      "integrity": "sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/tough-cookie": {
+      "version": "4.0.5",
+      "resolved": "https://registry.npmjs.org/@types/tough-cookie/-/tough-cookie-4.0.5.tgz",
+      "integrity": "sha512-/Ad8+nIOV7Rl++6f1BdKxFSMgmoqEoYbHRpPcx3JEfv8VRsQe9Z4mCXeJBzxs7mbHY/XOZZuXlRNfhpVPbs6ZA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/yargs": {
+      "version": "17.0.33",
+      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.33.tgz",
+      "integrity": "sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/yargs-parser": "*"
+      }
+    },
+    "node_modules/@types/yargs-parser": {
+      "version": "21.0.3",
+      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz",
+      "integrity": "sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/agent-base": {
+      "version": "7.1.3",
+      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.3.tgz",
+      "integrity": "sha512-jRR5wdylq8CkOe6hei19GGZnxM6rBGwFl3Bg0YItGDimvjGtAvdZk4Pu6Cl4u4Igsws4a1fd1Vq3ezrhn4KmFw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/ansi-escapes": {
+      "version": "4.3.2",
+      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
+      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "type-fest": "^0.21.3"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/anymatch": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
+      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "normalize-path": "^3.0.0",
+        "picomatch": "^2.0.4"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/argparse": {
+      "version": "1.0.10",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
+      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "sprintf-js": "~1.0.2"
+      }
+    },
+    "node_modules/aria-query": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.2.tgz",
+      "integrity": "sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/array-buffer-byte-length": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
+      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "is-array-buffer": "^3.0.5"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/async": {
+      "version": "3.2.6",
+      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
+      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/available-typed-arrays": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
+      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "possible-typed-array-names": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/babel-jest": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.7.0.tgz",
+      "integrity": "sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/transform": "^29.7.0",
+        "@types/babel__core": "^7.1.14",
+        "babel-plugin-istanbul": "^6.1.1",
+        "babel-preset-jest": "^29.6.3",
+        "chalk": "^4.0.0",
+        "graceful-fs": "^4.2.9",
+        "slash": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.8.0"
+      }
+    },
+    "node_modules/babel-jest/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/babel-plugin-istanbul": {
+      "version": "6.1.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
+      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.0.0",
+        "@istanbuljs/load-nyc-config": "^1.0.0",
+        "@istanbuljs/schema": "^0.1.2",
+        "istanbul-lib-instrument": "^5.0.4",
+        "test-exclude": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/babel-plugin-istanbul/node_modules/istanbul-lib-instrument": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
+      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@babel/core": "^7.12.3",
+        "@babel/parser": "^7.14.7",
+        "@istanbuljs/schema": "^0.1.2",
+        "istanbul-lib-coverage": "^3.2.0",
+        "semver": "^6.3.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/babel-plugin-istanbul/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/babel-plugin-jest-hoist": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.6.3.tgz",
+      "integrity": "sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/template": "^7.3.3",
+        "@babel/types": "^7.3.3",
+        "@types/babel__core": "^7.1.14",
+        "@types/babel__traverse": "^7.0.6"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/babel-preset-current-node-syntax": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.1.0.tgz",
+      "integrity": "sha512-ldYss8SbBlWva1bs28q78Ju5Zq1F+8BrqBZZ0VFhLBvhh6lCpC2o3gDJi/5DRLs9FgYZCnmPYIVFU4lRXCkyUw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/plugin-syntax-async-generators": "^7.8.4",
+        "@babel/plugin-syntax-bigint": "^7.8.3",
+        "@babel/plugin-syntax-class-properties": "^7.12.13",
+        "@babel/plugin-syntax-class-static-block": "^7.14.5",
+        "@babel/plugin-syntax-import-attributes": "^7.24.7",
+        "@babel/plugin-syntax-import-meta": "^7.10.4",
+        "@babel/plugin-syntax-json-strings": "^7.8.3",
+        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4",
+        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
+        "@babel/plugin-syntax-numeric-separator": "^7.10.4",
+        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
+        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
+        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
+        "@babel/plugin-syntax-private-property-in-object": "^7.14.5",
+        "@babel/plugin-syntax-top-level-await": "^7.14.5"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0"
+      }
+    },
+    "node_modules/babel-preset-jest": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.6.3.tgz",
+      "integrity": "sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "babel-plugin-jest-hoist": "^29.6.3",
+        "babel-preset-current-node-syntax": "^1.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0"
+      }
+    },
+    "node_modules/balanced-match": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
+      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/braces": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
+      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fill-range": "^7.1.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/browserslist": {
+      "version": "4.25.1",
+      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
+      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/browserslist"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "caniuse-lite": "^1.0.30001726",
+        "electron-to-chromium": "^1.5.173",
+        "node-releases": "^2.0.19",
+        "update-browserslist-db": "^1.1.3"
+      },
+      "bin": {
+        "browserslist": "cli.js"
+      },
+      "engines": {
+        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
+      }
+    },
+    "node_modules/bs-logger": {
+      "version": "0.2.6",
+      "resolved": "https://registry.npmjs.org/bs-logger/-/bs-logger-0.2.6.tgz",
+      "integrity": "sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fast-json-stable-stringify": "2.x"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/bser": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
+      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "node-int64": "^0.4.0"
+      }
+    },
+    "node_modules/buffer-from": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
+      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/busboy": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
+      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
+      "dependencies": {
+        "streamsearch": "^1.1.0"
+      },
+      "engines": {
+        "node": ">=10.16.0"
+      }
+    },
+    "node_modules/call-bind": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
+      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.0",
+        "es-define-property": "^1.0.0",
+        "get-intrinsic": "^1.2.4",
+        "set-function-length": "^1.2.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/call-bind-apply-helpers": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
+      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/call-bound": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
+      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "get-intrinsic": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/callsites": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
+      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/camelcase": {
+      "version": "5.3.1",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
+      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/caniuse-lite": {
+      "version": "1.0.30001726",
+      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001726.tgz",
+      "integrity": "sha512-VQAUIUzBiZ/UnlM28fSp2CRF3ivUn1BWEvxMcVTNwpw91Py1pGbPIyIKtd+tzct9C3ouceCVdGAXxZOpZAsgdw==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "CC-BY-4.0"
+    },
+    "node_modules/chalk": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-3.0.0.tgz",
+      "integrity": "sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/char-regex": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
+      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/chart.js": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/chart.js/-/chart.js-4.5.0.tgz",
+      "integrity": "sha512-aYeC/jDgSEx8SHWZvANYMioYMZ2KX02W6f6uVfyteuCGcadDLcYVHdfdygsTQkQ4TKn5lghoojAsPj5pu0SnvQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@kurkle/color": "^0.3.0"
+      },
+      "engines": {
+        "pnpm": ">=8"
+      }
+    },
+    "node_modules/chownr": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/chownr/-/chownr-3.0.0.tgz",
+      "integrity": "sha512-+IxzY9BZOQd/XuYPRmrvEVjF/nqj5kgT4kEq7VofrDoM1MxoRjEWkrCC3EtLi59TVawxTAn+orJwFQcrqEN1+g==",
+      "dev": true,
+      "license": "BlueOak-1.0.0",
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/ci-info": {
+      "version": "3.9.0",
+      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.9.0.tgz",
+      "integrity": "sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/sibiraj-s"
+        }
+      ],
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/cjs-module-lexer": {
+      "version": "1.4.3",
+      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.4.3.tgz",
+      "integrity": "sha512-9z8TZaGM1pfswYeXrUpzPrkx8UnWYdhJclsiYMm6x/w5+nN+8Tf/LnAgfLGQCm59qAOxU8WwHEq2vNwF6i4j+Q==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/client-only": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/client-only/-/client-only-0.0.1.tgz",
+      "integrity": "sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==",
+      "license": "MIT"
+    },
+    "node_modules/cliui": {
+      "version": "8.0.1",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
+      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "string-width": "^4.2.0",
+        "strip-ansi": "^6.0.1",
+        "wrap-ansi": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/clsx": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
+      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/co": {
+      "version": "4.6.0",
+      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
+      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "iojs": ">= 1.0.0",
+        "node": ">= 0.12.0"
+      }
+    },
+    "node_modules/collect-v8-coverage": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
+      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/color": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/color/-/color-4.2.3.tgz",
+      "integrity": "sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "color-convert": "^2.0.1",
+        "color-string": "^1.9.0"
+      },
+      "engines": {
+        "node": ">=12.5.0"
+      }
+    },
+    "node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "devOptional": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "devOptional": true,
+      "license": "MIT"
+    },
+    "node_modules/color-string": {
+      "version": "1.9.1",
+      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
+      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "color-name": "^1.0.0",
+        "simple-swizzle": "^0.2.2"
+      }
+    },
+    "node_modules/concat-map": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/convert-source-map": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
+      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/create-jest": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/create-jest/-/create-jest-29.7.0.tgz",
+      "integrity": "sha512-Adz2bdH0Vq3F53KEMJOoftQFutWCukm6J24wbPWRO4k1kMY7gS7ds/uoJkNuV8wDCtWWnuwGcJwpWcih+zEW1Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "chalk": "^4.0.0",
+        "exit": "^0.1.2",
+        "graceful-fs": "^4.2.9",
+        "jest-config": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "prompts": "^2.0.1"
+      },
+      "bin": {
+        "create-jest": "bin/create-jest.js"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/create-jest/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/cross-spawn": {
+      "version": "7.0.6",
+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
+      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "path-key": "^3.1.0",
+        "shebang-command": "^2.0.0",
+        "which": "^2.0.1"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/css.escape": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/css.escape/-/css.escape-1.5.1.tgz",
+      "integrity": "sha512-YUifsXXuknHlUsmlgyY0PKzgPOr7/FjCePfHNt0jxm83wHZi44VDMQ7/fGNkjY3/jV1MC+1CmZbaHzugyeRtpg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/cssstyle": {
+      "version": "4.6.0",
+      "resolved": "https://registry.npmjs.org/cssstyle/-/cssstyle-4.6.0.tgz",
+      "integrity": "sha512-2z+rWdzbbSZv6/rhtvzvqeZQHrBaqgogqt85sqFNbabZOuFbCVFb8kPeEtZjiKkbrm395irpNKiYeFeLiQnFPg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@asamuzakjp/css-color": "^3.2.0",
+        "rrweb-cssom": "^0.8.0"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/csstype": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
+      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/data-urls": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/data-urls/-/data-urls-5.0.0.tgz",
+      "integrity": "sha512-ZYP5VBHshaDAiVZxjbRVcFJpc+4xGgT0bK3vzy1HLN8jTO975HEbuYzZJcHoQEY5K1a0z8YayJkyVETa08eNTg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "whatwg-mimetype": "^4.0.0",
+        "whatwg-url": "^14.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/debug": {
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
+      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.3"
+      },
+      "engines": {
+        "node": ">=6.0"
+      },
+      "peerDependenciesMeta": {
+        "supports-color": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/decimal.js": {
+      "version": "10.5.0",
+      "resolved": "https://registry.npmjs.org/decimal.js/-/decimal.js-10.5.0.tgz",
+      "integrity": "sha512-8vDa8Qxvr/+d94hSh5P3IJwI5t8/c0KsMp+g8bNw9cY2icONa5aPfvKeieW1WlG0WQYwwhJ7mjui2xtiePQSXw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/dedent": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.6.0.tgz",
+      "integrity": "sha512-F1Z+5UCFpmQUzJa11agbyPVMbpgT/qA3/SKyJ1jyBgm7dUcUEa8v9JwDkerSQXfakBwFljIxhOJqGkjUwZ9FSA==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "babel-plugin-macros": "^3.1.0"
+      },
+      "peerDependenciesMeta": {
+        "babel-plugin-macros": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/deep-equal": {
+      "version": "2.2.3",
+      "resolved": "https://registry.npmjs.org/deep-equal/-/deep-equal-2.2.3.tgz",
+      "integrity": "sha512-ZIwpnevOurS8bpT4192sqAowWM76JDKSHYzMLty3BZGSswgq6pBaH3DhCSW5xVAZICZyKdOBPjwww5wfgT/6PA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "array-buffer-byte-length": "^1.0.0",
+        "call-bind": "^1.0.5",
+        "es-get-iterator": "^1.1.3",
+        "get-intrinsic": "^1.2.2",
+        "is-arguments": "^1.1.1",
+        "is-array-buffer": "^3.0.2",
+        "is-date-object": "^1.0.5",
+        "is-regex": "^1.1.4",
+        "is-shared-array-buffer": "^1.0.2",
+        "isarray": "^2.0.5",
+        "object-is": "^1.1.5",
+        "object-keys": "^1.1.1",
+        "object.assign": "^4.1.4",
+        "regexp.prototype.flags": "^1.5.1",
+        "side-channel": "^1.0.4",
+        "which-boxed-primitive": "^1.0.2",
+        "which-collection": "^1.0.1",
+        "which-typed-array": "^1.1.13"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/deepmerge": {
+      "version": "4.3.1",
+      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
+      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/define-data-property": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
+      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-define-property": "^1.0.0",
+        "es-errors": "^1.3.0",
+        "gopd": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/define-properties": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
+      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-data-property": "^1.0.1",
+        "has-property-descriptors": "^1.0.0",
+        "object-keys": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/dequal": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/dequal/-/dequal-2.0.3.tgz",
+      "integrity": "sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/detect-libc": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
+      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
+      "devOptional": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/detect-newline": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
+      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/diff-sequences": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.6.3.tgz",
+      "integrity": "sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/dom-accessibility-api": {
+      "version": "0.6.3",
+      "resolved": "https://registry.npmjs.org/dom-accessibility-api/-/dom-accessibility-api-0.6.3.tgz",
+      "integrity": "sha512-7ZgogeTnjuHbo+ct10G9Ffp0mif17idi0IyWNVA/wcwcm7NPOD/WEHVP3n7n3MhXqxoIYm8d6MuZohYWIZ4T3w==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/dunder-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
+      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "gopd": "^1.2.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/ejs": {
+      "version": "3.1.10",
+      "resolved": "https://registry.npmjs.org/ejs/-/ejs-3.1.10.tgz",
+      "integrity": "sha512-UeJmFfOrAQS8OJWPZ4qtgHyWExa088/MtK5UEyoJGFH67cDEXkZSviOiKRCZ4Xij0zxI3JECgYs3oKx+AizQBA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "jake": "^10.8.5"
+      },
+      "bin": {
+        "ejs": "bin/cli.js"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/electron-to-chromium": {
+      "version": "1.5.179",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.179.tgz",
+      "integrity": "sha512-UWKi/EbBopgfFsc5k61wFpV7WrnnSlSzW/e2XcBmS6qKYTivZlLtoll5/rdqRTxGglGHkmkW0j0pFNJG10EUIQ==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/emittery": {
+      "version": "0.13.1",
+      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
+      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
+      }
+    },
+    "node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/enhanced-resolve": {
+      "version": "5.18.2",
+      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.2.tgz",
+      "integrity": "sha512-6Jw4sE1maoRJo3q8MsSIn2onJFbLTOjY9hlx4DZXmOKvLRd1Ok2kXmAGXaafL2+ijsJZ1ClYbl/pmqr9+k4iUQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "graceful-fs": "^4.2.4",
+        "tapable": "^2.2.0"
+      },
+      "engines": {
+        "node": ">=10.13.0"
+      }
+    },
+    "node_modules/entities": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/entities/-/entities-6.0.1.tgz",
+      "integrity": "sha512-aN97NXWF6AWBTahfVOIrB/NShkzi5H7F9r1s9mD3cDj4Ko5f2qhhVoYMibXF7GlLveb/D2ioWay8lxI97Ven3g==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=0.12"
+      },
+      "funding": {
+        "url": "https://github.com/fb55/entities?sponsor=1"
+      }
+    },
+    "node_modules/error-ex": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
+      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-arrayish": "^0.2.1"
+      }
+    },
+    "node_modules/error-ex/node_modules/is-arrayish": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
+      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/es-define-property": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
+      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-errors": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
+      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-get-iterator": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/es-get-iterator/-/es-get-iterator-1.1.3.tgz",
+      "integrity": "sha512-sPZmqHBe6JIiTfN5q2pEi//TwxmAFHwj/XEuYjTuse78i8KxaqMTTzxPoFKuzRpDpTJ+0NAbpfenkmH2rePtuw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.2",
+        "get-intrinsic": "^1.1.3",
+        "has-symbols": "^1.0.3",
+        "is-arguments": "^1.1.1",
+        "is-map": "^2.0.2",
+        "is-set": "^2.0.2",
+        "is-string": "^1.0.7",
+        "isarray": "^2.0.5",
+        "stop-iteration-iterator": "^1.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/es-object-atoms": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
+      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/escalade": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
+      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/escape-string-regexp": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
+      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/esprima": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
+      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "bin": {
+        "esparse": "bin/esparse.js",
+        "esvalidate": "bin/esvalidate.js"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/execa": {
+      "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
+      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "cross-spawn": "^7.0.3",
+        "get-stream": "^6.0.0",
+        "human-signals": "^2.1.0",
+        "is-stream": "^2.0.0",
+        "merge-stream": "^2.0.0",
+        "npm-run-path": "^4.0.1",
+        "onetime": "^5.1.2",
+        "signal-exit": "^3.0.3",
+        "strip-final-newline": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sindresorhus/execa?sponsor=1"
+      }
+    },
+    "node_modules/exit": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
+      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
+      "dev": true,
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/expect": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/expect/-/expect-29.7.0.tgz",
+      "integrity": "sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/expect-utils": "^29.7.0",
+        "jest-get-type": "^29.6.3",
+        "jest-matcher-utils": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-util": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/fast-json-stable-stringify": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
+      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/fb-watchman": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
+      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "bser": "2.1.1"
+      }
+    },
+    "node_modules/filelist": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/filelist/-/filelist-1.0.4.tgz",
+      "integrity": "sha512-w1cEuf3S+DrLCQL7ET6kz+gmlJdbq9J7yXCSjK/OZCPA+qEN1WyF4ZAf0YYJa4/shHJra2t/d/r8SV4Ji+x+8Q==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "minimatch": "^5.0.1"
+      }
+    },
+    "node_modules/filelist/node_modules/brace-expansion": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
+      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0"
+      }
+    },
+    "node_modules/filelist/node_modules/minimatch": {
+      "version": "5.1.6",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
+      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/fill-range": {
+      "version": "7.1.1",
+      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
+      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "to-regex-range": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/find-up": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
+      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "locate-path": "^5.0.0",
+        "path-exists": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/for-each": {
+      "version": "0.3.5",
+      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
+      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-callable": "^1.2.7"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/fs.realpath": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
+      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/fsevents": {
+      "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
+      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
+      "dev": true,
+      "hasInstallScript": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
+      }
+    },
+    "node_modules/function-bind": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
+      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
+      "dev": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/functions-have-names": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
+      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
+      "dev": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/gensync": {
+      "version": "1.0.0-beta.2",
+      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
+      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/get-caller-file": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
+      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
+      "dev": true,
+      "license": "ISC",
+      "engines": {
+        "node": "6.* || 8.* || >= 10.*"
+      }
+    },
+    "node_modules/get-intrinsic": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
+      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "es-define-property": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.1.1",
+        "function-bind": "^1.1.2",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "hasown": "^2.0.2",
+        "math-intrinsics": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-package-type": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
+      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
+    "node_modules/get-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
+      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "dunder-proto": "^1.0.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/get-stream": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
+      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/gopd": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
+      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/graceful-fs": {
+      "version": "4.2.11",
+      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
+      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/has-bigints": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
+      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-flag": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/has-property-descriptors": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
+      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-define-property": "^1.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-symbols": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
+      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-tostringtag": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
+      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-symbols": "^1.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/hasown": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
+      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/html-encoding-sniffer": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/html-encoding-sniffer/-/html-encoding-sniffer-4.0.0.tgz",
+      "integrity": "sha512-Y22oTqIU4uuPgEemfz7NDJz6OeKf12Lsu+QC+s3BVpda64lTiMYCyGwg5ki4vFxkMwQdeZDl2adZoqUgdFuTgQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "whatwg-encoding": "^3.1.1"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/html-escaper": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
+      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/http-proxy-agent": {
+      "version": "7.0.2",
+      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz",
+      "integrity": "sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "^7.1.0",
+        "debug": "^4.3.4"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/https-proxy-agent": {
+      "version": "7.0.6",
+      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
+      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "^7.1.2",
+        "debug": "4"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/human-signals": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
+      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=10.17.0"
+      }
+    },
+    "node_modules/iconv-lite": {
+      "version": "0.6.3",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
+      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "safer-buffer": ">= 2.1.2 < 3.0.0"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/import-local": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
+      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "pkg-dir": "^4.2.0",
+        "resolve-cwd": "^3.0.0"
+      },
+      "bin": {
+        "import-local-fixture": "fixtures/cli.js"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/imurmurhash": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
+      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.19"
+      }
+    },
+    "node_modules/indent-string": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
+      "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/inflight": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
+      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
+      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "once": "^1.3.0",
+        "wrappy": "1"
+      }
+    },
+    "node_modules/inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/internal-slot": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
+      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "hasown": "^2.0.2",
+        "side-channel": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/is-arguments": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/is-arguments/-/is-arguments-1.2.0.tgz",
+      "integrity": "sha512-7bVbi0huj/wrIAOzb8U1aszg9kdi3KN/CyU19CTI7tAoZYEZoL9yCDXpbXN+uPsuWnP02cyug1gleqq+TU+YCA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-array-buffer": {
+      "version": "3.0.5",
+      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
+      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "get-intrinsic": "^1.2.6"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-arrayish": {
+      "version": "0.3.2",
+      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
+      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
+      "license": "MIT",
+      "optional": true
+    },
+    "node_modules/is-bigint": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
+      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-bigints": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-boolean-object": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
+      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-callable": {
+      "version": "1.2.7",
+      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
+      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-core-module": {
+      "version": "2.16.1",
+      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
+      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-date-object": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
+      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-fullwidth-code-point": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
+      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/is-generator-fn": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
+      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/is-map": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
+      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-number": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
+      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.12.0"
+      }
+    },
+    "node_modules/is-number-object": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
+      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-potential-custom-element-name": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/is-potential-custom-element-name/-/is-potential-custom-element-name-1.0.1.tgz",
+      "integrity": "sha512-bCYeRA2rVibKZd+s2625gGnGF/t7DSqDs4dP7CrLA1m7jKWz6pps0LpYLJN8Q64HtmPKJ1hrN3nzPNKFEKOUiQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/is-regex": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
+      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "gopd": "^1.2.0",
+        "has-tostringtag": "^1.0.2",
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-set": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
+      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-shared-array-buffer": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
+      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-stream": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
+      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/is-string": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
+      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-symbol": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
+      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "has-symbols": "^1.1.0",
+        "safe-regex-test": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-weakmap": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
+      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-weakset": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
+      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "get-intrinsic": "^1.2.6"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/isarray": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
+      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/isexe": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/istanbul-lib-coverage": {
+      "version": "3.2.2",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
+      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/istanbul-lib-instrument": {
+      "version": "6.0.3",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-6.0.3.tgz",
+      "integrity": "sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@babel/core": "^7.23.9",
+        "@babel/parser": "^7.23.9",
+        "@istanbuljs/schema": "^0.1.3",
+        "istanbul-lib-coverage": "^3.2.0",
+        "semver": "^7.5.4"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/istanbul-lib-report": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
+      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "istanbul-lib-coverage": "^3.0.0",
+        "make-dir": "^4.0.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/istanbul-lib-source-maps": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
+      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "debug": "^4.1.1",
+        "istanbul-lib-coverage": "^3.0.0",
+        "source-map": "^0.6.1"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/istanbul-reports": {
+      "version": "3.1.7",
+      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.7.tgz",
+      "integrity": "sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "html-escaper": "^2.0.0",
+        "istanbul-lib-report": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/jake": {
+      "version": "10.9.2",
+      "resolved": "https://registry.npmjs.org/jake/-/jake-10.9.2.tgz",
+      "integrity": "sha512-2P4SQ0HrLQ+fw6llpLnOaGAvN2Zu6778SJMrCUwns4fOoG9ayrTiZk3VV8sCPkVZF8ab0zksVpS8FDY5pRCNBA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "async": "^3.2.3",
+        "chalk": "^4.0.2",
+        "filelist": "^1.0.4",
+        "minimatch": "^3.1.2"
+      },
+      "bin": {
+        "jake": "bin/cli.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/jake/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest/-/jest-29.7.0.tgz",
+      "integrity": "sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/core": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "import-local": "^3.0.2",
+        "jest-cli": "^29.7.0"
+      },
+      "bin": {
+        "jest": "bin/jest.js"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
+      },
+      "peerDependenciesMeta": {
+        "node-notifier": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/jest-changed-files": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.7.0.tgz",
+      "integrity": "sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "execa": "^5.0.0",
+        "jest-util": "^29.7.0",
+        "p-limit": "^3.1.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-circus": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.7.0.tgz",
+      "integrity": "sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/environment": "^29.7.0",
+        "@jest/expect": "^29.7.0",
+        "@jest/test-result": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "co": "^4.6.0",
+        "dedent": "^1.0.0",
+        "is-generator-fn": "^2.0.0",
+        "jest-each": "^29.7.0",
+        "jest-matcher-utils": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-runtime": "^29.7.0",
+        "jest-snapshot": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "p-limit": "^3.1.0",
+        "pretty-format": "^29.7.0",
+        "pure-rand": "^6.0.0",
+        "slash": "^3.0.0",
+        "stack-utils": "^2.0.3"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-circus/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-circus/node_modules/pretty-format": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
+      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "ansi-styles": "^5.0.0",
+        "react-is": "^18.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-circus/node_modules/pretty-format/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-circus/node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/jest-cli": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.7.0.tgz",
+      "integrity": "sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/core": "^29.7.0",
+        "@jest/test-result": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "chalk": "^4.0.0",
+        "create-jest": "^29.7.0",
+        "exit": "^0.1.2",
+        "import-local": "^3.0.2",
+        "jest-config": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "jest-validate": "^29.7.0",
+        "yargs": "^17.3.1"
+      },
+      "bin": {
+        "jest": "bin/jest.js"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
+      },
+      "peerDependenciesMeta": {
+        "node-notifier": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/jest-cli/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-config": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.7.0.tgz",
+      "integrity": "sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/core": "^7.11.6",
+        "@jest/test-sequencer": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "babel-jest": "^29.7.0",
+        "chalk": "^4.0.0",
+        "ci-info": "^3.2.0",
+        "deepmerge": "^4.2.2",
+        "glob": "^7.1.3",
+        "graceful-fs": "^4.2.9",
+        "jest-circus": "^29.7.0",
+        "jest-environment-node": "^29.7.0",
+        "jest-get-type": "^29.6.3",
+        "jest-regex-util": "^29.6.3",
+        "jest-resolve": "^29.7.0",
+        "jest-runner": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "jest-validate": "^29.7.0",
+        "micromatch": "^4.0.4",
+        "parse-json": "^5.2.0",
+        "pretty-format": "^29.7.0",
+        "slash": "^3.0.0",
+        "strip-json-comments": "^3.1.1"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "@types/node": "*",
+        "ts-node": ">=9.0.0"
+      },
+      "peerDependenciesMeta": {
+        "@types/node": {
+          "optional": true
+        },
+        "ts-node": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/jest-config/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-config/node_modules/pretty-format": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
+      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "ansi-styles": "^5.0.0",
+        "react-is": "^18.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-config/node_modules/pretty-format/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-config/node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/jest-diff": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.7.0.tgz",
+      "integrity": "sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "chalk": "^4.0.0",
+        "diff-sequences": "^29.6.3",
+        "jest-get-type": "^29.6.3",
+        "pretty-format": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-diff/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-diff/node_modules/pretty-format": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
+      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "ansi-styles": "^5.0.0",
+        "react-is": "^18.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-diff/node_modules/pretty-format/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-diff/node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/jest-docblock": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.7.0.tgz",
+      "integrity": "sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "detect-newline": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-each": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.7.0.tgz",
+      "integrity": "sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "chalk": "^4.0.0",
+        "jest-get-type": "^29.6.3",
+        "jest-util": "^29.7.0",
+        "pretty-format": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-each/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-each/node_modules/pretty-format": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
+      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "ansi-styles": "^5.0.0",
+        "react-is": "^18.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-each/node_modules/pretty-format/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-each/node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/jest-environment-jsdom": {
+      "version": "30.0.4",
+      "resolved": "https://registry.npmjs.org/jest-environment-jsdom/-/jest-environment-jsdom-30.0.4.tgz",
+      "integrity": "sha512-9WmS3oyCLFgs6DUJSoMpVb+AbH62Y2Xecw3XClbRgj6/Z+VjNeSLjrhBgVvTZ40njZTWeDHv8unp+6M/z8ADDg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/environment": "30.0.4",
+        "@jest/environment-jsdom-abstract": "30.0.4",
+        "@types/jsdom": "^21.1.7",
+        "@types/node": "*",
+        "jsdom": "^26.1.0"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      },
+      "peerDependencies": {
+        "canvas": "^3.0.0"
+      },
+      "peerDependenciesMeta": {
+        "canvas": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/jest-environment-jsdom/node_modules/@jest/environment": {
+      "version": "30.0.4",
+      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-30.0.4.tgz",
+      "integrity": "sha512-5NT+sr7ZOb8wW7C4r7wOKnRQ8zmRWQT2gW4j73IXAKp5/PX1Z8MCStBLQDYfIG3n1Sw0NRfYGdp0iIPVooBAFQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/fake-timers": "30.0.4",
+        "@jest/types": "30.0.1",
+        "@types/node": "*",
+        "jest-mock": "30.0.2"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/jest-environment-jsdom/node_modules/@jest/fake-timers": {
+      "version": "30.0.4",
+      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-30.0.4.tgz",
+      "integrity": "sha512-qZ7nxOcL5+gwBO6LErvwVy5k06VsX/deqo2XnVUSTV0TNC9lrg8FC3dARbi+5lmrr5VyX5drragK+xLcOjvjYw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "30.0.1",
+        "@sinonjs/fake-timers": "^13.0.0",
+        "@types/node": "*",
+        "jest-message-util": "30.0.2",
+        "jest-mock": "30.0.2",
+        "jest-util": "30.0.2"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/jest-environment-jsdom/node_modules/@jest/schemas": {
+      "version": "30.0.1",
+      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-30.0.1.tgz",
+      "integrity": "sha512-+g/1TKjFuGrf1Hh0QPCv0gISwBxJ+MQSNXmG9zjHy7BmFhtoJ9fdNhWJp3qUKRi93AOZHXtdxZgJ1vAtz6z65w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@sinclair/typebox": "^0.34.0"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/jest-environment-jsdom/node_modules/@jest/types": {
+      "version": "30.0.1",
+      "resolved": "https://registry.npmjs.org/@jest/types/-/types-30.0.1.tgz",
+      "integrity": "sha512-HGwoYRVF0QSKJu1ZQX0o5ZrUrrhj0aOOFA8hXrumD7SIzjouevhawbTjmXdwOmURdGluU9DM/XvGm3NyFoiQjw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/pattern": "30.0.1",
+        "@jest/schemas": "30.0.1",
+        "@types/istanbul-lib-coverage": "^2.0.6",
+        "@types/istanbul-reports": "^3.0.4",
+        "@types/node": "*",
+        "@types/yargs": "^17.0.33",
+        "chalk": "^4.1.2"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/jest-environment-jsdom/node_modules/@sinclair/typebox": {
+      "version": "0.34.37",
+      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.34.37.tgz",
+      "integrity": "sha512-2TRuQVgQYfy+EzHRTIvkhv2ADEouJ2xNS/Vq+W5EuuewBdOrvATvljZTxHWZSTYr2sTjTHpGvucaGAt67S2akw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/jest-environment-jsdom/node_modules/@sinonjs/fake-timers": {
+      "version": "13.0.5",
+      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-13.0.5.tgz",
+      "integrity": "sha512-36/hTbH2uaWuGVERyC6da9YwGWnzUZXuPro/F2LfsdOsLnCojz/iSH8MxUt/FD2S5XBSVPhmArFUXcpCQ2Hkiw==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@sinonjs/commons": "^3.0.1"
+      }
+    },
+    "node_modules/jest-environment-jsdom/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-environment-jsdom/node_modules/ci-info": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-4.2.0.tgz",
+      "integrity": "sha512-cYY9mypksY8NRqgDB1XD1RiJL338v/551niynFTGkZOO2LHuB2OmOYxDIe/ttN9AHwrqdum1360G3ald0W9kCg==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/sibiraj-s"
+        }
+      ],
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/jest-environment-jsdom/node_modules/jest-message-util": {
+      "version": "30.0.2",
+      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-30.0.2.tgz",
+      "integrity": "sha512-vXywcxmr0SsKXF/bAD7t7nMamRvPuJkras00gqYeB1V0WllxZrbZ0paRr3XqpFU2sYYjD0qAaG2fRyn/CGZ0aw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.27.1",
+        "@jest/types": "30.0.1",
+        "@types/stack-utils": "^2.0.3",
+        "chalk": "^4.1.2",
+        "graceful-fs": "^4.2.11",
+        "micromatch": "^4.0.8",
+        "pretty-format": "30.0.2",
+        "slash": "^3.0.0",
+        "stack-utils": "^2.0.6"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/jest-environment-jsdom/node_modules/jest-mock": {
+      "version": "30.0.2",
+      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-30.0.2.tgz",
+      "integrity": "sha512-PnZOHmqup/9cT/y+pXIVbbi8ID6U1XHRmbvR7MvUy4SLqhCbwpkmXhLbsWbGewHrV5x/1bF7YDjs+x24/QSvFA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "30.0.1",
+        "@types/node": "*",
+        "jest-util": "30.0.2"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/jest-environment-jsdom/node_modules/jest-util": {
+      "version": "30.0.2",
+      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-30.0.2.tgz",
+      "integrity": "sha512-8IyqfKS4MqprBuUpZNlFB5l+WFehc8bfCe1HSZFHzft2mOuND8Cvi9r1musli+u6F3TqanCZ/Ik4H4pXUolZIg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "30.0.1",
+        "@types/node": "*",
+        "chalk": "^4.1.2",
+        "ci-info": "^4.2.0",
+        "graceful-fs": "^4.2.11",
+        "picomatch": "^4.0.2"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/jest-environment-jsdom/node_modules/picomatch": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
+      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/jest-environment-jsdom/node_modules/pretty-format": {
+      "version": "30.0.2",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-30.0.2.tgz",
+      "integrity": "sha512-yC5/EBSOrTtqhCKfLHqoUIAXVRZnukHPwWBJWR7h84Q3Be1DRQZLncwcfLoPA5RPQ65qfiCMqgYwdUuQ//eVpg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "30.0.1",
+        "ansi-styles": "^5.2.0",
+        "react-is": "^18.3.1"
+      },
+      "engines": {
+        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+      }
+    },
+    "node_modules/jest-environment-jsdom/node_modules/pretty-format/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-environment-jsdom/node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/jest-environment-node": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.7.0.tgz",
+      "integrity": "sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/environment": "^29.7.0",
+        "@jest/fake-timers": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "jest-mock": "^29.7.0",
+        "jest-util": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-get-type": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.6.3.tgz",
+      "integrity": "sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-haste-map": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.7.0.tgz",
+      "integrity": "sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "@types/graceful-fs": "^4.1.3",
+        "@types/node": "*",
+        "anymatch": "^3.0.3",
+        "fb-watchman": "^2.0.0",
+        "graceful-fs": "^4.2.9",
+        "jest-regex-util": "^29.6.3",
+        "jest-util": "^29.7.0",
+        "jest-worker": "^29.7.0",
+        "micromatch": "^4.0.4",
+        "walker": "^1.0.8"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "optionalDependencies": {
+        "fsevents": "^2.3.2"
+      }
+    },
+    "node_modules/jest-leak-detector": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.7.0.tgz",
+      "integrity": "sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "jest-get-type": "^29.6.3",
+        "pretty-format": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-leak-detector/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-leak-detector/node_modules/pretty-format": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
+      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "ansi-styles": "^5.0.0",
+        "react-is": "^18.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-leak-detector/node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/jest-matcher-utils": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.7.0.tgz",
+      "integrity": "sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "chalk": "^4.0.0",
+        "jest-diff": "^29.7.0",
+        "jest-get-type": "^29.6.3",
+        "pretty-format": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-matcher-utils/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-matcher-utils/node_modules/pretty-format": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
+      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "ansi-styles": "^5.0.0",
+        "react-is": "^18.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-matcher-utils/node_modules/pretty-format/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-matcher-utils/node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/jest-message-util": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.7.0.tgz",
+      "integrity": "sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.12.13",
+        "@jest/types": "^29.6.3",
+        "@types/stack-utils": "^2.0.0",
+        "chalk": "^4.0.0",
+        "graceful-fs": "^4.2.9",
+        "micromatch": "^4.0.4",
+        "pretty-format": "^29.7.0",
+        "slash": "^3.0.0",
+        "stack-utils": "^2.0.3"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-message-util/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-message-util/node_modules/pretty-format": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
+      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "ansi-styles": "^5.0.0",
+        "react-is": "^18.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-message-util/node_modules/pretty-format/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-message-util/node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/jest-mock": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.7.0.tgz",
+      "integrity": "sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "jest-util": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-pnp-resolver": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
+      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      },
+      "peerDependencies": {
+        "jest-resolve": "*"
+      },
+      "peerDependenciesMeta": {
+        "jest-resolve": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/jest-regex-util": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.6.3.tgz",
+      "integrity": "sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-resolve": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.7.0.tgz",
+      "integrity": "sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "chalk": "^4.0.0",
+        "graceful-fs": "^4.2.9",
+        "jest-haste-map": "^29.7.0",
+        "jest-pnp-resolver": "^1.2.2",
+        "jest-util": "^29.7.0",
+        "jest-validate": "^29.7.0",
+        "resolve": "^1.20.0",
+        "resolve.exports": "^2.0.0",
+        "slash": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-resolve-dependencies": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.7.0.tgz",
+      "integrity": "sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "jest-regex-util": "^29.6.3",
+        "jest-snapshot": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-resolve/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-runner": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.7.0.tgz",
+      "integrity": "sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/console": "^29.7.0",
+        "@jest/environment": "^29.7.0",
+        "@jest/test-result": "^29.7.0",
+        "@jest/transform": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "emittery": "^0.13.1",
+        "graceful-fs": "^4.2.9",
+        "jest-docblock": "^29.7.0",
+        "jest-environment-node": "^29.7.0",
+        "jest-haste-map": "^29.7.0",
+        "jest-leak-detector": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-resolve": "^29.7.0",
+        "jest-runtime": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "jest-watcher": "^29.7.0",
+        "jest-worker": "^29.7.0",
+        "p-limit": "^3.1.0",
+        "source-map-support": "0.5.13"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-runner/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-runtime": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.7.0.tgz",
+      "integrity": "sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/environment": "^29.7.0",
+        "@jest/fake-timers": "^29.7.0",
+        "@jest/globals": "^29.7.0",
+        "@jest/source-map": "^29.6.3",
+        "@jest/test-result": "^29.7.0",
+        "@jest/transform": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "cjs-module-lexer": "^1.0.0",
+        "collect-v8-coverage": "^1.0.0",
+        "glob": "^7.1.3",
+        "graceful-fs": "^4.2.9",
+        "jest-haste-map": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-mock": "^29.7.0",
+        "jest-regex-util": "^29.6.3",
+        "jest-resolve": "^29.7.0",
+        "jest-snapshot": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "slash": "^3.0.0",
+        "strip-bom": "^4.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-runtime/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-snapshot": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.7.0.tgz",
+      "integrity": "sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/core": "^7.11.6",
+        "@babel/generator": "^7.7.2",
+        "@babel/plugin-syntax-jsx": "^7.7.2",
+        "@babel/plugin-syntax-typescript": "^7.7.2",
+        "@babel/types": "^7.3.3",
+        "@jest/expect-utils": "^29.7.0",
+        "@jest/transform": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "babel-preset-current-node-syntax": "^1.0.0",
+        "chalk": "^4.0.0",
+        "expect": "^29.7.0",
+        "graceful-fs": "^4.2.9",
+        "jest-diff": "^29.7.0",
+        "jest-get-type": "^29.6.3",
+        "jest-matcher-utils": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "natural-compare": "^1.4.0",
+        "pretty-format": "^29.7.0",
+        "semver": "^7.5.3"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-snapshot/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-snapshot/node_modules/pretty-format": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
+      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "ansi-styles": "^5.0.0",
+        "react-is": "^18.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-snapshot/node_modules/pretty-format/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-snapshot/node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/jest-util": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.7.0.tgz",
+      "integrity": "sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "ci-info": "^3.2.0",
+        "graceful-fs": "^4.2.9",
+        "picomatch": "^2.2.3"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-util/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-validate": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.7.0.tgz",
+      "integrity": "sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "camelcase": "^6.2.0",
+        "chalk": "^4.0.0",
+        "jest-get-type": "^29.6.3",
+        "leven": "^3.1.0",
+        "pretty-format": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-validate/node_modules/camelcase": {
+      "version": "6.3.0",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
+      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/jest-validate/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-validate/node_modules/pretty-format": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
+      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "ansi-styles": "^5.0.0",
+        "react-is": "^18.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-validate/node_modules/pretty-format/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-validate/node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/jest-watcher": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.7.0.tgz",
+      "integrity": "sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/test-result": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "ansi-escapes": "^4.2.1",
+        "chalk": "^4.0.0",
+        "emittery": "^0.13.1",
+        "jest-util": "^29.7.0",
+        "string-length": "^4.0.1"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-watcher/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-worker": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.7.0.tgz",
+      "integrity": "sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*",
+        "jest-util": "^29.7.0",
+        "merge-stream": "^2.0.0",
+        "supports-color": "^8.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-worker/node_modules/supports-color": {
+      "version": "8.1.1",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
+      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/supports-color?sponsor=1"
+      }
+    },
+    "node_modules/jiti": {
+      "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/jiti/-/jiti-2.4.2.tgz",
+      "integrity": "sha512-rg9zJN+G4n2nfJl5MW3BMygZX56zKPNVEYYqq7adpmMh4Jn2QNEwhvQlFy6jPVdcod7txZtKHWnyZiA3a0zP7A==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "jiti": "lib/jiti-cli.mjs"
+      }
+    },
+    "node_modules/js-tokens": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
+      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/js-yaml": {
+      "version": "3.14.1",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
+      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "argparse": "^1.0.7",
+        "esprima": "^4.0.0"
+      },
+      "bin": {
+        "js-yaml": "bin/js-yaml.js"
+      }
+    },
+    "node_modules/jsdom": {
+      "version": "26.1.0",
+      "resolved": "https://registry.npmjs.org/jsdom/-/jsdom-26.1.0.tgz",
+      "integrity": "sha512-Cvc9WUhxSMEo4McES3P7oK3QaXldCfNWp7pl2NNeiIFlCoLr3kfq9kb1fxftiwk1FLV7CvpvDfonxtzUDeSOPg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "cssstyle": "^4.2.1",
+        "data-urls": "^5.0.0",
+        "decimal.js": "^10.5.0",
+        "html-encoding-sniffer": "^4.0.0",
+        "http-proxy-agent": "^7.0.2",
+        "https-proxy-agent": "^7.0.6",
+        "is-potential-custom-element-name": "^1.0.1",
+        "nwsapi": "^2.2.16",
+        "parse5": "^7.2.1",
+        "rrweb-cssom": "^0.8.0",
+        "saxes": "^6.0.0",
+        "symbol-tree": "^3.2.4",
+        "tough-cookie": "^5.1.1",
+        "w3c-xmlserializer": "^5.0.0",
+        "webidl-conversions": "^7.0.0",
+        "whatwg-encoding": "^3.1.1",
+        "whatwg-mimetype": "^4.0.0",
+        "whatwg-url": "^14.1.1",
+        "ws": "^8.18.0",
+        "xml-name-validator": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "peerDependencies": {
+        "canvas": "^3.0.0"
+      },
+      "peerDependenciesMeta": {
+        "canvas": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/jsesc": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
+      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "jsesc": "bin/jsesc"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/json-parse-even-better-errors": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
+      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/json5": {
+      "version": "2.2.3",
+      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
+      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "json5": "lib/cli.js"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/kleur": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
+      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/leven": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
+      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/lightningcss": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss/-/lightningcss-1.30.1.tgz",
+      "integrity": "sha512-xi6IyHML+c9+Q3W0S4fCQJOym42pyurFiJUHEcEyHS0CeKzia4yZDEsLlqOFykxOdHpNy0NmvVO31vcSqAxJCg==",
+      "dev": true,
+      "license": "MPL-2.0",
+      "dependencies": {
+        "detect-libc": "^2.0.3"
+      },
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      },
+      "optionalDependencies": {
+        "lightningcss-darwin-arm64": "1.30.1",
+        "lightningcss-darwin-x64": "1.30.1",
+        "lightningcss-freebsd-x64": "1.30.1",
+        "lightningcss-linux-arm-gnueabihf": "1.30.1",
+        "lightningcss-linux-arm64-gnu": "1.30.1",
+        "lightningcss-linux-arm64-musl": "1.30.1",
+        "lightningcss-linux-x64-gnu": "1.30.1",
+        "lightningcss-linux-x64-musl": "1.30.1",
+        "lightningcss-win32-arm64-msvc": "1.30.1",
+        "lightningcss-win32-x64-msvc": "1.30.1"
+      }
+    },
+    "node_modules/lightningcss-darwin-arm64": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-darwin-arm64/-/lightningcss-darwin-arm64-1.30.1.tgz",
+      "integrity": "sha512-c8JK7hyE65X1MHMN+Viq9n11RRC7hgin3HhYKhrMyaXflk5GVplZ60IxyoVtzILeKr+xAJwg6zK6sjTBJ0FKYQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-darwin-x64": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-darwin-x64/-/lightningcss-darwin-x64-1.30.1.tgz",
+      "integrity": "sha512-k1EvjakfumAQoTfcXUcHQZhSpLlkAuEkdMBsI/ivWw9hL+7FtilQc0Cy3hrx0AAQrVtQAbMI7YjCgYgvn37PzA==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-freebsd-x64": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-freebsd-x64/-/lightningcss-freebsd-x64-1.30.1.tgz",
+      "integrity": "sha512-kmW6UGCGg2PcyUE59K5r0kWfKPAVy4SltVeut+umLCFoJ53RdCUWxcRDzO1eTaxf/7Q2H7LTquFHPL5R+Gjyig==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-linux-arm-gnueabihf": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm-gnueabihf/-/lightningcss-linux-arm-gnueabihf-1.30.1.tgz",
+      "integrity": "sha512-MjxUShl1v8pit+6D/zSPq9S9dQ2NPFSQwGvxBCYaBYLPlCWuPh9/t1MRS8iUaR8i+a6w7aps+B4N0S1TYP/R+Q==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-linux-arm64-gnu": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-gnu/-/lightningcss-linux-arm64-gnu-1.30.1.tgz",
+      "integrity": "sha512-gB72maP8rmrKsnKYy8XUuXi/4OctJiuQjcuqWNlJQ6jZiWqtPvqFziskH3hnajfvKB27ynbVCucKSm2rkQp4Bw==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-linux-arm64-musl": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-musl/-/lightningcss-linux-arm64-musl-1.30.1.tgz",
+      "integrity": "sha512-jmUQVx4331m6LIX+0wUhBbmMX7TCfjF5FoOH6SD1CttzuYlGNVpA7QnrmLxrsub43ClTINfGSYyHe2HWeLl5CQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-linux-x64-gnu": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-linux-x64-gnu/-/lightningcss-linux-x64-gnu-1.30.1.tgz",
+      "integrity": "sha512-piWx3z4wN8J8z3+O5kO74+yr6ze/dKmPnI7vLqfSqI8bccaTGY5xiSGVIJBDd5K5BHlvVLpUB3S2YCfelyJ1bw==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-linux-x64-musl": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-linux-x64-musl/-/lightningcss-linux-x64-musl-1.30.1.tgz",
+      "integrity": "sha512-rRomAK7eIkL+tHY0YPxbc5Dra2gXlI63HL+v1Pdi1a3sC+tJTcFrHX+E86sulgAXeI7rSzDYhPSeHHjqFhqfeQ==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-win32-arm64-msvc": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-win32-arm64-msvc/-/lightningcss-win32-arm64-msvc-1.30.1.tgz",
+      "integrity": "sha512-mSL4rqPi4iXq5YVqzSsJgMVFENoa4nGTT/GjO2c0Yl9OuQfPsIfncvLrEW6RbbB24WtZ3xP/2CCmI3tNkNV4oA==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-win32-x64-msvc": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-win32-x64-msvc/-/lightningcss-win32-x64-msvc-1.30.1.tgz",
+      "integrity": "sha512-PVqXh48wh4T53F/1CCu8PIPCxLzWyCnn/9T5W1Jpmdy5h9Cwd+0YQS6/LwhHXSafuc61/xg9Lv5OrCby6a++jg==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lines-and-columns": {
+      "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
+      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/locate-path": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
+      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "p-locate": "^4.1.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/lodash": {
+      "version": "4.17.21",
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
+      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/lodash.memoize": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
+      "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/lru-cache": {
+      "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
+      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^3.0.2"
+      }
+    },
+    "node_modules/lru-cache/node_modules/yallist": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
+      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/lz-string": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/lz-string/-/lz-string-1.5.0.tgz",
+      "integrity": "sha512-h5bgJWpxJNswbU7qCrV0tIKQCaS3blPDrqKWx+QxzuzL1zGUzij9XCWLrSLsJPu5t+eWA/ycetzYAO5IOMcWAQ==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "lz-string": "bin/bin.js"
+      }
+    },
+    "node_modules/magic-string": {
+      "version": "0.30.17",
+      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.17.tgz",
+      "integrity": "sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/sourcemap-codec": "^1.5.0"
+      }
+    },
+    "node_modules/make-dir": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
+      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "semver": "^7.5.3"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/make-error": {
+      "version": "1.3.6",
+      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
+      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/makeerror": {
+      "version": "1.0.12",
+      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
+      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "tmpl": "1.0.5"
+      }
+    },
+    "node_modules/math-intrinsics": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
+      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/merge-stream": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
+      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/micromatch": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
+      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "braces": "^3.0.3",
+        "picomatch": "^2.3.1"
+      },
+      "engines": {
+        "node": ">=8.6"
+      }
+    },
+    "node_modules/mimic-fn": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
+      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/min-indent": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/min-indent/-/min-indent-1.0.1.tgz",
+      "integrity": "sha512-I9jwMn07Sy/IwOj3zVkVik2JTvgpaykDZEigL6Rx6N9LbMywwUSMtxET+7lVoDLLd3O3IXwJwvuuns8UB/HeAg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/minipass": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
+      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
+      "dev": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/minizlib": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-3.0.2.tgz",
+      "integrity": "sha512-oG62iEk+CYt5Xj2YqI5Xi9xWUeZhDI8jjQmC5oThVH5JGCTgIjr7ciJDzC7MBzYd//WvR1OTmP5Q38Q8ShQtVA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "minipass": "^7.1.2"
+      },
+      "engines": {
+        "node": ">= 18"
+      }
+    },
+    "node_modules/mkdirp": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-3.0.1.tgz",
+      "integrity": "sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "mkdirp": "dist/cjs/src/bin.js"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/nanoid": {
+      "version": "3.3.11",
+      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
+      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "bin": {
+        "nanoid": "bin/nanoid.cjs"
+      },
+      "engines": {
+        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
+      }
+    },
+    "node_modules/natural-compare": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
+      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/next": {
+      "version": "15.3.4",
+      "resolved": "https://registry.npmjs.org/next/-/next-15.3.4.tgz",
+      "integrity": "sha512-mHKd50C+mCjam/gcnwqL1T1vPx/XQNFlXqFIVdgQdVAFY9iIQtY0IfaVflEYzKiqjeA7B0cYYMaCrmAYFjs4rA==",
+      "license": "MIT",
+      "dependencies": {
+        "@next/env": "15.3.4",
+        "@swc/counter": "0.1.3",
+        "@swc/helpers": "0.5.15",
+        "busboy": "1.6.0",
+        "caniuse-lite": "^1.0.30001579",
+        "postcss": "8.4.31",
+        "styled-jsx": "5.1.6"
+      },
+      "bin": {
+        "next": "dist/bin/next"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^19.8.0 || >= 20.0.0"
+      },
+      "optionalDependencies": {
+        "@next/swc-darwin-arm64": "15.3.4",
+        "@next/swc-darwin-x64": "15.3.4",
+        "@next/swc-linux-arm64-gnu": "15.3.4",
+        "@next/swc-linux-arm64-musl": "15.3.4",
+        "@next/swc-linux-x64-gnu": "15.3.4",
+        "@next/swc-linux-x64-musl": "15.3.4",
+        "@next/swc-win32-arm64-msvc": "15.3.4",
+        "@next/swc-win32-x64-msvc": "15.3.4",
+        "sharp": "^0.34.1"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.1.0",
+        "@playwright/test": "^1.41.2",
+        "babel-plugin-react-compiler": "*",
+        "react": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
+        "react-dom": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
+        "sass": "^1.3.0"
+      },
+      "peerDependenciesMeta": {
+        "@opentelemetry/api": {
+          "optional": true
+        },
+        "@playwright/test": {
+          "optional": true
+        },
+        "babel-plugin-react-compiler": {
+          "optional": true
+        },
+        "sass": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/next/node_modules/postcss": {
+      "version": "8.4.31",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz",
+      "integrity": "sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/postcss"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "nanoid": "^3.3.6",
+        "picocolors": "^1.0.0",
+        "source-map-js": "^1.0.2"
+      },
+      "engines": {
+        "node": "^10 || ^12 || >=14"
+      }
+    },
+    "node_modules/node-int64": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
+      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/node-releases": {
+      "version": "2.0.19",
+      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
+      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/normalize-path": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
+      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/npm-run-path": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
+      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "path-key": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/nwsapi": {
+      "version": "2.2.20",
+      "resolved": "https://registry.npmjs.org/nwsapi/-/nwsapi-2.2.20.tgz",
+      "integrity": "sha512-/ieB+mDe4MrrKMT8z+mQL8klXydZWGR5Dowt4RAGKbJ3kIGEx3X4ljUo+6V73IXtUPWgfOlU5B9MlGxFO5T+cA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/object-inspect": {
+      "version": "1.13.4",
+      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
+      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/object-is": {
+      "version": "1.1.6",
+      "resolved": "https://registry.npmjs.org/object-is/-/object-is-1.1.6.tgz",
+      "integrity": "sha512-F8cZ+KfGlSGi09lJT7/Nd6KJZ9ygtvYC0/UYYLI9nmQKLMnydpB9yvbv9K1uSkEu7FU9vYPmVwLg328tX+ot3Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "define-properties": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/object-keys": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
+      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/object.assign": {
+      "version": "4.1.7",
+      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
+      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "define-properties": "^1.2.1",
+        "es-object-atoms": "^1.0.0",
+        "has-symbols": "^1.1.0",
+        "object-keys": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/once": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
+      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "wrappy": "1"
+      }
+    },
+    "node_modules/onetime": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
+      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "mimic-fn": "^2.1.0"
+      },
+      "engines": {
+        "node": ">=6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/p-limit": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
+      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "yocto-queue": "^0.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/p-locate": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
+      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "p-limit": "^2.2.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/p-locate/node_modules/p-limit": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
+      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "p-try": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/p-try": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
+      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/parse-json": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
+      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.0.0",
+        "error-ex": "^1.3.1",
+        "json-parse-even-better-errors": "^2.3.0",
+        "lines-and-columns": "^1.1.6"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/parse5": {
+      "version": "7.3.0",
+      "resolved": "https://registry.npmjs.org/parse5/-/parse5-7.3.0.tgz",
+      "integrity": "sha512-IInvU7fabl34qmi9gY8XOVxhYyMyuH2xUNpb2q8/Y+7552KlejkRvqvD19nMoUW/uQGGbqNpA6Tufu5FL5BZgw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "entities": "^6.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/inikulin/parse5?sponsor=1"
+      }
+    },
+    "node_modules/path-exists": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
+      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/path-is-absolute": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
+      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/path-key": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/path-parse": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
+      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/picocolors": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
+      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
+      "license": "ISC"
+    },
+    "node_modules/picomatch": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
+      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/pirates": {
+      "version": "4.0.7",
+      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
+      "integrity": "sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/pkg-dir": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
+      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "find-up": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/playwright": {
+      "version": "1.53.2",
+      "resolved": "https://registry.npmjs.org/playwright/-/playwright-1.53.2.tgz",
+      "integrity": "sha512-6K/qQxVFuVQhRQhFsVZ9fGeatxirtrpPgxzBYWyZLEXJzqYwuL4fuNmfOfD5et1tJE4GScKyPNeLhZeRwuTU3A==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "playwright-core": "1.53.2"
+      },
+      "bin": {
+        "playwright": "cli.js"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "optionalDependencies": {
+        "fsevents": "2.3.2"
+      }
+    },
+    "node_modules/playwright-core": {
+      "version": "1.53.2",
+      "resolved": "https://registry.npmjs.org/playwright-core/-/playwright-core-1.53.2.tgz",
+      "integrity": "sha512-ox/OytMy+2w1jcYEYlOo1Hhp8hZkLCximMTUTMBXjGUA1KoFfiSZ+DU+3a739jsPY0yoKH2TFy9S2fsJas8yAw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "bin": {
+        "playwright-core": "cli.js"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/playwright/node_modules/fsevents": {
+      "version": "2.3.2",
+      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
+      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
+      "dev": true,
+      "hasInstallScript": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
+      }
+    },
+    "node_modules/possible-typed-array-names": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
+      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/postcss": {
+      "version": "8.5.6",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
+      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/postcss"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "nanoid": "^3.3.11",
+        "picocolors": "^1.1.1",
+        "source-map-js": "^1.2.1"
+      },
+      "engines": {
+        "node": "^10 || ^12 || >=14"
+      }
+    },
+    "node_modules/pretty-format": {
+      "version": "27.5.1",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-27.5.1.tgz",
+      "integrity": "sha512-Qb1gy5OrP5+zDf2Bvnzdl3jsTf1qXVMazbvCoKhtKqVs4/YK4ozX4gKQJJVyNe+cajNPn0KoC0MC3FUmaHWEmQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1",
+        "ansi-styles": "^5.0.0",
+        "react-is": "^17.0.1"
+      },
+      "engines": {
+        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
+      }
+    },
+    "node_modules/pretty-format/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/prompts": {
+      "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
+      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "kleur": "^3.0.3",
+        "sisteransi": "^1.0.5"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/punycode": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
+      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/pure-rand": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.1.0.tgz",
+      "integrity": "sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "individual",
+          "url": "https://github.com/sponsors/dubzzz"
+        },
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/fast-check"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/react": {
+      "version": "19.1.0",
+      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
+      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/react-chartjs-2": {
+      "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/react-chartjs-2/-/react-chartjs-2-5.3.0.tgz",
+      "integrity": "sha512-UfZZFnDsERI3c3CZGxzvNJd02SHjaSJ8kgW1djn65H1KK8rehwTjyrRKOG3VTMG8wtHZ5rgAO5oTHtHi9GCCmw==",
+      "license": "MIT",
+      "peerDependencies": {
+        "chart.js": "^4.1.1",
+        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
+      }
+    },
+    "node_modules/react-dom": {
+      "version": "19.1.0",
+      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz",
+      "integrity": "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==",
+      "license": "MIT",
+      "dependencies": {
+        "scheduler": "^0.26.0"
+      },
+      "peerDependencies": {
+        "react": "^19.1.0"
+      }
+    },
+    "node_modules/react-is": {
+      "version": "17.0.2",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-17.0.2.tgz",
+      "integrity": "sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/react-test-renderer": {
+      "version": "19.1.0",
+      "resolved": "https://registry.npmjs.org/react-test-renderer/-/react-test-renderer-19.1.0.tgz",
+      "integrity": "sha512-jXkSl3CpvPYEF+p/eGDLB4sPoDX8pKkYvRl9+rR8HxLY0X04vW7hCm1/0zHoUSjPZ3bDa+wXWNTDVIw/R8aDVw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "react-is": "^19.1.0",
+        "scheduler": "^0.26.0"
+      },
+      "peerDependencies": {
+        "react": "^19.1.0"
+      }
+    },
+    "node_modules/react-test-renderer/node_modules/react-is": {
+      "version": "19.1.0",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-19.1.0.tgz",
+      "integrity": "sha512-Oe56aUPnkHyyDxxkvqtd7KkdQP5uIUfHxd5XTb3wE9d/kRnZLmKbDB0GWk919tdQ+mxxPtG6EAs6RMT6i1qtHg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/redent": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/redent/-/redent-3.0.0.tgz",
+      "integrity": "sha512-6tDA8g98We0zd0GvVeMT9arEOnTw9qM03L9cJXaCjrip1OO764RDBLBfrB4cwzNGDj5OA5ioymC9GkizgWJDUg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "indent-string": "^4.0.0",
+        "strip-indent": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/regexp.prototype.flags": {
+      "version": "1.5.4",
+      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
+      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "define-properties": "^1.2.1",
+        "es-errors": "^1.3.0",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "set-function-name": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/require-directory": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
+      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/resolve": {
+      "version": "1.22.10",
+      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
+      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-core-module": "^2.16.0",
+        "path-parse": "^1.0.7",
+        "supports-preserve-symlinks-flag": "^1.0.0"
+      },
+      "bin": {
+        "resolve": "bin/resolve"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/resolve-cwd": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
+      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "resolve-from": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/resolve-from": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
+      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/resolve.exports": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.3.tgz",
+      "integrity": "sha512-OcXjMsGdhL4XnbShKpAcSqPMzQoYkYyhbEaeSko47MjRP9NfEQMhZkXL1DoFlt9LWQn4YttrdnV6X2OiyzBi+A==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/rrweb-cssom": {
+      "version": "0.8.0",
+      "resolved": "https://registry.npmjs.org/rrweb-cssom/-/rrweb-cssom-0.8.0.tgz",
+      "integrity": "sha512-guoltQEx+9aMf2gDZ0s62EcV8lsXR+0w8915TC3ITdn2YueuNjdAYh/levpU9nFaoChh9RUS5ZdQMrKfVEN9tw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/safe-regex-test": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
+      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "is-regex": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/safer-buffer": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
+      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/saxes": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/saxes/-/saxes-6.0.0.tgz",
+      "integrity": "sha512-xAg7SOnEhrm5zI3puOOKyy1OMcMlIJZYNJY7xLBwSze0UjhPLnWfj2GF2EpT0jmzaJKIWKHLsaSSajf35bcYnA==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "xmlchars": "^2.2.0"
+      },
+      "engines": {
+        "node": ">=v12.22.7"
+      }
+    },
+    "node_modules/scheduler": {
+      "version": "0.26.0",
+      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
+      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
+      "license": "MIT"
+    },
+    "node_modules/semver": {
+      "version": "7.7.2",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
+      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
+      "devOptional": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/set-function-length": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
+      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-data-property": "^1.1.4",
+        "es-errors": "^1.3.0",
+        "function-bind": "^1.1.2",
+        "get-intrinsic": "^1.2.4",
+        "gopd": "^1.0.1",
+        "has-property-descriptors": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/set-function-name": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
+      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-data-property": "^1.1.4",
+        "es-errors": "^1.3.0",
+        "functions-have-names": "^1.2.3",
+        "has-property-descriptors": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/sharp": {
+      "version": "0.34.2",
+      "resolved": "https://registry.npmjs.org/sharp/-/sharp-0.34.2.tgz",
+      "integrity": "sha512-lszvBmB9QURERtyKT2bNmsgxXK0ShJrL/fvqlonCo7e6xBF8nT8xU6pW+PMIbLsz0RxQk3rgH9kd8UmvOzlMJg==",
+      "hasInstallScript": true,
+      "license": "Apache-2.0",
+      "optional": true,
+      "dependencies": {
+        "color": "^4.2.3",
+        "detect-libc": "^2.0.4",
+        "semver": "^7.7.2"
+      },
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-darwin-arm64": "0.34.2",
+        "@img/sharp-darwin-x64": "0.34.2",
+        "@img/sharp-libvips-darwin-arm64": "1.1.0",
+        "@img/sharp-libvips-darwin-x64": "1.1.0",
+        "@img/sharp-libvips-linux-arm": "1.1.0",
+        "@img/sharp-libvips-linux-arm64": "1.1.0",
+        "@img/sharp-libvips-linux-ppc64": "1.1.0",
+        "@img/sharp-libvips-linux-s390x": "1.1.0",
+        "@img/sharp-libvips-linux-x64": "1.1.0",
+        "@img/sharp-libvips-linuxmusl-arm64": "1.1.0",
+        "@img/sharp-libvips-linuxmusl-x64": "1.1.0",
+        "@img/sharp-linux-arm": "0.34.2",
+        "@img/sharp-linux-arm64": "0.34.2",
+        "@img/sharp-linux-s390x": "0.34.2",
+        "@img/sharp-linux-x64": "0.34.2",
+        "@img/sharp-linuxmusl-arm64": "0.34.2",
+        "@img/sharp-linuxmusl-x64": "0.34.2",
+        "@img/sharp-wasm32": "0.34.2",
+        "@img/sharp-win32-arm64": "0.34.2",
+        "@img/sharp-win32-ia32": "0.34.2",
+        "@img/sharp-win32-x64": "0.34.2"
+      }
+    },
+    "node_modules/shebang-command": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "shebang-regex": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/shebang-regex": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/side-channel": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
+      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3",
+        "side-channel-list": "^1.0.0",
+        "side-channel-map": "^1.0.1",
+        "side-channel-weakmap": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-list": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
+      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-map": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
+      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-weakmap": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
+      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3",
+        "side-channel-map": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/signal-exit": {
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
+      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/simple-swizzle": {
+      "version": "0.2.2",
+      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
+      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "is-arrayish": "^0.3.1"
+      }
+    },
+    "node_modules/sisteransi": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
+      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/slash": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
+      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/source-map": {
+      "version": "0.6.1",
+      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
+      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/source-map-js": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
+      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/source-map-support": {
+      "version": "0.5.13",
+      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
+      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "buffer-from": "^1.0.0",
+        "source-map": "^0.6.0"
+      }
+    },
+    "node_modules/sprintf-js": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
+      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
+      "dev": true,
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/stack-utils": {
+      "version": "2.0.6",
+      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
+      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "escape-string-regexp": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/stop-iteration-iterator": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
+      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "internal-slot": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/streamsearch": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
+      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
+      "engines": {
+        "node": ">=10.0.0"
+      }
+    },
+    "node_modules/string-length": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
+      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "char-regex": "^1.0.2",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/string-width": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-bom": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
+      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-final-newline": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
+      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/strip-indent": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/strip-indent/-/strip-indent-3.0.0.tgz",
+      "integrity": "sha512-laJTa3Jb+VQpaC6DseHhF7dXVqHTfJPCRDaEbid/drOhgitgYku/letMUqOXFoWV0zIIUbjpdH2t+tYj4bQMRQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "min-indent": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-json-comments": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
+      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/styled-jsx": {
+      "version": "5.1.6",
+      "resolved": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-5.1.6.tgz",
+      "integrity": "sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==",
+      "license": "MIT",
+      "dependencies": {
+        "client-only": "0.0.1"
+      },
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "peerDependencies": {
+        "react": ">= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0"
+      },
+      "peerDependenciesMeta": {
+        "@babel/core": {
+          "optional": true
+        },
+        "babel-plugin-macros": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/supports-color": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/supports-preserve-symlinks-flag": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
+      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/swr": {
+      "version": "2.3.4",
+      "resolved": "https://registry.npmjs.org/swr/-/swr-2.3.4.tgz",
+      "integrity": "sha512-bYd2lrhc+VarcpkgWclcUi92wYCpOgMws9Sd1hG1ntAu0NEy+14CbotuFjshBU2kt9rYj9TSmDcybpxpeTU1fg==",
+      "license": "MIT",
+      "dependencies": {
+        "dequal": "^2.0.3",
+        "use-sync-external-store": "^1.4.0"
+      },
+      "peerDependencies": {
+        "react": "^16.11.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
+      }
+    },
+    "node_modules/symbol-tree": {
+      "version": "3.2.4",
+      "resolved": "https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.4.tgz",
+      "integrity": "sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/tailwindcss": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-4.1.11.tgz",
+      "integrity": "sha512-2E9TBm6MDD/xKYe+dvJZAmg3yxIEDNRc0jwlNyDg/4Fil2QcSLjFKGVff0lAf1jjeaArlG/M75Ey/EYr/OJtBA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/tapable": {
+      "version": "2.2.2",
+      "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.2.tgz",
+      "integrity": "sha512-Re10+NauLTMCudc7T5WLFLAwDhQ0JWdrMK+9B2M8zR5hRExKmsRDCBA7/aV/pNJFltmBFO5BAMlQFi/vq3nKOg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/tar": {
+      "version": "7.4.3",
+      "resolved": "https://registry.npmjs.org/tar/-/tar-7.4.3.tgz",
+      "integrity": "sha512-5S7Va8hKfV7W5U6g3aYxXmlPoZVAwUMy9AOKyF2fVuZa2UD3qZjg578OrLRt8PcNN1PleVaL/5/yYATNL0ICUw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "@isaacs/fs-minipass": "^4.0.0",
+        "chownr": "^3.0.0",
+        "minipass": "^7.1.2",
+        "minizlib": "^3.0.1",
+        "mkdirp": "^3.0.1",
+        "yallist": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/test-exclude": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
+      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "@istanbuljs/schema": "^0.1.2",
+        "glob": "^7.1.4",
+        "minimatch": "^3.0.4"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/tldts": {
+      "version": "6.1.86",
+      "resolved": "https://registry.npmjs.org/tldts/-/tldts-6.1.86.tgz",
+      "integrity": "sha512-WMi/OQ2axVTf/ykqCQgXiIct+mSQDFdH2fkwhPwgEwvJ1kSzZRiinb0zF2Xb8u4+OqPChmyI6MEu4EezNJz+FQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "tldts-core": "^6.1.86"
+      },
+      "bin": {
+        "tldts": "bin/cli.js"
+      }
+    },
+    "node_modules/tldts-core": {
+      "version": "6.1.86",
+      "resolved": "https://registry.npmjs.org/tldts-core/-/tldts-core-6.1.86.tgz",
+      "integrity": "sha512-Je6p7pkk+KMzMv2XXKmAE3McmolOQFdxkKw0R8EYNr7sELW46JqnNeTX8ybPiQgvg1ymCoF8LXs5fzFaZvJPTA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/tmpl": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
+      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
+      "dev": true,
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/to-regex-range": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
+      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-number": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=8.0"
+      }
+    },
+    "node_modules/tough-cookie": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-5.1.2.tgz",
+      "integrity": "sha512-FVDYdxtnj0G6Qm/DhNPSb8Ju59ULcup3tuJxkFb5K8Bv2pUXILbf0xZWU8PX8Ov19OXljbUyveOFwRMwkXzO+A==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "tldts": "^6.1.32"
+      },
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/tr46": {
+      "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/tr46/-/tr46-5.1.1.tgz",
+      "integrity": "sha512-hdF5ZgjTqgAntKkklYw0R03MG2x/bSzTtkxmIRw/sTNV8YXsCJ1tfLAX23lhxhHJlEf3CRCOCGGWw3vI3GaSPw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "punycode": "^2.3.1"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/ts-jest": {
+      "version": "29.4.0",
+      "resolved": "https://registry.npmjs.org/ts-jest/-/ts-jest-29.4.0.tgz",
+      "integrity": "sha512-d423TJMnJGu80/eSgfQ5w/R+0zFJvdtTxwtF9KzFFunOpSeD+79lHJQIiAhluJoyGRbvj9NZJsl9WjCUo0ND7Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "bs-logger": "^0.2.6",
+        "ejs": "^3.1.10",
+        "fast-json-stable-stringify": "^2.1.0",
+        "json5": "^2.2.3",
+        "lodash.memoize": "^4.1.2",
+        "make-error": "^1.3.6",
+        "semver": "^7.7.2",
+        "type-fest": "^4.41.0",
+        "yargs-parser": "^21.1.1"
+      },
+      "bin": {
+        "ts-jest": "cli.js"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || ^18.0.0 || >=20.0.0"
+      },
+      "peerDependencies": {
+        "@babel/core": ">=7.0.0-beta.0 <8",
+        "@jest/transform": "^29.0.0 || ^30.0.0",
+        "@jest/types": "^29.0.0 || ^30.0.0",
+        "babel-jest": "^29.0.0 || ^30.0.0",
+        "jest": "^29.0.0 || ^30.0.0",
+        "jest-util": "^29.0.0 || ^30.0.0",
+        "typescript": ">=4.3 <6"
+      },
+      "peerDependenciesMeta": {
+        "@babel/core": {
+          "optional": true
+        },
+        "@jest/transform": {
+          "optional": true
+        },
+        "@jest/types": {
+          "optional": true
+        },
+        "babel-jest": {
+          "optional": true
+        },
+        "esbuild": {
+          "optional": true
+        },
+        "jest-util": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/ts-jest/node_modules/type-fest": {
+      "version": "4.41.0",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-4.41.0.tgz",
+      "integrity": "sha512-TeTSQ6H5YHvpqVwBRcnLDCBnDOHWYu7IvGbHT6N8AOymcr9PJGjc1GTtiWZTYg0NCgYwvnYWEkVChQAr9bjfwA==",
+      "dev": true,
+      "license": "(MIT OR CC0-1.0)",
+      "engines": {
+        "node": ">=16"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/tslib": {
+      "version": "2.8.1",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
+      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
+      "license": "0BSD"
+    },
+    "node_modules/type-detect": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
+      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/type-fest": {
+      "version": "0.21.3",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
+      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
+      "dev": true,
+      "license": "(MIT OR CC0-1.0)",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/typescript": {
+      "version": "5.8.3",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
+      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "bin": {
+        "tsc": "bin/tsc",
+        "tsserver": "bin/tsserver"
+      },
+      "engines": {
+        "node": ">=14.17"
+      }
+    },
+    "node_modules/undici-types": {
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
+      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/update-browserslist-db": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
+      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/browserslist"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "escalade": "^3.2.0",
+        "picocolors": "^1.1.1"
+      },
+      "bin": {
+        "update-browserslist-db": "cli.js"
+      },
+      "peerDependencies": {
+        "browserslist": ">= 4.21.0"
+      }
+    },
+    "node_modules/use-sync-external-store": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/use-sync-external-store/-/use-sync-external-store-1.5.0.tgz",
+      "integrity": "sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A==",
+      "license": "MIT",
+      "peerDependencies": {
+        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
+      }
+    },
+    "node_modules/v8-to-istanbul": {
+      "version": "9.3.0",
+      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.3.0.tgz",
+      "integrity": "sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "@jridgewell/trace-mapping": "^0.3.12",
+        "@types/istanbul-lib-coverage": "^2.0.1",
+        "convert-source-map": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=10.12.0"
+      }
+    },
+    "node_modules/w3c-xmlserializer": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/w3c-xmlserializer/-/w3c-xmlserializer-5.0.0.tgz",
+      "integrity": "sha512-o8qghlI8NZHU1lLPrpi2+Uq7abh4GGPpYANlalzWxyWteJOCsr/P+oPBA49TOLu5FTZO4d3F9MnWJfiMo4BkmA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "xml-name-validator": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/walker": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
+      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "makeerror": "1.0.12"
+      }
+    },
+    "node_modules/webidl-conversions": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
+      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/whatwg-encoding": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/whatwg-encoding/-/whatwg-encoding-3.1.1.tgz",
+      "integrity": "sha512-6qN4hJdMwfYBtE3YBTTHhoeuUrDBPZmbQaxWAqSALV/MeEnR5z1xd8UKud2RAkFoPkmB+hli1TZSnyi84xz1vQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "iconv-lite": "0.6.3"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/whatwg-mimetype": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-4.0.0.tgz",
+      "integrity": "sha512-QaKxh0eNIi2mE9p2vEdzfagOKHCcj1pJ56EEHGQOVxp8r9/iszLUUV7v89x9O1p/T+NlTM5W7jW6+cz4Fq1YVg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/whatwg-url": {
+      "version": "14.2.0",
+      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-14.2.0.tgz",
+      "integrity": "sha512-De72GdQZzNTUBBChsXueQUnPKDkg/5A5zp7pFDuQAj5UFoENpiACU0wlCvzpAGnTkj++ihpKwKyYewn/XNUbKw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "tr46": "^5.1.0",
+        "webidl-conversions": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/which": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "isexe": "^2.0.0"
+      },
+      "bin": {
+        "node-which": "bin/node-which"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/which-boxed-primitive": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
+      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-bigint": "^1.1.0",
+        "is-boolean-object": "^1.2.1",
+        "is-number-object": "^1.1.1",
+        "is-string": "^1.1.1",
+        "is-symbol": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/which-collection": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
+      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-map": "^2.0.3",
+        "is-set": "^2.0.3",
+        "is-weakmap": "^2.0.2",
+        "is-weakset": "^2.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/which-typed-array": {
+      "version": "1.1.19",
+      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
+      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "available-typed-arrays": "^1.0.7",
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.4",
+        "for-each": "^0.3.5",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/wrap-ansi": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
+      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/wrappy": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
+      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/write-file-atomic": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
+      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "imurmurhash": "^0.1.4",
+        "signal-exit": "^3.0.7"
+      },
+      "engines": {
+        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
+      }
+    },
+    "node_modules/ws": {
+      "version": "8.18.3",
+      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
+      "integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10.0.0"
+      },
+      "peerDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": ">=5.0.2"
+      },
+      "peerDependenciesMeta": {
+        "bufferutil": {
+          "optional": true
+        },
+        "utf-8-validate": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/xml-name-validator": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-5.0.0.tgz",
+      "integrity": "sha512-EvGK8EJ3DhaHfbRlETOWAS5pO9MZITeauHKJyb8wyajUfQUenkIg2MvLDTZ4T/TgIcm3HU0TFBgWWboAZ30UHg==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/xmlchars": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/xmlchars/-/xmlchars-2.2.0.tgz",
+      "integrity": "sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/y18n": {
+      "version": "5.0.8",
+      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
+      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
+      "dev": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/yallist": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-5.0.0.tgz",
+      "integrity": "sha512-YgvUTfwqyc7UXVMrB+SImsVYSmTS8X/tSrtdNZMImM+n7+QTriRXyXim0mBrTXNeqzVF0KWGgHPeiyViFFrNDw==",
+      "dev": true,
+      "license": "BlueOak-1.0.0",
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/yargs": {
+      "version": "17.7.2",
+      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
+      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "cliui": "^8.0.1",
+        "escalade": "^3.1.1",
+        "get-caller-file": "^2.0.5",
+        "require-directory": "^2.1.1",
+        "string-width": "^4.2.3",
+        "y18n": "^5.0.5",
+        "yargs-parser": "^21.1.1"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/yargs-parser": {
+      "version": "21.1.1",
+      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
+      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
+      "dev": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/yocto-queue": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
+      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/zustand": {
+      "version": "4.5.7",
+      "resolved": "https://registry.npmjs.org/zustand/-/zustand-4.5.7.tgz",
+      "integrity": "sha512-CHOUy7mu3lbD6o6LJLfllpjkzhHXSBlX8B9+qPddUsIfeF5S/UZ5q0kmCsnRqT1UHFQZchNFDDzMbQsuesHWlw==",
+      "license": "MIT",
+      "dependencies": {
+        "use-sync-external-store": "^1.2.2"
+      },
+      "engines": {
+        "node": ">=12.7.0"
+      },
+      "peerDependencies": {
+        "@types/react": ">=16.8",
+        "immer": ">=9.0.6",
+        "react": ">=16.8"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "immer": {
+          "optional": true
+        },
+        "react": {
+          "optional": true
+        }
+      }
+    }
+  }
+}
diff --git a/frontend/package.json b/frontend/package.json
new file mode 100644
index 0000000000000000000000000000000000000000..bc8cdf0a2d1f9c095c248e4d9cd75f69e9383e86
--- /dev/null
+++ b/frontend/package.json
@@ -0,0 +1,57 @@
+{
+  "name": "frontend",
+  "version": "0.1.0",
+  "private": true,
+  "scripts": {
+    "dev": "next dev --turbopack",
+    "build": "next build",
+    "start": "next start",
+    "lint": "next lint",
+    "test": "jest",
+    "test:e2e": "playwright test"
+  },
+  "dependencies": {
+    "chart.js": "^4.4.0",
+    "clsx": "^2.1.1",
+    "next": "15.3.4",
+    "react": "^19.0.0",
+    "react-chartjs-2": "^5.2.0",
+    "react-dom": "^19.0.0",
+    "zustand": "^4.4.1",
+    "swr": "^2.2.0"
+  },
+  "devDependencies": {
+    "@tailwindcss/postcss": "^4",
+    "@testing-library/jest-dom": "^6.1.5",
+    "@testing-library/react": "^14.1.2",
+    "@types/node": "^20",
+    "@types/react": "^19",
+    "@types/react-dom": "^19",
+    "jest": "^29.7.0",
+    "jest-environment-jsdom": "^30.0.4",
+    "react-test-renderer": "^19.0.0",
+    "tailwindcss": "^4",
+    "ts-jest": "^29.1.1",
+    "typescript": "^5",
+    "@playwright/test": "^1.41.2"
+  },
+  "jest": {
+    "preset": "ts-jest/presets/js-with-ts-esm",
+    "testEnvironment": "jsdom",
+    "setupFilesAfterEnv": [
+      "<rootDir>/jest.setup.ts"
+    ],
+    "transform": {
+      "^.+\\.(t|j)sx?$": [
+        "ts-jest",
+        {
+          "tsconfig": "tsconfig.json",
+          "useESM": true
+        }
+      ]
+    },
+    "testPathIgnorePatterns": [
+      "<rootDir>/e2e/"
+    ]
+  }
+}
diff --git a/frontend/playwright.config.ts b/frontend/playwright.config.ts
new file mode 100644
index 0000000000000000000000000000000000000000..60aaada51db042924ce4dd6645c18b6473f5c93f
--- /dev/null
+++ b/frontend/playwright.config.ts
@@ -0,0 +1,11 @@
+import { defineConfig } from '@playwright/test';
+
+export default defineConfig({
+  testDir: './e2e',
+  webServer: {
+    command: 'npm run start',
+    url: 'http://localhost:3000',
+    reuseExistingServer: true,
+    cwd: './frontend',
+  },
+});
diff --git a/frontend/postcss.config.mjs b/frontend/postcss.config.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..c7bcb4b1ee14cd5e25078c2c934529afdd2a7df9
--- /dev/null
+++ b/frontend/postcss.config.mjs
@@ -0,0 +1,5 @@
+const config = {
+  plugins: ["@tailwindcss/postcss"],
+};
+
+export default config;
diff --git a/frontend/public/file.svg b/frontend/public/file.svg
new file mode 100644
index 0000000000000000000000000000000000000000..004145cddf3f9db91b57b9cb596683c8eb420862
--- /dev/null
+++ b/frontend/public/file.svg
@@ -0,0 +1 @@
+<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
\ No newline at end of file
diff --git a/frontend/public/globe.svg b/frontend/public/globe.svg
new file mode 100644
index 0000000000000000000000000000000000000000..567f17b0d7c7fb662c16d4357dd74830caf2dccb
--- /dev/null
+++ b/frontend/public/globe.svg
@@ -0,0 +1 @@
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
\ No newline at end of file
diff --git a/frontend/public/next.svg b/frontend/public/next.svg
new file mode 100644
index 0000000000000000000000000000000000000000..5174b28c565c285e3e312ec5178be64fbeca8398
--- /dev/null
+++ b/frontend/public/next.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
\ No newline at end of file
diff --git a/frontend/public/vercel.svg b/frontend/public/vercel.svg
new file mode 100644
index 0000000000000000000000000000000000000000..77053960334e2e34dc584dea8019925c3b4ccca9
--- /dev/null
+++ b/frontend/public/vercel.svg
@@ -0,0 +1 @@
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
\ No newline at end of file
diff --git a/frontend/public/window.svg b/frontend/public/window.svg
new file mode 100644
index 0000000000000000000000000000000000000000..b2b2a44f6ebc70c450043c05a002e7a93ba5d651
--- /dev/null
+++ b/frontend/public/window.svg
@@ -0,0 +1 @@
+<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
\ No newline at end of file
diff --git a/frontend/tsconfig.json b/frontend/tsconfig.json
new file mode 100644
index 0000000000000000000000000000000000000000..42cccaebd46a3b58ce090bdddadaa6eb510fd2a3
--- /dev/null
+++ b/frontend/tsconfig.json
@@ -0,0 +1,27 @@
+{
+  "compilerOptions": {
+    "target": "ES2017",
+    "lib": ["dom", "dom.iterable", "esnext"],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "bundler",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "paths": {
+      "@/*": ["./*"]
+    }
+  },
+  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
+  "exclude": ["node_modules", "jest.setup.ts"]
+}
diff --git a/improvements.md b/improvements.md
new file mode 100644
index 0000000000000000000000000000000000000000..3ef16b93ab499ce7ce2ff9fcb5933959cd264060
--- /dev/null
+++ b/improvements.md
@@ -0,0 +1,23 @@
+# Improvement Tracker
+
+This file lists all planned improvements and fixes based on initial code review.
+Completed items are checked.
+
+- [x] Fix webhook secret to use header instead of query param
+- [x] Add database indexes for foreign key columns
+- [x] Improve backend error logging with `tracing`
+- [x] Require `JWT_SECRET` env var at startup
+- [x] Add basic backend and frontend tests
+
+## Phase 2: Refactor & Decouple
+- [x] Replace shell commands with `git2` and `bollard::Docker::build_image`
+- [x] Replace Nginx/Certbot shelling with a safer approach
+- [x] Introduce state management on the frontend (e.g. Zustand) and SSE for status
+- [x] Break down monolithic components (e.g. `ServerCard` etc.)
+
+## Phase 3: Mature & Scale
+- [x] Decouple control plane and worker using a job queue
+- [x] Adopt a centralized secrets manager
+- [x] Add comprehensive test coverage and CI pipeline
+- [x] Package CLI tools for distribution
+ - [x] Implement RBAC roles and server quotas
diff --git a/progress.md b/progress.md
new file mode 100644
index 0000000000000000000000000000000000000000..84fd2b038d897b91c951c9975185329401ddea98
--- /dev/null
+++ b/progress.md
@@ -0,0 +1,647 @@
+# Progress Log
+
+This document tracks development progress and high level notes from the planning materials in `README.md`.
+
+## 2024-05-04
+- Created `backend` Rust project using `cargo init`.
+- Added dependencies (`axum`, `tokio`, `serde`, `sqlx`, etc.) and basic HTTP server at `/` returning placeholder text.
+- Generated `frontend` Next.js project with TypeScript and Tailwind CSS using `create-next-app`.
+- Added repository level `.gitignore` to exclude build artifacts and environment files.
+- Setup progress log.
+
+### Next Steps
+- Implement initial database migrations using `sqlx` or Diesel.
+- Set up authentication endpoints (register/login) in the backend.
+- Flesh out frontend pages for login and registration.
+
+## 2025-07-02
+- Added SQL migration file defining initial PostgreSQL schema.
+- Implemented database connection pool and migration execution on startup.
+- Added user registration and login endpoints with password hashing and JWTs.
+- Introduced `AuthUser` extractor for protected routes.
+- Updated Cargo dependencies with chrono and async-trait.
+
+### Next Steps
+- Add endpoints for MCP server management and container launch.
+- Create frontend pages for registration and login forms.
+
+## 2025-07-03
+- Implemented basic MCP server management API:
+  - `GET /api/servers` lists servers for the authenticated user.
+  - `POST /api/servers` creates a new server entry with a generated API key.
+  - `POST /api/servers/:id/start` marks a server as running (placeholder for Docker launch).
+- Added new `servers` module and integrated routes in `main.rs`.
+- Extended Cargo dependencies with `bollard` for future Docker integration.
+
+### Next Steps
+- Flesh out Docker container management using `bollard`.
+- Add frontend pages to view and create MCP servers.
+
+## 2025-07-04
+- Implemented asynchronous Docker container launch using `bollard`:
+  - Added `docker.rs` with `spawn_server_task` to create and start containers.
+  - Updated `start_server` handler to invoke this task and transition status.
+  - Enhanced `create_server` to return server info and immediately launch the container.
+- Extended `sqlx` features to support `chrono` types.
+- Added simple Next.js pages to list existing servers and create new ones.
+
+### Next Steps
+- Wire frontend pages into navigation.
+- Add error handling and container stop/delete endpoints.
+
+## 2025-07-05
+- Added stop and delete functionality for MCP servers:
+  - New `stop_server_task` and `delete_server_task` in `docker.rs` to control containers.
+  - API routes `/api/servers/:id/stop` and `DELETE /api/servers/:id` wired into Axum.
+- Enhanced frontend with a navigation bar linking to all pages.
+- Installed `rustfmt` for consistent formatting.
+
+### Next Steps
+- Surface container status updates in the frontend.
+- Improve form error handling and authentication flow.
+
+## 2025-07-06
+- Surfaced container status on the frontend with a polling server list and start/stop/delete actions.
+- Added basic error handling and redirects for login, registration, and new server forms.
+- Updated pages to display API error messages.
+
+### Next Steps
+- Persist user session state in the frontend.
+- Display logs or detailed status for each server.
+
+## 2025-07-07
+- Added `/api/me` and `/api/logout` endpoints for retrieving current user info and clearing the auth cookie.
+- Implemented `/api/servers/:id/logs` to fetch recent container logs via Docker.
+- Created a React session provider to load the current user and expose login state across the app.
+- Updated navigation to show logout with the user's email when authenticated.
+- Servers page now offers a "Logs" button to display container output.
+
+### Next Steps
+- Persist logs to the database for historical viewing.
+- Polish frontend styling and add loading indicators.
+## 2025-07-08
+- Added `server_logs` table and migration to persist container logs.
+- Logs endpoint now saves output to the database.
+- New `/api/servers/:id/logs/history` returns recent stored logs.
+
+### Next Steps
+- Improve frontend to show log history and live updates.
+- Enhance UI polish and add loading indicators.
+## 2025-07-09
+- Added ability to specify a custom Docker image when creating a server ("bring your own MCP")
+- Updated Docker helper to read `config.image` for Custom servers
+- Extended new server form to support the custom image option
+- Server list now fetches stored log history and displays timestamps
+
+### Next Steps
+- Stream live logs via SSE for real-time updates
+- Add loading indicators and improved styling
+
+## 2025-07-10
+- Implemented SSE endpoint `/api/servers/:id/logs/stream` for live container logs.
+- Docker module spawns log streaming tasks that persist output.
+- Frontend connects via EventSource to show real-time logs with a close option.
+
+### Next Steps
+- Polish UI styling and add loading indicators.
+## 2025-07-11
+- Added Spinner component for loading indicators.
+- Updated login, registration, and new server forms to disable submit buttons and show spinner during requests.
+- Enhanced servers page with loading state, action spinners on control buttons, and a top-level spinner while fetching data.
+- Documented these UI improvements.
+
+### Next Steps
+- Further refine layout and error messaging.
+
+
+## 2025-07-12
+- Created reusable `Alert` component for displaying success and error messages.
+- Added page headings and improved form layout across login, registration and new server pages.
+- Enhanced servers page with better error handling for start/stop/delete actions and cleaner log viewing controls.
+
+### Next Steps
+- Finish UI polish and begin integrating metrics collection.
+
+## 2025-07-13
+- Added usage metrics endpoints to backend and recorded start/stop/delete events
+- Frontend can now view metrics per server
+- Minor layout tweaks and centered main content
+
+### Next Steps
+- Stream metrics live via SSE and display charts
+
+## 2025-07-14
+- Implemented broadcast channels for metrics and new `/api/servers/:id/metrics/stream` endpoint
+- Frontend now opens an EventSource to receive live metrics updates
+- Documented changes and prepared for chart visualization
+
+### Next Steps
+- Visualize metrics with simple charts
+
+## 2025-07-15
+- Added `react-chartjs-2` and `chart.js` to the frontend for metrics visualization.
+- Created `MetricsChart` component rendering a line chart of events.
+- Updated servers page to display charts when viewing metrics with live SSE updates.
+
+### Next Steps
+- Refine chart styles and allow filtering by event type.
+
+## 2025-07-16
+- Polished metrics charts with a darker theme and legend at the bottom.
+- Added filter checkboxes so users can toggle event types on and off.
+- MetricsChart now shows separate lines for each event type using distinct colors.
+
+### Next Steps
+- Expand documentation pages and continue refining the frontend layout.
+
+## 2025-07-17
+- Created reusable `Button`, `Hero`, and `Section` components for a more expressive UI.
+- Added Docs and Blog pages describing MCP Host features and placeholder articles.
+- Revised the landing page to use the new components with clear calls to action.
+- Navigation bar now links to Docs and Blog.
+- Updated frontend dependencies to include `clsx` for styling utilities.
+
+### Next Steps
+- Flesh out documentation content and expand blog posts.
+- Continue polishing components and responsive design.
+
+## 2025-07-18
+- Extended server creation form with support for environment variable pairs.
+- Docker helper now ignores the `image` field when injecting config values as
+  `CFG_` environment variables.
+- Documentation updated with details on passing custom configuration via the UI.
+
+### Next Steps
+- Expand the BYO MCP guide with more examples.
+- Polish dashboard layout and styling.
+
+## 2025-07-19
+- Expanded the documentation with a richer BYO MCP guide including sample
+  environment variables and image hints.
+- Refined the servers dashboard with card-style layout and rounded action
+  buttons for a cleaner look.
+
+### Next Steps
+- Continue improving overall styling and add more blog content.
+
+## 2025-07-20
+- Introduced prebuilt service integrations with a new `service_integrations` table.
+- Backend exposes `/api/servers/:id/services` to list and create service attachments.
+- Docker task now injects `REDIS_URL` or `S3_BUCKET` variables based on attached services.
+- Added Next.js page to manage services per server and linked it from the dashboard.
+- Documentation updated with a "Prebuilt Service Integrations" section.
+
+### Next Steps
+- Support editing and removing integrations.
+- Explore automatic deployments from git repositories.
+
+## 2025-07-21
+- Added API endpoints to update and delete service integrations.
+- Services page now lists each integration with Edit and Delete actions.
+- Updated docs to mention editing and removing integrations.
+
+### Next Steps
+- Investigate git-based deployments for custom MCP servers.
+
+## 2025-07-22
+- Implemented experimental git-based deployment flow. `spawn_server_task` now
+  clones a provided `repo_url`, builds a Docker image, and runs it for Custom
+  servers.
+- Server creation page accepts a Git repository URL in addition to a custom
+  image name.
+- Documentation updated to explain the new option under "Bring Your Own MCP".
+- Added `tempfile` dependency to manage build workspaces.
+
+### Next Steps
+- Harden build logic and add progress feedback during image builds.
+
+## 2025-07-23
+- Improved git-based deployments with progress tracking:
+  - `spawn_server_task` now updates status to `cloning` and `building` while preparing images
+  - progress messages are saved to `server_logs` for streaming to the UI
+  - container stop/delete tasks also log actions
+- Docs note that build status and logs appear during BYO MCP deployments
+
+### Next Steps
+- Explore security around build contexts and caching
+
+## 2025-07-24
+- Secured git-based builds by using `docker build --pull --no-cache` and
+  cleaning temporary directories after each build.
+- Updated BYO MCP documentation with a note about fresh build flags and
+  temporary workspaces.
+- Logged progress messages like "Cleaning up" so users know when build
+  directories are removed.
+
+### Next Steps
+- Investigate automatic deployment triggers from git pushes and support for
+  branch selection.
+
+## 2025-07-25
+- Added optional `branch` setting for git-based deployments and updated the
+  Docker task to clone the specified branch.
+- New `redeploy_server` endpoint allows triggering a rebuild via API, removing
+  any existing container before launching the new image.
+- Server dashboard includes a Redeploy button and new server form lets users
+  specify the repository branch.
+- Documentation updated with branch and webhook notes for BYO MCP.
+
+### Next Steps
+- Test webhook-based redeploys and expand CI integration examples.
+
+## 2025-07-26
+- Added `webhook_secret` column and generated a secret when creating servers.
+- New `/api/servers/:id/webhook` endpoint allows unauthenticated redeploys when the secret matches.
+- Docs updated to show how to call the webhook endpoint.
+- Logged progress toward automated CI triggers.
+
+### Next Steps
+- Integrate GitHub webhooks for automatic redeploys.
+
+## 2025-07-27
+- Implemented `/api/servers/:id/github` endpoint that verifies HMAC signatures
+  from GitHub push webhooks and triggers a redeploy when valid.
+- Added `hmac`, `sha2`, and `hex` dependencies for signature checks.
+- Docs now explain configuring GitHub webhooks to hit this endpoint.
+- Updated BYO MCP guide with a bullet about the new GitHub integration.
+
+### Next Steps
+- Test webhook delivery end-to-end and continue refining the UI.
+
+## 2025-07-28
+- Introduced `custom_domains` table to map external domains to MCP servers.
+- Added new backend module `domains` with list/create/delete endpoints.
+- Router now exposes `/api/servers/:id/domains` and `/api/servers/:id/domains/:domain_id`.
+- Created frontend management page for custom domains and link from servers dashboard.
+- Documentation mentions custom domains for BYO MCP deployments.
+
+### Next Steps
+- Integrate domain verification and automated HTTPS provisioning.
+## 2025-07-29
+- Introduced secret management:
+  - New `server_secrets` table with encrypted values (pgcrypto)
+  - API endpoints `/api/servers/:id/secrets` for CRUD operations
+  - Docker tasks inject secrets as environment variables when launching containers
+- Updated README with a bullet about secret management
+- Noted next steps for proxy controller and automated HTTPS
+
+## 2025-07-30
+- Implemented simple `proxy` module generating Nginx configs per server
+- Domain create/delete triggers proxy rebuild so custom URLs work immediately
+- Docker tasks refresh proxy when servers start, stop, or are deleted
+- README mentions the new reverse proxy controller
+
+### Next Steps
+- Automate TLS certificates and explore build pipeline for custom code
+
+## 2025-07-31
+- Added automatic TLS provisioning. `proxy` now runs `certbot` for each domain
+  when proxy configs are rebuilt.
+- Set `CERTBOT_EMAIL` environment variable so certificates can be issued.
+- `.gitignore` now excludes generated `proxy_conf/` files.
+- Documented automatic TLS in README under infrastructure bullets.
+
+### Next Steps
+- Prototype build orchestrator for Dockerfile parsing and custom language support.
+
+## 2025-08-01
+- Created a new `build` module with `build_from_git` helper that clones a
+  repository, parses its Dockerfile for exposed ports, and builds the image.
+- `docker` module now delegates Git builds to this helper so custom MCP servers
+  are assembled consistently.
+- README updated to mention source builds and the docs detail Dockerfile
+  parsing warnings.
+
+### Next Steps
+- Expand the build pipeline with language-specific builders and push images to a registry.
+
+## 2025-08-02
+- Added automatic Dockerfile generation when building from git sources.
+- Build orchestrator detects Node, Python, or Rust projects and creates a simple Dockerfile if none exists.
+- Images are optionally pushed to a registry when the `REGISTRY` env var is set.
+- Documentation updated with details on the language builders and registry support.
+
+### Next Steps
+- Polish BYO MCP instructions and focus on plug-and-play usage of custom servers.
+
+
+## 2025-08-03
+- Introduced basic file storage module with new `server_files` table.
+- Added API endpoints for listing, uploading, downloading, and deleting files.
+- Backend stores files under `storage/<server_id>/` and records metadata in the database.
+- Updated `.gitignore` to exclude the storage directory.
+- Documented file storage API in the README.
+
+### Next Steps
+- Surface file uploads in the frontend and allow MCP servers to persist artifacts.
+
+## 2025-08-04
+- Added Files page in the frontend to upload, download and delete persistent blobs per server.
+- Servers list now links to this new page for easy access.
+- Updated README bullets to mention BYO custom images and the file management UI.
+
+### Next Steps
+- Mount uploaded files into running containers so MCP servers can read and write data.
+
+## 2025-08-05
+- Mounted each server's `storage/<id>` directory into its container at `/data` so uploads are accessible at runtime.
+- Storage directories are created automatically and removed when servers are deleted.
+- README notes that uploaded files appear inside containers under `/data`.
+
+### Next Steps
+- Explore GPU inference support and dynamic scaling options.
+
+## 2025-08-06
+- Added GPU support: servers can request Nvidia GPUs via a new `use_gpu` flag.
+- Updated Docker launcher to pass `device_requests` when GPUs are enabled.
+- Frontend form includes a GPU checkbox and the servers list shows a GPU badge.
+- README and docs mention GPU-enabled deployments.
+
+### Next Steps
+- Investigate auto-scaling policies and runtime resource limits.
+
+## 2025-08-07
+- Implemented automatic container monitoring and restart logic.
+- New `monitor_server_task` watches each container and triggers a rebuild if it
+  exits unexpectedly, recording a `restart` metric.
+- Documentation now notes crash restarts and docs page mentions the feature.
+
+### Next Steps
+- Explore more advanced scaling strategies and resource limits.
+
+## 2025-08-08
+- Added `/api/servers/:id/invoke` endpoint to proxy JSON requests to running MCP containers.
+- Created Invoke page in the dashboard so users can test their deployments.
+- Updated docs and README with instructions for the new invoke functionality.
+
+### Next Steps
+- Polish MCP interaction flows and continue improving the BYO workflow.
+
+## 2025-08-09
+- Added `manifest` column and migration to store MCP metadata.
+- Containers fetch `/.well-known/mcp.json` after start and save it for clients.
+- New `/api/servers/:id/manifest` route and dashboard page show the stored manifest.
+- Documentation lists the manifest handshake for plug-and-play MCPs.
+
+### Next Steps
+- Experiment with automatic agent configuration using saved manifests.
+
+## 2025-08-10
+- Created `server_capabilities` table and migration.
+- Container startup now parses `capabilities` from the MCP manifest and saves them.
+- Exposed `/api/servers/:id/capabilities` endpoint and dashboard page.
+- Documentation updated describing automatic capability sync.
+
+### Next Steps
+- Investigate using saved capabilities for auto-generated client configs.
+
+## 2025-08-11
+- Added `/api/servers/:id/client-config` endpoint returning invoke URL, API key,
+  and stored manifest so agents can connect with zero setup.
+- Documentation updated describing the new client configuration endpoint.
+
+### Next Steps
+- Prototype tooling that consumes this endpoint to generate ready-made SDK configs.
+## 2025-08-12
+- Added a `get_config.py` helper script under `scripts/`.
+- The script fetches `/api/servers/:id/client-config` and writes the response to a JSON file for easy SDK setup.
+- README notes how to use the script so agents can retrieve invoke URLs and API keys automatically.
+
+### Next Steps
+- Experiment with generating language-specific SDK stubs from the saved manifest.
+## 2025-08-13
+- Introduced gen_python_sdk.py script to generate a Python client from the stored manifest.
+- README documents how to use the script with the client-config endpoint.
+### Next Steps
+- Extend the generator to output TypeScript or other languages.
+## 2025-08-14
+- Added gen_ts_sdk.py script to generate a TypeScript client from the stored MCP manifest.
+- README documents using the new script alongside the Python generator for plug-and-play SDKs.
+
+### Next Steps
+- Explore packaging these generators into a CLI tool for easier distribution.
+
+## 2025-08-15
+- Added `mcp_cli.py` which consolidates config fetching and SDK generation into one command line tool.
+- README documents using the CLI for quick plug-and-play MCP client setup.
+
+### Next Steps
+- Package the CLI and SDK generators for distribution via PyPI and npm.
+## 2025-08-16
+- Created `improvements.md` to track technical debt and planned fixes.
+- Implemented secure webhook authentication via `X-Webhook-Secret` header.
+- Added migration `0011_add_indexes.sql` to create indexes on foreign keys.
+
+### Next Steps
+- Refactor error handling to log underlying errors via `tracing` macros.
+- Begin adding unit tests for authentication utilities.
+
+## 2025-08-17
+- Improved error handling across backend modules to log underlying errors using `tracing::error!`.
+- Updated improvements tracker to mark logging task complete.
+
+### Next Steps
+- Begin adding unit tests for authentication utilities.
+## 2025-08-18
+- Added basic backend unit tests for AuthUser extractor and frontend Jest test for Button component.
+- Replaced several `unwrap` calls with `expect` or proper error handling.
+- Updated server metrics SSE to log serialization errors.
+- Marked testing task complete in improvement tracker.
+
+
+## 2025-07-03
+- Replaced git and docker shell commands with git2 and bollard build_image in build helper.
+- Updated dependencies and marked item complete in improvements tracker.
+
+## 2025-07-03
+- Introduced config module requiring JWT_SECRET at startup.
+- Replaced runtime environment lookups with static secret reference.
+- Removed unused imports and structs causing warnings.
+- Updated README with note about mandatory JWT_SECRET.
+
+
+## 2025-08-19
+- Replaced certbot and nginx shell calls with internal ACME client and signal-based reload.
+- Updated proxy module to use acme2 and nix crates.
+- README documents new embedded TLS provisioning.
+- Marked proxy improvement complete.
+
+## 2025-08-20
+- Introduced Zustand store and SSE stream for server status
+- Added ServerCard component to simplify server list
+- Backend broadcasts status changes over SSE
+- Marked frontend state management tasks complete
+
+## 2025-08-21
+- Added in-memory job queue to decouple API from Docker tasks
+- Server management routes now send jobs to worker thread
+- Fixed Zustand import warning
+
+
+## 2025-08-22
+- Integrated optional HashiCorp Vault client for secret storage
+- Secrets API stores paths in Vault when `VAULT_ADDR` and `VAULT_TOKEN` are set
+- Docker helper fetches secrets from Vault at runtime
+- Marked centralized secrets manager improvement complete
+
+## 2025-08-23
+- Added basic CI workflow running backend and frontend tests
+- Added unit tests for the build helper and Zustand store
+- Marked comprehensive test coverage item complete in improvement tracker
+
+## 2025-08-24
+- Added Python packaging in `cli/` so the helper CLI can be installed via `pip install .`
+- README documents `mcp-cli` installation instructions
+- Marked packaging task complete in improvements tracker
+
+## 2025-08-25
+- Created `refinement.md` outlining the next phases of work
+- Began refactoring backend by moving API routes into a new module
+## 2025-08-26\n- Added AppError with IntoResponse for consistent errors\n- Updated auth and servers modules to use AppResult\n- Introduced SWR-based useApi hook and refactored services page\n- Enhanced CI workflow with separate backend and frontend jobs\n
+## 2025-08-27
+- Isolated proxy functionality into separate `proxy_controller` binary that watches config directory and handles TLS and Nginx reloads
+- Updated `proxy.rs` to only write configs
+- Added new dependency `anyhow`
+
+### 2025-08-28
+- Enabled structured JSON logging with `tracing_subscriber` and environment filter
+- Exposed Prometheus metrics via `/metrics`
+- Added first integration test for the root route
+
+## 2025-08-29\n- Added integration test for metrics endpoint\n- Introduced Playwright with a basic home page e2e test\n- CI workflow runs Playwright tests after installing browsers\n
+## 2025-08-30
+- Prepared CLI for PyPI distribution by expanding setup.py metadata
+- README updated with installation instructions from PyPI
+
+
+## 2025-08-31
+- Introduced a `ContainerRuntime` trait with a `DockerRuntime` implementation
+- Job worker and server handlers now use this trait, laying groundwork for future Kubernetes support
+## 2025-09-01
+- Added persistent job queue using database table and updated worker to replay queued jobs
+- Server handlers now enqueue jobs in the database
+
+## 2025-09-02
+- Introduced simple RBAC with `role` column and per-user `server_quota`
+- Admins can list all servers while regular users are limited to their own
+- Server creation checks the quota and rejects when exceeded
+
+## 2025-09-03
+- Added `CONTAINER_RUNTIME` config to allow switching container backends
+- Currently only Docker is implemented; selecting `kubernetes` logs a warning
+- Documented the variable in the README
+
+## 2025-09-04
+- Introduced a stub `KubernetesRuntime` using the `kube` crate
+- `main` now initializes this runtime when `CONTAINER_RUNTIME=kubernetes`,
+  falling back to Docker on failure
+- Updated README to document basic Kubernetes support
+## 2025-09-05
+- Implemented full Kubernetes runtime: pods are created for servers and logs streamed via API
+
+## 2025-09-06
+- Added `K8S_NAMESPACE` configuration so Kubernetes runtime can target custom namespaces
+- Updated docs with the new variable and refactored runtime to use it
+
+## 2025-09-07
+- Added `K8S_SERVICE_ACCOUNT` configuration so pods use a specific service account
+- Updated Kubernetes runtime to set `serviceAccountName`
+- Documented the variable in the README
+
+## 2025-09-08
+- Containers now honor `cpu_limit` and `memory_limit` in server config for Docker and Kubernetes runtimes
+- Documented the new limits in the README
+
+## 2025-09-09
+- Added regression test ensuring backend fails when JWT_SECRET is unset
+## 2025-09-10
+- Drafted vision for the "Context Cloud" with marketplace, managed vector DBs, ingestion pipelines, edge deployments and other advanced features
+- Added these initiatives to refinement.md for future implementation
+## 2025-09-11
+- Introduced marketplace endpoint listing official MCP images for one-click deployment
+
+## 2025-09-12
+- Added `create` command to `mcp-cli` for scaffolding a Python FastAPI agent preconfigured with a selected MCP server
+- Updated README with example usage of the new CLI command
+## 2025-09-13
+- Added "dev" command to mcp-cli for running a local proxy to an MCP server
+- README documents using the dev command
+
+## 2025-09-14
+- Added managed vector database support with new vector_dbs table and Docker containers
+- `/api/vector-dbs` endpoints create and delete Chroma instances
+- README documents vector DB capability
+
+## 2025-09-15
+- Added data ingestion pipeline support with ingestion_jobs table and worker
+- New /api/ingestion-jobs endpoints allow creating and deleting jobs
+
+## 2025-09-16
+- Added workflows feature allowing chaining servers together.
+- New /api/workflows endpoints support creation, deletion, and invocation.
+
+## 2025-09-17
+- Added invocation tracing storing request and response pairs.
+- New /api/servers/:id/invocations endpoint lists recent traces.
+
+
+## 2025-09-18
+- Added evaluation feature allowing tests to be created and run against servers.
+- Results stored with similarity score using Jaro-Winkler metric.
+## 2025-09-19
+- Introduced organizations with membership roles.
+- Added routes `/api/orgs` for creation and listing, and `/api/orgs/:id/members` for inviting users.
+- Servers can optionally belong to an organization via `organization_id`.
+
+## 2025-09-20
+- Improved invocation logging with error handling when writes fail
+- Completed Phase 1 tasks from refinement plan
+## 2025-09-21
+- Replaced header parsing unwraps with expect in auth module for robustness
+
+\n## 2025-09-22\n- Added evaluation management page allowing tests to be created and run from the dashboard.\n- Button component supports disabled state and custom classes.\n- Progress logged for frontend integration of evaluation features.
+
+## 2025-09-23
+- Drafted design vision outlining UI goals
+- Added Card component and new Marketplace and Vector DB pages
+- Navigation links to Marketplace and Vector DBs
+
+
+## 2025-09-24
+- Added workflows API routes and frontend page to create, run, and delete workflows
+- Navigation updated with Workflows link
+## 2025-09-25
+- Added Organizations page and API integration for creating and listing orgs
+- Navigation links to Orgs for quick access
+- Updated global styles to use Geist font and adjusted Nav colors
+- Hero section now features an indigo gradient background for visual impact
+
+## 2025-09-26
+- Home page redesigned with feature cards and a global footer per design vision
+- Added FeatureCard and Footer components using Tailwind for consistent styling
+- Layout now includes the footer on all pages for better navigation
+
+## 2025-09-27
+- Implemented Input and Textarea components inspired by shadcn/ui for consistent form styling.
+- Updated login, registration, and new server pages to use these components with card-like form layout.
+- Documented design updates and next frontend work.
+
+## 2025-09-28
+- Added musikconnect metadata comments to reusable components for automated tooling.
+- Created components/README describing Button, Input, Card and other UI pieces.
+
+## 2025-09-29
+- Added Ingestion page to manage ingestion jobs using vector DBs
+- Navigation links to Ingestion for easy access
+- Documented ingestion page usage in folder README
+
+## 2025-09-30
+- Added evaluation scoreboard listing recent results across all servers via new /api/evaluations endpoint and UI page
+
+## 2025-10-01
+- Added server score summary endpoint and improved Evaluations page to rank servers by average score using Card component.
+
+## 2025-10-02
+- Added user profile page showing email, role, and server quota
+- `/api/me` now returns server_quota
+- Navigation links to Profile page when logged in
diff --git a/refinement.md b/refinement.md
new file mode 100644
index 0000000000000000000000000000000000000000..ad67d19dc8c49cc3e388f390b99a26ffe296541e
--- /dev/null
+++ b/refinement.md
@@ -0,0 +1,66 @@
+# Refinement Plan
+
+This document tracks the next phase of improvements following the comprehensive audit.
+
+## Phase 1 – Hardening & Immediate Refinements
+- [x] Modular routing: split the monolithic router in `main.rs` into a dedicated module.
+- [x] Structured error handling via a central `AppError` type with `IntoResponse` support.
+- [x] CI enhancements running clippy, fmt, lint and cargo audit.
+- [x] Frontend API hooks using SWR/TanStack Query.
+
+## Phase 2 – Production Readiness
+- [x] Proxy isolation: move Nginx/TLS management to a separate controller.
+### 2025-09-16
+- Implemented workflows to chain MCP servers with sequential invocation.
+
+### 2025-09-17
+- Implemented invocation tracing with new database table.
+- Added endpoint and UI page to review past invocations.
+
+### 2025-09-18
+- Added automated evaluation endpoints to create tests and run them against servers.
+- Results are stored with similarity scores for quality tracking.
+
+### 2025-09-19
+- Added basic organization support with new tables and API routes.
+- Servers may specify an `organization_id` during creation.
+
+### 2025-09-20
+- Improved invocation logging by reporting database errors
+- Marked Phase 1 items as complete
+\n### 2025-09-21
+- Replaced unsafe header unwraps with expect in auth module\n
+\n### 2025-09-22\n- Added frontend pages for evaluation tests and results, integrating new API endpoints.
+
+### 2025-09-23
+- Added design vision document and initial marketplace/vector DB pages using new Card component.
+
+### 2025-09-24
+- Implemented workflow management routes and UI page with Tailwind components
+### 2025-09-25
+- Added organizations management page utilizing existing API endpoints
+- Applied design vision updates: fonts now use Geist across the site and navigation adopts slate tones
+- Enhanced Hero component with gradient styling for a more modern landing page
+
+### 2025-09-26
+- Added FeatureCard and Footer components to implement design vision
+- Home page now highlights Marketplace, Vector DBs, and Workflows
+- Footer appears site-wide for consistent navigation
+
+### 2025-09-27
+- Introduced shadcn-inspired Input and Textarea components for improved form UX.
+- Login, register, and new server pages adopt a card layout with these components.
+
+
+### 2025-09-29
+- Added Ingestion page exposing ingestion job endpoints and vector DB selection
+- Navigation updated with Ingestion link for full feature coverage
+
+### 2025-09-30
+- Implemented evaluation scoreboard with new backend route and page
+
+### 2025-10-01
+- Added score summary endpoint returning per-server averages and updated the Evaluations page to display rankings
+
+### 2025-10-02
+- Added profile page using new server quota data from `/api/me`
diff --git a/scripts/gen_python_sdk.py b/scripts/gen_python_sdk.py
new file mode 100644
index 0000000000000000000000000000000000000000..487c229c3f357a34873368724577938b832b5752
--- /dev/null
+++ b/scripts/gen_python_sdk.py
@@ -0,0 +1,67 @@
+import argparse
+import json
+import sys
+from urllib.request import urlopen, Request
+
+TEMPLATE_HEADER = '''class MCPClient:
+    def __init__(self, invoke_url: str, api_key: str):
+        self.invoke_url = invoke_url.rstrip('/')
+        self.headers = {'Authorization': f'Bearer {api_key}', 'Content-Type': 'application/json'}
+
+    def _call(self, payload: dict):
+        data = json.dumps(payload).encode()
+        req = Request(self.invoke_url, data=data, headers=self.headers)
+        with urlopen(req) as resp:
+            return json.loads(resp.read())
+'''
+
+
+def fetch_config(host: str, server_id: str) -> dict:
+    url = f"{host.rstrip('/')}/api/servers/{server_id}/client-config"
+    with urlopen(url) as resp:
+        return json.loads(resp.read())
+
+
+def sanitize(name: str) -> str:
+    return name.lower().replace(' ', '_')
+
+
+def generate_sdk(cfg: dict) -> str:
+    manifest = cfg.get('manifest', {})
+    lines = [TEMPLATE_HEADER]
+    caps = manifest.get('capabilities', [])
+    for cap in caps:
+        cname = cap.get('name')
+        if not cname:
+            continue
+        method = sanitize(cname)
+        desc = cap.get('description', '')
+        lines.append(f"    def {method}(self, payload: dict) -> dict:")
+        if desc:
+            lines.append(f"        \"\"\"{desc}\"\"\"")
+        lines.append(f"        return self._call({{'capability': '{cname}', 'input': payload}})")
+        lines.append('')
+    return '\n'.join(lines)
+
+
+def main():
+    p = argparse.ArgumentParser(description='Generate Python SDK stub from MCP manifest')
+    p.add_argument('server_id', help='Server ID to fetch configuration for')
+    p.add_argument('--host', default='http://localhost:3000', help='Base URL of MCP Host')
+    p.add_argument('--output', default='mcp_client.py', help='Destination file name')
+    args = p.parse_args()
+
+    try:
+        cfg = fetch_config(args.host, args.server_id)
+    except Exception as e:
+        print(f'Error fetching configuration: {e}', file=sys.stderr)
+        sys.exit(1)
+
+    sdk_code = generate_sdk(cfg)
+    with open(args.output, 'w') as f:
+        f.write(sdk_code)
+    print(f'SDK written to {args.output}')
+
+
+if __name__ == '__main__':
+    main()
diff --git a/scripts/gen_ts_sdk.py b/scripts/gen_ts_sdk.py
new file mode 100644
index 0000000000000000000000000000000000000000..0d23f1c546a9424c1a0eed541a3c239ddb168b35
--- /dev/null
+++ b/scripts/gen_ts_sdk.py
@@ -0,0 +1,75 @@
+import argparse
+import json
+import sys
+from urllib.request import urlopen, Request
+
+TEMPLATE_HEADER = """export class MCPClient {
+    constructor(public invokeUrl: string, public apiKey: string) {}
+
+    private async call(payload: any): Promise<any> {
+        const res = await fetch(this.invokeUrl.replace(/\/$/, ''), {
+            method: 'POST',
+            headers: {
+                'Authorization': `Bearer ${this.apiKey}`,
+                'Content-Type': 'application/json'
+            },
+            body: JSON.stringify(payload)
+        });
+        if (!res.ok) {
+            throw new Error(`Request failed with ${res.status}`);
+        }
+        return res.json();
+    }
+"""
+
+TEMPLATE_FOOTER = """}
+"""
+
+def fetch_config(host: str, server_id: str) -> dict:
+    url = f"{host.rstrip('/')}/api/servers/{server_id}/client-config"
+    with urlopen(url) as resp:
+        return json.loads(resp.read())
+
+def sanitize(name: str) -> str:
+    return name.lower().replace(' ', '_')
+
+
+def generate_sdk(cfg: dict) -> str:
+    manifest = cfg.get('manifest', {})
+    lines = [TEMPLATE_HEADER]
+    caps = manifest.get('capabilities', [])
+    for cap in caps:
+        cname = cap.get('name')
+        if not cname:
+            continue
+        method = sanitize(cname)
+        desc = cap.get('description', '')
+        lines.append(f"    async {method}(payload: any): Promise<any> {{")
+        if desc:
+            lines.append(f"        // {desc}")
+        lines.append(f"        return this.call({{'capability': '{cname}', 'input': payload}});")
+        lines.append("    }")
+        lines.append("")
+    lines.append(TEMPLATE_FOOTER)
+    return '\n'.join(lines)
+
+def main():
+    p = argparse.ArgumentParser(description='Generate TypeScript SDK stub from MCP manifest')
+    p.add_argument('server_id', help='Server ID to fetch configuration for')
+    p.add_argument('--host', default='http://localhost:3000', help='Base URL of MCP Host')
+    p.add_argument('--output', default='mcp_client.ts', help='Destination file name')
+    args = p.parse_args()
+
+    try:
+        cfg = fetch_config(args.host, args.server_id)
+    except Exception as e:
+        print(f'Error fetching configuration: {e}', file=sys.stderr)
+        sys.exit(1)
+
+    sdk_code = generate_sdk(cfg)
+    with open(args.output, 'w') as f:
+        f.write(sdk_code)
+    print(f'SDK written to {args.output}')
+
+if __name__ == '__main__':
+    main()
diff --git a/scripts/get_config.py b/scripts/get_config.py
new file mode 100755
index 0000000000000000000000000000000000000000..114259da1c436766a44d1f39010e2b3df74f2ce6
--- /dev/null
+++ b/scripts/get_config.py
@@ -0,0 +1,37 @@
+import argparse
+import json
+import sys
+from urllib.request import urlopen, Request
+
+
+def fetch_config(base_url: str, server_id: str) -> dict:
+    url = f"{base_url}/api/servers/{server_id}/client-config"
+    req = Request(url)
+    with urlopen(req) as resp:
+        data = resp.read()
+    return json.loads(data)
+
+
+def main():
+    parser = argparse.ArgumentParser(description="Fetch MCP client configuration")
+    parser.add_argument("server_id", help="Server ID to fetch the config for")
+    parser.add_argument("--host", default="http://localhost:3000", help="Base URL of MCP Host")
+    parser.add_argument("--output", help="Path to save the config JSON")
+    args = parser.parse_args()
+
+    try:
+        cfg = fetch_config(args.host.rstrip("/"), args.server_id)
+    except Exception as e:
+        print(f"Error fetching configuration: {e}", file=sys.stderr)
+        sys.exit(1)
+
+    if args.output:
+        with open(args.output, "w") as f:
+            json.dump(cfg, f, indent=2)
+        print(f"Configuration saved to {args.output}")
+    else:
+        print(json.dumps(cfg, indent=2))
+
+
+if __name__ == "__main__":
+    main()
diff --git a/scripts/mcp_cli.py b/scripts/mcp_cli.py
new file mode 100644
index 0000000000000000000000000000000000000000..5121e0c5eb55de1c9eb2e3956fa78c58b544cc7d
--- /dev/null
+++ b/scripts/mcp_cli.py
@@ -0,0 +1,193 @@
+import argparse
+import json
+import sys
+from pathlib import Path
+from urllib.request import urlopen, Request
+
+import requests
+from fastapi import FastAPI
+import uvicorn
+
+
+def fetch_config(host: str, server_id: str) -> dict:
+    url = f"{host.rstrip('/')}/api/servers/{server_id}/client-config"
+    with urlopen(url) as resp:
+        return json.loads(resp.read())
+
+
+def sanitize(name: str) -> str:
+    return name.lower().replace(' ', '_')
+
+
+def generate_python_sdk(cfg: dict) -> str:
+    manifest = cfg.get('manifest', {})
+    lines = [
+        "class MCPClient:",
+        "    def __init__(self, invoke_url: str, api_key: str):",
+        "        self.invoke_url = invoke_url.rstrip('/')",
+        "        self.headers = {'Authorization': f'Bearer {api_key}', 'Content-Type': 'application/json'}",
+        "",
+        "    def _call(self, payload: dict):",
+        "        data = json.dumps(payload).encode()",
+        "        req = Request(self.invoke_url, data=data, headers=self.headers)",
+        "        with urlopen(req) as resp:",
+        "            return json.loads(resp.read())",
+        "",
+    ]
+    for cap in manifest.get('capabilities', []):
+        cname = cap.get('name')
+        if not cname:
+            continue
+        method = sanitize(cname)
+        desc = cap.get('description', '')
+        lines.append(f"    def {method}(self, payload: dict) -> dict:")
+        if desc:
+            lines.append(f"        \"\"\"{desc}\"\"\"")
+        lines.append(f"        return self._call({{'capability': '{cname}', 'input': payload}})")
+        lines.append('')
+    return '\n'.join(lines)
+
+
+def generate_ts_sdk(cfg: dict) -> str:
+    manifest = cfg.get('manifest', {})
+    lines = [
+        "export class MCPClient {",
+        "    constructor(public invokeUrl: string, public apiKey: string) {}",
+        "",
+        "    private async call(payload: any): Promise<any> {",
+        "        const res = await fetch(this.invokeUrl.replace(/\\/$/, ''), {",
+        "            method: 'POST',",
+        "            headers: {",
+        "                'Authorization': `Bearer ${this.apiKey}`,",
+        "                'Content-Type': 'application/json'",
+        "            },",
+        "            body: JSON.stringify(payload)",
+        "        });",
+        "        if (!res.ok) {",
+        "            throw new Error(`Request failed with ${res.status}`);",
+        "        }",
+        "        return res.json();",
+        "    }",
+        "",
+    ]
+    for cap in manifest.get('capabilities', []):
+        cname = cap.get('name')
+        if not cname:
+            continue
+        method = sanitize(cname)
+        desc = cap.get('description', '')
+        lines.append(f"    async {method}(payload: any): Promise<any> {{")
+        if desc:
+            lines.append(f"        // {desc}")
+        lines.append(f"        return this.call({{'capability': '{cname}', 'input': payload}});")
+        lines.append("    }")
+        lines.append("")
+    lines.append("}")
+    return '\n'.join(lines)
+
+
+TEMPLATE_FASTAPI = """from fastapi import FastAPI\nfrom mcp_client import MCPClient\n\nclient = MCPClient(\"{invoke_url}\", \"{api_key}\")\napp = FastAPI()\n\n@app.post('/invoke')\nasync def invoke(payload: dict):\n    return client._call(payload)\n"""
+
+def cmd_create(args):
+    if args.template != 'python-fastapi':
+        raise SystemExit('only python-fastapi template is supported for now')
+    cfg = fetch_config(args.host, args.mcp_id)
+    proj = Path(args.name)
+    proj.mkdir(parents=True, exist_ok=False)
+    (proj / 'requirements.txt').write_text('fastapi\nuvicorn\nrequests\n')
+    sdk_code = generate_python_sdk(cfg)
+    (proj / 'mcp_client.py').write_text(sdk_code)
+    main_code = TEMPLATE_FASTAPI.format(invoke_url=cfg['invoke_url'], api_key=cfg['api_key'])
+    (proj / 'main.py').write_text(main_code)
+    print(f'Scaffold created in {proj}')
+
+
+def cmd_fetch(args):
+    cfg = fetch_config(args.host, args.server_id)
+    if args.output:
+        with open(args.output, 'w') as f:
+            json.dump(cfg, f, indent=2)
+        print(f"Configuration written to {args.output}")
+    else:
+        print(json.dumps(cfg, indent=2))
+
+
+def cmd_py(args):
+    cfg = fetch_config(args.host, args.server_id)
+    code = generate_python_sdk(cfg)
+    with open(args.output, 'w') as f:
+        f.write(code)
+    print(f"Python SDK written to {args.output}")
+
+
+def cmd_ts(args):
+    cfg = fetch_config(args.host, args.server_id)
+    code = generate_ts_sdk(cfg)
+    with open(args.output, 'w') as f:
+        f.write(code)
+    print(f"TypeScript SDK written to {args.output}")
+
+
+def cmd_dev(args):
+    cfg = fetch_config(args.host, args.server_id)
+
+    app = FastAPI()
+
+    @app.post("/invoke")
+    async def invoke(payload: dict):
+        resp = requests.post(
+            cfg["invoke_url"].rstrip("/"),
+            json=payload,
+            headers={"Authorization": f"Bearer {cfg['api_key']}", "Content-Type": "application/json"},
+        )
+        resp.raise_for_status()
+        return resp.json()
+
+    uvicorn.run(app, host="0.0.0.0", port=args.port)
+
+
+def main():
+    p = argparse.ArgumentParser(description='MCP Host helper CLI')
+    sub = p.add_subparsers(dest='cmd', required=True)
+
+    f = sub.add_parser('fetch-config', help='Fetch client configuration')
+    f.add_argument('server_id')
+    f.add_argument('--host', default='http://localhost:3000')
+    f.add_argument('--output')
+    f.set_defaults(func=cmd_fetch)
+
+    py = sub.add_parser('gen-python', help='Generate Python SDK')
+    py.add_argument('server_id')
+    py.add_argument('--host', default='http://localhost:3000')
+    py.add_argument('--output', default='mcp_client.py')
+    py.set_defaults(func=cmd_py)
+
+    ts = sub.add_parser('gen-ts', help='Generate TypeScript SDK')
+    ts.add_argument('server_id')
+    ts.add_argument('--host', default='http://localhost:3000')
+    ts.add_argument('--output', default='mcp_client.ts')
+    ts.set_defaults(func=cmd_ts)
+
+    create = sub.add_parser('create', help='Scaffold an agent project')
+    create.add_argument('name')
+    create.add_argument('--mcp-id', required=True)
+    create.add_argument('--template', default='python-fastapi')
+    create.add_argument('--host', default='http://localhost:3000')
+    create.set_defaults(func=cmd_create)
+
+    dev = sub.add_parser('dev', help='Run a local proxy to the given server')
+    dev.add_argument('server_id')
+    dev.add_argument('--host', default='http://localhost:3000')
+    dev.add_argument('--port', type=int, default=8000)
+    dev.set_defaults(func=cmd_dev)
+
+    args = p.parse_args()
+    try:
+        args.func(args)
+    except Exception as e:
+        print(f'Error: {e}', file=sys.stderr)
+        sys.exit(1)
+
+
+if __name__ == '__main__':
+    main()
 
EOF
)